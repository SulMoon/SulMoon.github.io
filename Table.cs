//autoModifySuc!
// Generated by github.com/davyxu/tabtoy
// Version: 3.1.4
// DO NOT EDIT!!
using System.Collections.Generic;
namespace LuoRiverConfig
{
	// Defined in table: Globals
	public enum EquipLocation
	{
		/// <summary> 
		/// 武器
		/// </summary>
		Weapon = 0, // 武器
		/// <summary> 
		/// 帽子
		/// </summary>
		Hat = 1, // 帽子
		/// <summary> 
		/// 手套
		/// </summary>
		Glove = 2, // 手套
		/// <summary> 
		/// 胸甲
		/// </summary>
		Breastplate = 3, // 胸甲
		/// <summary> 
		/// 鞋子
		/// </summary>
		Shoes = 4, // 鞋子
		/// <summary> 
		/// 饰品
		/// </summary>
		Ornament = 5, // 饰品
		/// <summary> 
		/// 子武器
		/// </summary>
		SubWeapon = 6, // 子武器
		/// <summary> 
		/// 戒指
		/// </summary>
		Ring = 7, // 戒指
	}
	// Defined in table: Globals
	public enum AttributeType
	{
		/// <summary> 
		/// 最大血量
		/// </summary>
		HP = 0, // 最大血量
		/// <summary> 
		/// 最大血量百分比
		/// </summary>
		HPRate = 1, // 最大血量百分比
		/// <summary> 
		/// 最大精力
		/// </summary>
		Power = 2, // 最大精力
		/// <summary> 
		/// 最大精力百分比
		/// </summary>
		PowerRate = 3, // 最大精力百分比
		/// <summary> 
		/// 攻击力
		/// </summary>
		Atk = 4, // 攻击力
		/// <summary> 
		/// 攻击力百分比
		/// </summary>
		AtkRate = 5, // 攻击力百分比
		/// <summary> 
		/// 暴击率
		/// </summary>
		CritChance = 6, // 暴击率
		/// <summary> 
		/// 暴击伤害
		/// </summary>
		CritDamage = 7, // 暴击伤害
		/// <summary> 
		/// 闪避率
		/// </summary>
		Evasion = 8, // 闪避率
		/// <summary> 
		/// 全部伤害减免
		/// </summary>
		AllDamageReduction = 9, // 全部伤害减免
		/// <summary> 
		/// 近战伤害减免
		/// </summary>
		ShortDamageReduction = 10, // 近战伤害减免
		/// <summary> 
		/// 远程伤害减免
		/// </summary>
		LongDamageReduction = 11, // 远程伤害减免
		/// <summary> 
		/// BOSS伤害减免
		/// </summary>
		BossDamageReduction = 12, // BOSS伤害减免
		/// <summary> 
		/// 近伤害加成
		/// </summary>
		ShortDamageBonus = 13, // 近伤害加成
		/// <summary> 
		/// 远程害加成
		/// </summary>
		LongDamageBonus = 14, // 远程害加成
		/// <summary> 
		/// 血球恢复率
		/// </summary>
		RecoveryRatio = 15, // 血球恢复率
		/// <summary> 
		/// 附加技能
		/// </summary>
		Skill = 16, // 附加技能
		/// <summary> 
		/// 升级恢复生命率
		/// </summary>
		LvUpRecoveryRate = 17, // 升级恢复生命率
		/// <summary> 
		/// 角色基础属性增加率
		/// </summary>
		RoleBase = 18, // 角色基础属性增加率
		/// <summary> 
		/// 装备基础属性增加率
		/// </summary>
		EquipBase = 19, // 装备基础属性增加率
		/// <summary> 
		/// 角色在关卡内的最大等级增加量
		/// </summary>
		MaxLevel_Adder = 20, // 角色在关卡内的最大等级增加量
		/// <summary> 
		/// 每单位距离的精力消耗
		/// </summary>
		PowerCostPerDistance_Adder = 21, // 每单位距离的精力消耗
		/// <summary> 
		/// 精力槽回复速度
		/// </summary>
		PowerRecoverSpeed_Adder = 22, // 精力槽回复速度
		/// <summary> 
		/// 全伤害加成
		/// </summary>
		AllDamageBonus = 23, // 全伤害加成
		/// <summary> 
		/// 对boss伤害加成
		/// </summary>
		BossDamageBonus = 24, // 对boss伤害加成
		/// <summary> 
		/// 一击必杀概率(对小怪)
		/// </summary>
		OneHitKill = 25, // 一击必杀概率(对小怪)
		/// <summary> 
		/// 移动速度
		/// </summary>
		MoveSpeed_Multiplier = 26, // 移动速度
		/// <summary> 
		/// 移动速度
		/// </summary>
		MoveSpeed_Adder = 27, // 移动速度
		/// <summary> 
		/// 每单位距离的精力消耗
		/// </summary>
		PowerCostPerDistance_Multiplier = 28, // 每单位距离的精力消耗
		/// <summary> 
		/// 开始画线时消耗的精力
		/// </summary>
		PowerCostWhenStart_Adder = 29, // 开始画线时消耗的精力
		/// <summary> 
		/// 开始画线时消耗的精力
		/// </summary>
		PowerCostWhenStart_Multiplier = 30, // 开始画线时消耗的精力
		/// <summary> 
		/// 画线时每秒消耗的精力
		/// </summary>
		PowerCostPerSecond_Adder = 31, // 画线时每秒消耗的精力
		/// <summary> 
		/// 画线时每秒消耗的精力
		/// </summary>
		PowerCostPerSecond_Multiplier = 32, // 画线时每秒消耗的精力
	}
	// Defined in table: Globals
	public enum NewEquipQualityType
	{
		/// <summary> 
		/// 普通
		/// </summary>
		Normal = 0, // 普通
		/// <summary> 
		/// 精良
		/// </summary>
		Excellent = 1, // 精良
		/// <summary> 
		/// 稀有
		/// </summary>
		Rare = 2, // 稀有
		/// <summary> 
		/// 史诗
		/// </summary>
		Epic = 3, // 史诗
		/// <summary> 
		/// 史诗1
		/// </summary>
		Epic1 = 4, // 史诗1
		/// <summary> 
		/// 史诗2
		/// </summary>
		Epic2 = 5, // 史诗2
		/// <summary> 
		/// 传说
		/// </summary>
		Legend = 6, // 传说
		/// <summary> 
		/// 传说1
		/// </summary>
		Legend1 = 7, // 传说1
		/// <summary> 
		/// 传说2
		/// </summary>
		Legend2 = 8, // 传说2
		/// <summary> 
		/// 传说3
		/// </summary>
		Legend3 = 9, // 传说3
		/// <summary> 
		/// 神话
		/// </summary>
		Mythic = 10, // 神话
		/// <summary> 
		/// 神话1
		/// </summary>
		Mythic1 = 11, // 神话1
		/// <summary> 
		/// 神话2
		/// </summary>
		Mythic2 = 12, // 神话2
		/// <summary> 
		/// 神话3
		/// </summary>
		Mythic3 = 13, // 神话3
	}
	// Defined in table: Globals
	public enum NPCType
	{
		/// <summary> 
		/// 女神
		/// </summary>
		Godness = 0, // 女神
		/// <summary> 
		/// 恶魔
		/// </summary>
		Devil = 1, // 恶魔
		/// <summary> 
		/// 宗师
		/// </summary>
		Master = 2, // 宗师
		/// <summary> 
		/// 轮盘
		/// </summary>
		Turntable = 3, // 轮盘
		/// <summary> 
		/// 升级
		/// </summary>
		LevelUp = 4, // 升级
		/// <summary> 
		/// 商贩
		/// </summary>
		Trader = 5, // 商贩
		/// <summary> 
		/// 赌徒
		/// </summary>
		Gambler = 6, // 赌徒
	}
	// Defined in table: Globals
	public enum SkillEventType
	{
		PlayerStateChanged = 0, // 玩家状态转变
		BeforeEnemyHit = 1, // 敌人受击前
		AfterEnemyHit = 2, // 敌人受击后
		/// <summary> 
		/// 划线过程中选中敌人
		/// </summary>
		OnEnemyAimed = 3, // 瞄准敌人
		OnSlashFinished = 4, // 划线结束
		OnSlashBegin = 5, // 划线开始
		OnEnemyDied = 6, // 敌人死亡
		OnBossDied = 7, // 敌人死亡
		OnPlayerDied = 8, // 玩家死亡
		OnPlayerRespawn = 9, // 玩家复活
		OnPlayerGetHit = 10, // 玩家被打中
		OnPlayerDamaged = 11, // 玩家受到真实伤害
		OnGetSkill = 12, // 得到技能
		OnHpChanged = 13, // 血量变化
		OnDrawBegin = 14, // 开始画线
		LevelUp = 15, // 玩家升级
		BeforeEnemyDestroyed = 16, // 敌人死亡后销毁前
		OnEnergyGathered = 17, // 玩家集气完成
		OnEnergyCostOver = 18, // 玩家气耗光
		OnPathItemIgnited = 19, // 划线攻击路径爆炸事件
		OnStageClearWithNoDamage = 20, // 无伤通过一关卡
		OnShieldOver = 21, // 护盾消耗为零时触发
		OnMaxPowerChange = 22, // 最大精力改变时触发
		/// <summary> 
		/// 每个关卡开始时触发
		/// </summary>
		OnStartOneStage = 23, // 每个关卡开始时触发
		/// <summary> 
		/// 每个关卡结束时触发
		/// </summary>
		OnStageClear = 24, // 每个关卡结束时触发
		OnStageInitDone = 25, // 每关初始化完成时触发
		OnLinkedSkillGenerated = 26, // 子技能生成时触发
		/// <summary> 
		/// 玩家死亡前
		/// </summary>
		BeforePlayerDie = 27, // 玩家死亡前
		/// <summary> 
		/// 释放超必杀
		/// </summary>
		OnExSkillFire = 28, // 释放超必杀
		/// <summary> 
		/// 怪物死完
		/// </summary>
		OnEnemiesClear = 29, // 怪物死完
		/// <summary> 
		/// 拾起隐藏物品
		/// </summary>
		OnHiddenObjectPicked = 30, // 拾起隐藏物品
		/// <summary> 
		/// 当无限精力开始时
		/// </summary>
		OnStartInfinityPower = 31, // 当无限精力开始时
		/// <summary> 
		/// 当无限精力结束时
		/// </summary>
		OnEndInfinityPower = 32, // 当无限精力结束时
		/// <summary> 
		/// 当生成新一波怪
		/// </summary>
		OnOneWaveEnemySpawn = 33, // 当生成新一波怪
	}
	// Defined in table: Globals
	public enum SkillTriggerEvent
	{
		None = 0, // 无需监听
		/// <summary> 
		/// 获得技能时立即触发
		/// </summary>
		Instant = 1, // 立即触发
		/// <summary> 
		/// 画线连击数{IntArg0}个敌人时触发，且每多画到敌人都会触发一次，本次攻击完成后回收
		/// </summary>
		ComboAimTrigger = 2, // 划线人数
		/// <summary> 
		/// combo数达到{IntArg0}时触发，且每增加一次都会触发一次，本次攻击完成后回收
		/// </summary>
		ComboHitTrigger = 3, // 连击数量
		/// <summary> 
		/// 连杀数达到{IntArg0}后，攻击完成后触发且在{FloatArg0}秒后回收
		/// </summary>
		ComboKillTrigger = 4, // 连杀数量
		/// <summary> 
		/// 角色处于Idle{FloatArg0}秒后并且气还没满时触发，转变成其他状态后取消
		/// </summary>
		IdleWaitTrigger = 5, // Idle计时触发(同时监听是否为气满状态)
		/// <summary> 
		/// 画线画到{IntArg0}个敌人时在攻击完成后触发
		/// </summary>
		ComboAimTrigger2 = 6, // 划线攻击完成后触发
		/// <summary> 
		/// 画线画到{IntArg0}个敌人后，每次攻击到敌人时触发（无回收）
		/// </summary>
		ComboAimTrigger3 = 7, // 划线攻击触敌触发
		/// <summary> 
		/// 每次击杀怪物后触发
		/// </summary>
		KillTrigger = 8, // 击杀触发
		/// <summary> 
		/// 获得时触发一次 ， 并在以后每次血量变化时触发
		/// </summary>
		HpChangeTrigger = 9, // 立即触发并监听血量
		/// <summary> 
		/// 单个敌人被攻击{IntArg0}次后触发
		/// </summary>
		SingleEnemyHitTrigger = 10, // 同一敌人连击数量
		/// <summary> 
		/// 玩家升级后触发一次
		/// </summary>
		LevelUpTrigger = 11, // 玩家升级
		/// <summary> 
		/// 玩家气条满了触发
		/// </summary>
		EnergyGatheredTrigger = 12, // 集气完成
		/// <summary> 
		/// 玩家一次性消耗光所有精力槽时触发
		/// </summary>
		EnergyCostOverTrigger = 13, // 气耗光
		/// <summary> 
		/// 划线路径爆炸时触发
		/// </summary>
		PathItemTrigger = 14, // 划线路径爆炸
		/// <summary> 
		/// 划线攻击开始时触发
		/// </summary>
		SlashBeginTrigger = 15, // 开始攻击触发
		/// <summary> 
		/// 划线开始时触发特效1，每次路径爆炸触发技能灼烧
		/// </summary>
		FireSlashTrigger = 16, // 火烧连营
		/// <summary> 
		/// 死亡后原地复活一次，X秒内无敌
		/// </summary>
		PlayerRespawnTrigger = 17, // 重生
		/// <summary> 
		/// 无伤清关时触发
		/// </summary>
		ClearStageUnharmedTrigger = 18, // 攻击挑战
		/// <summary> 
		/// 关卡开始
		/// </summary>
		OneStageStartTrigger = 19, // 关卡开始
		/// <summary> 
		/// 角色处于Idle{FloatArg0}秒后触发，转变成其他状态后取消
		/// </summary>
		IdleWaitTrigger2 = 20, // idle计时触发
		/// <summary> 
		/// 单个敌人被攻击{IntArg0}次后触发
		/// </summary>
		SingleEnemyAfterHitTrigger = 21, // 同一敌人连击数量
		/// <summary> 
		/// 画线画了{IntArg0}次后触发并重置次数
		/// </summary>
		SlashTimesTrigger = 22, // 画线次数
		/// <summary> 
		/// 累计杀死{IntArg0}后触发并重置数量
		/// </summary>
		KillCountTrigger = 23, // 累计杀死敌人数量
		/// <summary> 
		/// 单个敌人被攻击{IntArg0}次后每次再攻击时都会触发
		/// </summary>
		SingleEnemyHitMultipleTimesTrigger = 24, // 同一敌人连击数量多次
		OneStageInitDoneTrigger = 25, // 关卡初始化完成
		ExSkillTrigger = 26, // 超必杀释放
		/// <summary> 
		/// 玩家受击时触发
		/// </summary>
		PlayerHitTrigger = 27, // 玩家受击
	}
	// Defined in table: Globals
	public enum FunctionType
	{
		/// <summary> 
		/// 副本章节多语言
		/// </summary>
		ChapterInfo = 0, // 副本章节
		/// <summary> 
		/// 装备类型多语言
		/// </summary>
		EquipType = 1, // 装备类型
		/// <summary> 
		/// 英雄角色多语言
		/// </summary>
		HeroCharacters = 2, // 英雄角色
		/// <summary> 
		/// 道具多语言
		/// </summary>
		Item = 3, // 道具
		/// <summary> 
		/// 商店多语言
		/// </summary>
		Shop = 4, // 商店
		/// <summary> 
		/// 技能多语言
		/// </summary>
		Skill = 5, // 技能
		/// <summary> 
		/// 成就多语言
		/// </summary>
		AchievementRequire = 6, // 成就完成条件
		/// <summary> 
		/// 每日任务多语言
		/// </summary>
		DailyTask = 7, // 每日任务
		/// <summary> 
		/// 签到多语言
		/// </summary>
		SignInConfig = 8, // 签到
		/// <summary> 
		/// 地图便签多语言
		/// </summary>
		MapTape = 9, // 地图便签
		/// <summary> 
		/// 大商店
		/// </summary>
		Store = 10, // 大商店
		/// <summary> 
		/// UI部分按钮解锁
		/// </summary>
		UIUnlockTip = 11, // UI部分按钮解锁
		/// <summary> 
		/// 对话
		/// </summary>
		Dialogue = 12, // 对话
		/// <summary> 
		/// 英雄专属技能
		/// </summary>
		HeroSkill = 13, // 英雄决技
		/// <summary> 
		/// 套装名称
		/// </summary>
		SpecialEquipSerial = 14, // 套装名称
		/// <summary> 
		/// 音频多语言
		/// </summary>
		Audio = 15, // 音频多语言
		/// <summary> 
		/// 周常任务功能模块多语言
		/// </summary>
		WeeklyTask = 16, // 周常任务
		/// <summary> 
		/// 七日签到
		/// </summary>
		SevenDayEvent = 17, // 七日签到
		/// <summary> 
		/// 通行证
		/// </summary>
		SeasonPass = 18, // 通行证
		/// <summary> 
		/// 通行证
		/// </summary>
		BeginnerGuide = 19, // 新手引导
	}
	// Defined in table: Globals
	public enum EnemyAttackType
	{
		Melee = 0, // 近战
		Remote = 1, // 远战
		Boss = 2, // Boss
		Tutorial = 3, // 引导怪
		Thief = 4, // 小偷怪
		Treasure = 5, // 宝箱怪
	}
	// Defined in table: Globals
	public enum EnemyDeadType
	{
		None = 0, // 普通
		Boom = 1, // 爆炸
		Scattered = 2, // 分裂
		Drop = 3, // 掉落
	}
	// Defined in table: Globals
	public enum SkillSeries
	{
		None = 0, // 无
		Series1 = 1, // 系列1
		Series2 = 2, // 系列2
		Series3 = 3, // 系列3
		Series4 = 4, // 系列4
		Series5 = 5, // 系列5
		Series6 = 6, // 系列6
		Series7 = 7, // 系列7
		Series8 = 8, // 系列8
		Series9 = 9, // 系列9
		Series10 = 10, // 系列10
	}
	// Defined in table: Globals
	public enum ShopType
	{
		Free = 0, // 免费
		Ad = 1, // 广告
		ItemExchange = 2, // 物品交换
		Cash = 3, // 现金
	}
	// Defined in table: Globals
	public enum ProductType
	{
		None = 0, // 默认值
		Consumable = 1, // 消耗品可以多次购买。
		NonConsumable = 2, // 非消耗品不能重新购买，并且无限期拥有。
		Subscription = 3, // 订阅的有效期是有限的。
	}
	// Defined in table: Globals
	public enum ElementalType
	{
		None = 0, 
		Fire = 1, 
		Ice = 2, 
		Electricity = 3, 
		Poison = 4, 
		Blade = 5, 
	}
	// Defined in table: Globals
	public enum BuffHurtType
	{
		Burned = 0, // 燃烧
		Bleed = 1, // 流血
		Poisoned = 2, // 中毒
		Frozen = 3, // 冰冻
	}
	// Defined in table: Globals
	public enum RoleQualityType
	{
		/// <summary> 
		/// 普通
		/// </summary>
		Normal = 0, // 普通
		/// <summary> 
		/// 精良
		/// </summary>
		Excellent = 1, // 精良
		/// <summary> 
		/// 稀有
		/// </summary>
		Rare = 2, // 稀有
		/// <summary> 
		/// 史诗
		/// </summary>
		Epic = 3, // 史诗
		/// <summary> 
		/// 传说
		/// </summary>
		Legend = 4, // 传说
		/// <summary> 
		/// 神话
		/// </summary>
		Mythic = 5, // 神话
	}
	// Defined in table: Globals
	public enum SpecialEquipSerialType
	{
		/// <summary> 
		/// 无
		/// </summary>
		None = 0, // 无
		/// <summary> 
		/// 狂暴
		/// </summary>
		Rage = 1, // 狂暴
	}
	// Defined in table: Achievements
	public enum AchievementsType
	{
		MainLine = 0, // 主线关卡到达
		RoleLv = 1, // 角色升级到达
		WeaponLv = 2, // 武器升级到达
		BreastplateLv = 3, // 胸甲升级到达
		NecklaceLv = 4, // 项链升级到达
		RoleQuality = 5, // 角色品质到达
		WeaponQuality = 6, // 武器品质到达
		BreastplateQuality = 7, // 胸甲品质到达
		NecklaceQuality = 8, // 项链品质到达
		Talents = 9, // 天赋升级次数
		DailyTasks = 10, // 每日任务次数
		CoinMaze = 11, // 金币秘境次数
		DiamondMaze = 12, // 钻石秘境次数
		HeroMaze = 13, // 英雄秘境次数
		StrengthBuy = 14, // 购买体力次数
		Weapons = 15, // 获得武器个数
		Breastplates = 16, // 获得胸甲个数
		Necklaces = 17, // 获得项链个数
		Coins = 18, // 获得金币数量
		Diamonds = 19, // 获得钻石数量
		Synthesis = 20, // 合成装备次数
		EquipBox = 21, // 开宝箱次数
		MainLineChallenges = 22, // 主线挑战次数
		Login = 23, // 登录游戏天数
		EpicEquipments = 24, // 获得神话装备个数
		Evolution = 25, // 进化次数
		OfflineIncome = 26, // 收取巡逻收益次数
		Recharge = 27, // 累计充值次数
		CapLv = 28, // 帽子升级到达
		GloveLv = 29, // 手套升级到达
		ShoesLv = 30, // 鞋子升级到达
		RingLv = 31, // 戒指升级到达
		SubweaponLv = 32, // 暗器升级到达
		CapQuality = 33, // 帽子品质到达
		GloveQuality = 34, // 手套品质到达
		ShoesQuality = 35, // 鞋子品质到达
		RingQuality = 36, // 戒指品质到达
		SubweaponQuality = 37, // 暗器品质到达
		Caps = 38, // 获得帽子个数
		Gloves = 39, // 获得手套个数
		Shoes = 40, // 获得鞋子个数
		Rings = 41, // 获得戒指个数
		Subweapons = 42, // 获得暗器个数
	}
	// Defined in table: AudioConfig
	public enum AudioType
	{
		/// <summary> 
		/// 主音乐
		/// </summary>
		MainMusic = 0, // 主音乐
		/// <summary> 
		/// 短音效
		/// </summary>
		ShortSound = 1, // 短音效
		/// <summary> 
		/// 长音乐(BGM)
		/// </summary>
		LongMusic = 2, // BGM
		/// <summary> 
		/// 剧情对话语音
		/// </summary>
		Dialogue = 3, // 对话
	}
	// Defined in table: Banner
	public enum BannerType
	{
		Notice = 0, // 通知
		First = 1, // 首充礼包
		Limit = 2, // 限时礼包
		SkillStone = 3, // 技能石礼包
		Sales = 4, // 销售
		Role = 5, // 角色礼包
	}
	// Defined in table: Boss
	public enum Stage
	{
		First = 0, // 第一阶段
		Second = 1, // 第二阶段
	}
	// Defined in table: CycleShop
	public enum CycleType
	{
		Daily = 0, // 每日
		Weekly = 1, // 每周
		Mounthly = 2, // 每月
	}
	// Defined in table: General
	public enum GeneralType
	{
		/// <summary> 
		/// 场景滑动参数
		/// </summary>
		BackGroundMove = 0, // 场景滑动
		/// <summary> 
		/// 设置界面
		/// </summary>
		Setting = 1, // 设置界面
		/// <summary> 
		/// 体力
		/// </summary>
		Strength = 2, // 体力
		/// <summary> 
		/// 小偷（宝箱）怪生命时间
		/// </summary>
		Thief = 3, // 小偷怪数据
		SpineAction = 4, // Spine行为
		BuyPower = 5, // 购买体力
		SkillBG = 6, // 技能背景
		NPC = 7, // NPC相关
		QuickPatrol = 8, // 快速巡逻
		InitEquip = 9, // 出生装备
		EnemyData = 10, // 怪物数据
		SettingInGame = 11, // 场景配置
		SkillShopUnlock = 12, // 技能商店解锁
		DrawLine = 13, // 画线相关
		EquipQualityCircleLight = 14, // 装备品级光环
		ChangeName = 15, // 修改名称
		Banner = 16, // 消息Banner
		BannerSalse = 17, // 销售Banner
		IncomeLimit = 18, // 收益限制
		Pass = 19, // 通行证
		Chapter1Suggestion = 20, // 章节1推荐
		Chapter2Suggestion = 21, // 章节2推荐
		Chapter3Suggestion = 22, // 章节3推荐
		SkillUpgradeBanner = 23, // 技能升级Banner
		SkillShopBanner = 24, // 技能商店Banner
		PoisonedBuffEfx = 25, // Buff中毒特效
		FrozenBuffEfx = 26, // Buff冰冻特效
		BurnedBuffEfx = 27, // Buff灼烧特效
	}
	// Defined in table: Item
	public enum ItemType
	{
		/// <summary> 
		/// 其他
		/// </summary>
		Other = 0, // 其他
		/// <summary> 
		/// 金币
		/// </summary>
		Gold = 1, // 金币
		/// <summary> 
		/// 钻石
		/// </summary>
		Diamond = 2, // 钻石
		/// <summary> 
		/// 装备
		/// </summary>
		Equip = 3, // 装备
		/// <summary> 
		/// 材料
		/// </summary>
		Material = 4, // 材料
		/// <summary> 
		/// 角色碎片
		/// </summary>
		Heroshards = 5, // 角色碎片
		/// <summary> 
		/// 纹章
		/// </summary>
		Emblem = 6, // 纹章
		/// <summary> 
		/// 技能石
		/// </summary>
		SkillStone = 7, // 技能石
		/// <summary> 
		/// 装备品级强化材料
		/// </summary>
		EquipQualityMaterial = 8, // 装备品级强化材料
		/// <summary> 
		/// 没有实体的抽象类物品,比如十连抽图标
		/// </summary>
		Abstract = 9, // 抽象物品
		/// <summary> 
		/// 装备盒子等可使用的
		/// </summary>
		Consumable = 10, // 消耗品
		/// <summary> 
		/// 随机装备宝箱
		/// </summary>
		RandomEquipbox = 11, // 随机装备宝箱
	}
	// Defined in table: Localization
	public enum LanguageType
	{
		/// <summary> 
		/// 默认未设置
		/// </summary>
		Unset = 0, // 默认未设置
		/// <summary> 
		/// 简体中文
		/// </summary>
		ChineseSimplified = 1, // 简体中文
		/// <summary> 
		/// 繁体中文
		/// </summary>
		ChineseTraditional = 2, // 繁体中文
		/// <summary> 
		/// 英文
		/// </summary>
		English = 3, // 英文
		/// <summary> 
		/// 泰语
		/// </summary>
		Thai = 4, // 泰语
		/// <summary> 
		/// 越南语
		/// </summary>
		Vietnamese = 5, // 越南语
		/// <summary> 
		/// 印度尼西亚语
		/// </summary>
		Indonesian = 6, // 印度尼西亚语
		/// <summary> 
		/// 太伽罗语
		/// </summary>
		Tagalog = 7, // 太伽罗语
		/// <summary> 
		/// 马来西亚语
		/// </summary>
		Malay = 8, // 马来西亚语
	}
	// Defined in table: ModuleConfig
	public enum UIModuleType
	{
		Challenge = 0, // 主线挑战
		DailyActivity = 1, // 每日活动
	}
	// Defined in table: PassReward
	public enum PassType
	{
		Free = 0, // 免费奖励
		Lv1 = 1, // 第一档奖励
		Lv2 = 2, // 第二档奖励
	}
	// Defined in table: Rank
	public enum RankType
	{
		RoleDonkey = 0, // 角色驴等级
		RoleRooster = 1, // 角色鸡等级
		RoleMonkey = 2, // 角色猴等级
		Recharge = 3, // 充值
		Chapter = 4, // 章节进度
		EquipScore = 5, // 装备强度
	}
	// Defined in table: RedDot
	public enum ModuleType
	{
		/// <summary> 
		/// 签到
		/// </summary>
		SignIn = 0, // 签到
		/// <summary> 
		/// 每日任务
		/// </summary>
		DailyTask = 1, // 每日任务
		/// <summary> 
		/// 成就
		/// </summary>
		Achievement = 2, // 成就
		/// <summary> 
		/// 每日任务宝箱
		/// </summary>
		TaskBox = 3, // 每日任务宝箱
		/// <summary> 
		/// 天赋
		/// </summary>
		UITalent = 4, // 天赋
		/// <summary> 
		/// 商店
		/// </summary>
		UIStore = 5, // 商店
		/// <summary> 
		/// 邮箱
		/// </summary>
		UIMail = 6, // 邮箱
		/// <summary> 
		/// 每日活动
		/// </summary>
		DailyMaze = 7, // 每日活动
		/// <summary> 
		/// 巡逻收益
		/// </summary>
		PatrolBenefit = 8, // 巡逻收益
		/// <summary> 
		/// 体力快速巡逻
		/// </summary>
		StaminaQuickPatrol = 9, // 体力快速巡逻
		/// <summary> 
		/// 广告快速巡逻
		/// </summary>
		AdQuickPatrol = 10, // 广告快速巡逻
		/// <summary> 
		/// 解锁新角色
		/// </summary>
		UnlockRole = 11, // 解锁新角色
		/// <summary> 
		/// 升级角色
		/// </summary>
		UpgradeRole = 12, // 升级角色
		/// <summary> 
		/// 角色觉醒
		/// </summary>
		RoleAwake = 13, // 角色觉醒
		/// <summary> 
		/// 装备
		/// </summary>
		Equipment = 14, // 装备红点
		/// <summary> 
		/// 成长基金
		/// </summary>
		GrowUpGrowthFund = 15, // 成长基金红点
		/// <summary> 
		/// 精英基金
		/// </summary>
		EliteGrowthFund = 16, // 精英基金红点
		/// <summary> 
		/// 装备合成红点
		/// </summary>
		EquipmentCompound = 17, // 装备合成红点
		/// <summary> 
		/// 忍者驴排行榜红点
		/// </summary>
		RoleDonkey = 18, // 忍者驴排行榜红点
		/// <summary> 
		/// 忍者鸡排行榜红点
		/// </summary>
		RoleRooster = 19, // 忍者鸡排行榜红点
		/// <summary> 
		/// 忍者鳄排行榜红点
		/// </summary>
		RoleMonkey = 20, // 忍者猴排行榜红点
		/// <summary> 
		/// 充值排行榜红点
		/// </summary>
		RechargeRanking = 21, // 充值排行榜红点
		/// <summary> 
		/// 章节排行榜红点
		/// </summary>
		ChapterRanking = 22, // 章节排行榜红点
		/// <summary> 
		/// 装备排行榜红点
		/// </summary>
		EquipmentRanking = 23, // 装备排行榜红点
		/// <summary> 
		/// 周任务
		/// </summary>
		WeeklyTask = 24, // 周任务
		/// <summary> 
		/// 周任务宝箱
		/// </summary>
		WeeklyTaskBox = 25, // 周任务宝箱
		/// <summary> 
		/// 七日任务
		/// </summary>
		SevenDayTask = 26, // 七日任务
		/// <summary> 
		/// 技能堂升级
		/// </summary>
		SkillHallUpgrade = 27, // 技能堂升级
		/// <summary> 
		/// 存钱罐
		/// </summary>
		SavingPot = 28, // 存钱罐
		/// <summary> 
		/// 七日签到
		/// </summary>
		SevenDaySignIn = 29, // 七日签到
		/// <summary> 
		/// 通行证
		/// </summary>
		SeasonPass = 30, // 通行证
	}
	// Defined in table: SevenDayEventTask
	public enum SevenDayTaskType
	{
		Login = 0, // 累计登录天数
		MainLine = 1, // 通关章节
		EquipQuality = 2, // 装备品质数量
		EquipLevel = 3, // 装备等级数量
		MainLineEntry = 4, // 主线进入
		MainLineClear = 5, // 主线通关
		CollectCoins = 6, // 累计获得金币
		CollectDiamonds = 7, // 累计获得钻石
		ConsumeDiamonds = 8, // 累计消耗钻石
		EquipBox = 9, // 累计开启装备宝箱次数
		Talent = 10, // 累计升级普通天赋次数
		Evolution = 11, // 累计升级进化天赋次数
		MazeCoin = 12, // 金币副本挑战次数
		EquipLevelTotal = 13, // 全身装备总等级
		MainLineReward = 14, // 打开章节奖励宝箱次数
		MazeChallenge = 15, // 挑战章节次数
		OfflineTimes = 16, // 累计领取巡逻收益次数
		RoleLevel = 17, // 角色等级
		Roles = 18, // 累计拥有角色数量
	}
	// Defined in table: Shop
	public enum ShopItemType
	{
		/// <summary> 
		/// 装备宝箱
		/// </summary>
		EquipBox = 0, // 装备宝箱
		/// <summary> 
		/// 物品宝箱
		/// </summary>
		Item = 1, // 物品宝箱
		/// <summary> 
		/// 体力宝箱
		/// </summary>
		Strength = 2, // 体力宝箱
		/// <summary> 
		/// 离线收益宝箱
		/// </summary>
		Offline = 3, // 离线收益宝箱
		/// <summary> 
		/// 英雄宝箱
		/// </summary>
		Hero = 4, // 英雄宝箱
		/// <summary> 
		/// 礼包
		/// </summary>
		Pack = 5, // 礼包
		/// <summary> 
		/// 其它
		/// </summary>
		Other = 6, // 其它
		/// <summary> 
		/// 快速巡逻
		/// </summary>
		FastPatrol = 7, // 快速巡逻
		/// <summary> 
		/// 订阅
		/// </summary>
		Subscription = 8, // 订阅
		/// <summary> 
		/// 基金
		/// </summary>
		Fund = 9, // 基金
		/// <summary> 
		/// Banner礼包
		/// </summary>
		Banner = 10, // Banner礼包
		/// <summary> 
		/// 存钱罐
		/// </summary>
		SavingPot = 11, // 存钱罐
		/// <summary> 
		/// 通行证
		/// </summary>
		Pass = 12, // 通行证
		/// <summary> 
		/// 通行证积分
		/// </summary>
		PassScore = 13, // 通行证积分
	}
	// Defined in table: Skill
	public enum SkillAttackType
	{
		None = 0, // 属性加成
		Single = 1, // 单攻
		Group = 2, // 群攻
		PlayerData = 3, // 玩家数据
		Skill = 4, // 技能修改
	}
	// Defined in table: Skill
	public enum SkillSelectorType
	{
		None = 0, // 无
		Sector = 1, // 扇形(圆形)
		Rectangle = 2, // 矩形
		Slash = 3, // 技能沿线
		SlashSingle = 4, // 划中敌人
		EntireScene = 5, // 全部敌人
		SlashEvenDead = 6, // 技能沿线无论死活
		EnemySector = 7, // 敌人扇形
		Player = 8, // 玩家
	}
	// Defined in table: Skill
	public enum SelectorCondition
	{
		Alive = 0, // 生
		DeadAndAlive = 1, // 死或生
	}
	// Defined in table: Skill
	public enum AddAttributeType
	{
		Value = 0, // 数值
		Ratio = 1, // 比率
	}
	// Defined in table: Skill
	public enum SkillTriggerType
	{
		OnceRemove = 0, // 触发移除
		Stay = 1, // 保留
	}
	// Defined in table: Skill
	public enum SkillType
	{
		Skill = 0, // 技能
		Talent = 1, // 天赋
		SubSkill = 2, // 子技能
		LvlUnlockSkill = 3, // 解锁技能
		WeaponSkill = 4, // 武器技能
		PickUpSkill = 5, // 拾取技能
		HeroSkill = 6, // 英雄技能
	}
	// Defined in table: Skill
	public enum SkillGrade
	{
		None = 0, // 无
		White = 1, // 白
		Black = 2, // 黑
		Final = 3, // 终极
	}
	// Defined in table: Skill
	public enum ImpactType
	{
		None = 0, // 无
		/// <summary> 
		/// 此处皆为类名去除Impact，例如Attack在项目中最终类名为AttackImpact
		/// </summary>
		Attack = 1, // 攻击
		Heal = 2, // 血量
		MaxHP = 3, // 最大血量
		Critical = 4, // 暴率
		CriticalDamage = 5, // 暴伤
		EnergyConsume = 6, // 精力消耗
		EnergyRecover = 7, // 精力恢复
		EnemySpeed = 8, // 敌人移动速度
		Bleeding = 9, // 流血
		Rage = 10, // 愤怒
		Damage = 11, // 伤害
		BossDamageReduction = 12, // Boss伤减
		UpgradeHeal = 13, // 升级恢复
		HPHeal = 14, // 恢复效果
		MeleeAttackReduction = 15, // 近战伤减
		RangeAttackReduction = 16, // 远程伤减
		MeleeDamageAddition = 17, // 近战加成
		RangeDamageAddition = 18, // 远程加成
		BossDamageAddition = 19, // Boss加成
		DamageAddition = 20, // 伤害加成
		RoleBaseProperty = 21, // 角色基础属性
		Dodge = 22, // 闪避
		EquipmentBaseProperty = 23, // 装备基础属性
		MultiAttack = 24, // 多阶段加攻
		MultiCritical = 25, // 多阶段暴率
		MultiCriticalDamage = 26, // 多阶段暴伤
		Burning = 27, // 灼烧
		Life = 28, // 生命
		MultiMaxHP = 29, // 多阶段最大血量
		OneHitKill = 30, // 必杀
		Poisoned = 31, // 中毒
		Frozen = 32, // 冻结
		EnemyBulletSpeed = 33, // 敌人子弹速度
		Shield = 34, // 护盾
		AllDamageReduction = 35, // 全部伤减
		MaxEnergy = 36, // 最大精力
		Speed = 37, // 速度
		MultiDodge = 38, // 多阶段闪避
		StartSkill = 39, // 初始技能
		DropBlood = 40, // 掉落血球
		AngelHeal = 41, // 天使回血
		MultiEnemyDamageAddition = 42, // 多阶段伤敌增强
		MultiEnemyCrit = 43, // 多阶段伤敌暴率
		MultiEnemyCritDamage = 44, // 多阶段伤敌暴伤
		BodySize = 45, // 体型
		RefreshSkillSelect = 46, // 刷新技能选择
		Invincibility = 47, // 无敌
		MultiBossDamageAddition = 48, // 多阶段Boss加成
		MultiSpeed = 49, // 多阶段速度
		OneHitKillOnEnemy = 50, // 敌人侧必杀
		ReflectDamage = 51, // 反伤
		EnergyConsumeByTime = 52, // 精力按时间消耗
		EnergyFixedConsumption = 53, // 精力固定消耗
		EnergyUpperLimit = 54, // 提升精力上限
	}
	// Defined in table: SpecialChapterInfo
	public enum SpecialChapterType
	{
		Gold = 0, // 黄金屋
		Diamond = 1, // 钻石洞
		Hero = 2, // 英雄殿
		Skill = 3, // 技能石
	}
	// Defined in table: StageInfo
	public enum BossShowType
	{
		None = 0, // 无
		ThreeHead = 1, // 三头树
		Wizard = 2, // 红衣法师
		White = 3, // 白驴
		Other = 4, // 其他
	}
	// Defined in table: TalentEvolution
	public enum EvolutionType
	{
		/// <summary> 
		/// 战斗开始获取1个技能
		/// </summary>
		Skill = 0, // 战斗开始获取1个技能
	}
	// Defined in table: TaskConfig
	public enum DailyTaskType
	{
		Login = 0, // 登录游戏
		MainLineChallenges = 1, // 主线挑战次数
		CoinMaze = 2, // 金币秘境次数
		DiamondMaze = 3, // 钻石秘境次数
		HeroMaze = 4, // 英雄秘境次数
		HeroLvUp = 5, // 英雄升级次数
		EquipLvUp = 6, // 装备升级次数
		Talents = 7, // 天赋升级次数
		Synthesis = 8, // 装备合成次数
		CoinBuy = 9, // 金币购买次数
		DiamondBuy = 10, // 钻石购买次数
		StrengthBuy = 11, // 体力购买次数
		EquipBox = 12, // 宝箱开启次数
		OfflineIncome = 13, // 领取挂机收益次数
		Recharge = 14, // 任意充值次数
	}
	// Defined in table: UIStoreData
	public enum SubStoreType
	{
		SubA = 0, // 章节礼包
		SubB = 1, // 装备宝箱
		SubC = 2, // 钻石
		SubD = 3, // 金币
	}
	// Defined in table: UIUnlockTip
	public enum UnlockUIName
	{
		/// <summary> 
		/// 0
		/// </summary>
		None = 0, // 0
		/// <summary> 
		/// 商店
		/// </summary>
		Store = 1, // 商店
		/// <summary> 
		/// 天赋
		/// </summary>
		Talent = 2, // 天赋
		/// <summary> 
		/// 签到
		/// </summary>
		SignIn = 3, // 签到
		/// <summary> 
		/// 任务
		/// </summary>
		Task = 4, // 任务
		/// <summary> 
		/// 背包
		/// </summary>
		Equipment = 5, // 背包
		/// <summary> 
		/// 材料副本
		/// </summary>
		MaterialDungeon = 6, // 材料副本
		/// <summary> 
		/// 主线挑战
		/// </summary>
		StageChanllenge = 7, // 主线挑战
		/// <summary> 
		/// 月卡
		/// </summary>
		MonthCard = 8, // 月卡
		/// <summary> 
		/// 技能堂
		/// </summary>
		SkillHall = 9, // 技能堂
		/// <summary> 
		/// 基金
		/// </summary>
		GrowthFund = 10, // 基金
		/// <summary> 
		/// 物资商店
		/// </summary>
		SupplyStore = 11, // 物资商店
		/// <summary> 
		/// 排行榜
		/// </summary>
		Rank = 12, // 排行榜
		/// <summary> 
		/// 排行榜
		/// </summary>
		SevenDayEvent = 13, // 七日乐
		/// <summary> 
		/// 排行榜
		/// </summary>
		PiggyBank = 14, // 存钱罐
		/// <summary> 
		/// 排行榜
		/// </summary>
		SeasonPass = 15, // 英雄通行证
		/// <summary> 
		/// 排行榜
		/// </summary>
		SignIn7 = 16, // 七日签到
	}
	// Defined in table: WeeklyTaskConfig
	public enum WeeklyTaskType
	{
		EquipFusion = 0, // 合成任意装备
		ClearAnyMainChapter = 1, // 完成任意主线章节
		/// <summary> 
		/// 不算开宝箱
		/// </summary>
		PurchaseItems = 2, // 商店购买物品
		ClearAnyChallengeChapter = 3, // 完成任意挑战章节
		/// <summary> 
		/// 包含S宝箱
		/// </summary>
		OpenEquipBox = 4, // 开启任意宝箱
		ClearAnyDungeon = 5, // 完成任意副本
	}
	// Defined in table: TableConfig
	public partial class TableConfig
	{
		public tabtoy.Logger TableLogger = new tabtoy.Logger();
		/// <summary> 
		/// Achievements
		/// </summary>
		public List<AchievementsDefine> Achievements = new List<AchievementsDefine>(1037); 
		/// <summary> 
		/// AudioConfig
		/// </summary>
		public List<AudioConfigDefine> AudioConfig = new List<AudioConfigDefine>(432); 
		/// <summary> 
		/// Avatar
		/// </summary>
		public List<AvatarDefine> Avatar = new List<AvatarDefine>(19); 
		/// <summary> 
		/// Banner
		/// </summary>
		public List<BannerDefine> Banner = new List<BannerDefine>(44); 
		/// <summary> 
		/// Boss
		/// </summary>
		public List<BossDefine> Boss = new List<BossDefine>(83); 
		/// <summary> 
		/// BoxSet
		/// </summary>
		public List<BoxSetDefine> BoxSet = new List<BoxSetDefine>(1); 
		/// <summary> 
		/// ChapterInfo
		/// </summary>
		public List<ChapterInfoDefine> ChapterInfo = new List<ChapterInfoDefine>(97); 
		/// <summary> 
		/// ClearReward
		/// </summary>
		public List<ClearRewardDefine> ClearReward = new List<ClearRewardDefine>(386); 
		/// <summary> 
		/// CycleShop
		/// </summary>
		public List<CycleShopDefine> CycleShop = new List<CycleShopDefine>(17); 
		/// <summary> 
		/// Dialogue
		/// </summary>
		public List<DialogueDefine> Dialogue = new List<DialogueDefine>(100); 
		/// <summary> 
		/// ElementalDamageFormula
		/// </summary>
		public List<ElementalDamageFormulaDefine> ElementalDamageFormula = new List<ElementalDamageFormulaDefine>(24); 
		/// <summary> 
		/// Enemy
		/// </summary>
		public List<EnemyDefine> Enemy = new List<EnemyDefine>(119); 
		/// <summary> 
		/// EquipLocationLevel
		/// </summary>
		public List<EquipLocationLevelDefine> EquipLocationLevel = new List<EquipLocationLevelDefine>(1200); 
		/// <summary> 
		/// EquipMaterialMap
		/// </summary>
		public List<EquipMaterialMapDefine> EquipMaterialMap = new List<EquipMaterialMapDefine>(24); 
		/// <summary> 
		/// EquipOptional
		/// </summary>
		public List<EquipOptionalDefine> EquipOptional = new List<EquipOptionalDefine>(2); 
		/// <summary> 
		/// EquipQuality
		/// </summary>
		public List<EquipQualityDefine> EquipQuality = new List<EquipQualityDefine>(14); 
		/// <summary> 
		/// EquipQualityGrowInfo
		/// </summary>
		public List<EquipQualityGrowInfoDefine> EquipQualityGrowInfo = new List<EquipQualityGrowInfoDefine>(25); 
		/// <summary> 
		/// EquipSet
		/// </summary>
		public List<EquipSetDefine> EquipSet = new List<EquipSetDefine>(80); 
		/// <summary> 
		/// EquipSetInfo
		/// </summary>
		public List<EquipSetInfoDefine> EquipSetInfo = new List<EquipSetInfoDefine>(10); 
		/// <summary> 
		/// EquipShop
		/// </summary>
		public List<EquipShopDefine> EquipShop = new List<EquipShopDefine>(4); 
		/// <summary> 
		/// EquipShopFloor
		/// </summary>
		public List<EquipShopFloorDefine> EquipShopFloor = new List<EquipShopFloorDefine>(3); 
		/// <summary> 
		/// EquipType
		/// </summary>
		public List<EquipTypeDefine> EquipType = new List<EquipTypeDefine>(40); 
		/// <summary> 
		/// General
		/// </summary>
		public List<GeneralDefine> General = new List<GeneralDefine>(28); 
		/// <summary> 
		/// HeroAwake
		/// </summary>
		public List<HeroAwakeDefine> HeroAwake = new List<HeroAwakeDefine>(24); 
		/// <summary> 
		/// HeroCharacters
		/// </summary>
		public List<HeroCharactersDefine> HeroCharacters = new List<HeroCharactersDefine>(4); 
		/// <summary> 
		/// HeroLevel
		/// </summary>
		public List<HeroLevelDefine> HeroLevel = new List<HeroLevelDefine>(400); 
		/// <summary> 
		/// HeroLevelInStage
		/// </summary>
		public List<HeroLevelInStageDefine> HeroLevelInStage = new List<HeroLevelInStageDefine>(11); 
		/// <summary> 
		/// HighGrowthFund
		/// </summary>
		public List<HighGrowthFundDefine> HighGrowthFund = new List<HighGrowthFundDefine>(24); 
		/// <summary> 
		/// Item
		/// </summary>
		public List<ItemDefine> Item = new List<ItemDefine>(103); 
		/// <summary> 
		/// ItemSet
		/// </summary>
		public List<ItemSetDefine> ItemSet = new List<ItemSetDefine>(8); 
		/// <summary> 
		/// ItemSetInfo
		/// </summary>
		public List<ItemSetInfoDefine> ItemSetInfo = new List<ItemSetInfoDefine>(1); 
		/// <summary> 
		/// Localization
		/// </summary>
		public List<LocalizationDefine> Localization = new List<LocalizationDefine>(1404); 
		/// <summary> 
		/// LootOnlyInCombat
		/// </summary>
		public List<LootOnlyInCombatDefine> LootOnlyInCombat = new List<LootOnlyInCombatDefine>(8); 
		/// <summary> 
		/// MapObject
		/// </summary>
		public List<MapObjectDefine> MapObject = new List<MapObjectDefine>(5); 
		/// <summary> 
		/// MapRandomPool
		/// </summary>
		public List<MapRandomPoolDefine> MapRandomPool = new List<MapRandomPoolDefine>(191); 
		/// <summary> 
		/// MapTape
		/// </summary>
		public List<MapTapeDefine> MapTape = new List<MapTapeDefine>(286); 
		/// <summary> 
		/// ModuleConfig
		/// </summary>
		public List<ModuleConfigDefine> ModuleConfig = new List<ModuleConfigDefine>(); 
		/// <summary> 
		/// NormalGrowthFund
		/// </summary>
		public List<NormalGrowthFundDefine> NormalGrowthFund = new List<NormalGrowthFundDefine>(24); 
		/// <summary> 
		/// NPC
		/// </summary>
		public List<NPCDefine> NPC = new List<NPCDefine>(7); 
		/// <summary> 
		/// Offline
		/// </summary>
		public List<OfflineDefine> Offline = new List<OfflineDefine>(98); 
		/// <summary> 
		/// PassReward
		/// </summary>
		public List<PassRewardDefine> PassReward = new List<PassRewardDefine>(90); 
		/// <summary> 
		/// PiggyBank
		/// </summary>
		public List<PiggyBankDefine> PiggyBank = new List<PiggyBankDefine>(4); 
		/// <summary> 
		/// Rank
		/// </summary>
		public List<RankDefine> Rank = new List<RankDefine>(54); 
		/// <summary> 
		/// RedDot
		/// </summary>
		public List<RedDotDefine> RedDot = new List<RedDotDefine>(31); 
		/// <summary> 
		/// RetailSkills
		/// </summary>
		public List<RetailSkillsDefine> RetailSkills = new List<RetailSkillsDefine>(4); 
		/// <summary> 
		/// SevenDayEventExpBar
		/// </summary>
		public List<SevenDayEventExpBarDefine> SevenDayEventExpBar = new List<SevenDayEventExpBarDefine>(8); 
		/// <summary> 
		/// SevenDayEventTask
		/// </summary>
		public List<SevenDayEventTaskDefine> SevenDayEventTask = new List<SevenDayEventTaskDefine>(75); 
		/// <summary> 
		/// SevenDaySignIn
		/// </summary>
		public List<SevenDaySignInDefine> SevenDaySignIn = new List<SevenDaySignInDefine>(7); 
		/// <summary> 
		/// Shop
		/// </summary>
		public List<ShopDefine> Shop = new List<ShopDefine>(108); 
		/// <summary> 
		/// SignInConfig
		/// </summary>
		public List<SignInConfigDefine> SignInConfig = new List<SignInConfigDefine>(28); 
		/// <summary> 
		/// Skill
		/// </summary>
		public List<SkillDefine> Skill = new List<SkillDefine>(599); 
		/// <summary> 
		/// SkillLevel
		/// </summary>
		public List<SkillLevelDefine> SkillLevel = new List<SkillLevelDefine>(641); 
		/// <summary> 
		/// SkillSeriesInChapter
		/// </summary>
		public List<SkillSeriesInChapterDefine> SkillSeriesInChapter = new List<SkillSeriesInChapterDefine>(97); 
		/// <summary> 
		/// SkillSeriesInfo
		/// </summary>
		public List<SkillSeriesInfoDefine> SkillSeriesInfo = new List<SkillSeriesInfoDefine>(10); 
		/// <summary> 
		/// SpecialChallenge
		/// </summary>
		public List<SpecialChallengeDefine> SpecialChallenge = new List<SpecialChallengeDefine>(194); 
		/// <summary> 
		/// SpecialChapterInfo
		/// </summary>
		public List<SpecialChapterInfoDefine> SpecialChapterInfo = new List<SpecialChapterInfoDefine>(4); 
		/// <summary> 
		/// SpecialEquip
		/// </summary>
		public List<SpecialEquipDefine> SpecialEquip = new List<SpecialEquipDefine>(1); 
		/// <summary> 
		/// SpineChangeSkin
		/// </summary>
		public List<SpineChangeSkinDefine> SpineChangeSkin = new List<SpineChangeSkinDefine>(6); 
		/// <summary> 
		/// StageChapterChallengeInfo
		/// </summary>
		public List<StageChapterChallengeInfoDefine> StageChapterChallengeInfo = new List<StageChapterChallengeInfoDefine>(3540); 
		/// <summary> 
		/// StageDiamondInfo
		/// </summary>
		public List<StageDiamondInfoDefine> StageDiamondInfo = new List<StageDiamondInfoDefine>(400); 
		/// <summary> 
		/// StageGold2Info
		/// </summary>
		public List<StageGold2InfoDefine> StageGold2Info = new List<StageGold2InfoDefine>(1); 
		/// <summary> 
		/// StageGoldInfo
		/// </summary>
		public List<StageGoldInfoDefine> StageGoldInfo = new List<StageGoldInfoDefine>(200); 
		/// <summary> 
		/// StageHeroPartInfo
		/// </summary>
		public List<StageHeroPartInfoDefine> StageHeroPartInfo = new List<StageHeroPartInfoDefine>(1000); 
		/// <summary> 
		/// StageInfo
		/// </summary>
		public List<StageInfoDefine> StageInfo = new List<StageInfoDefine>(1759); 
		/// <summary> 
		/// StageRandomPool
		/// </summary>
		public List<StageRandomPoolDefine> StageRandomPool = new List<StageRandomPoolDefine>(165); 
		/// <summary> 
		/// SubscriptionShop
		/// </summary>
		public List<SubscriptionShopDefine> SubscriptionShop = new List<SubscriptionShopDefine>(2); 
		/// <summary> 
		/// SummonedInStage
		/// </summary>
		public List<SummonedInStageDefine> SummonedInStage = new List<SummonedInStageDefine>(1); 
		/// <summary> 
		/// Talent
		/// </summary>
		public List<TalentDefine> Talent = new List<TalentDefine>(288); 
		/// <summary> 
		/// TalentEvolution
		/// </summary>
		public List<TalentEvolutionDefine> TalentEvolution = new List<TalentEvolutionDefine>(42); 
		/// <summary> 
		/// TaskConfig
		/// </summary>
		public List<TaskConfigDefine> TaskConfig = new List<TaskConfigDefine>(41); 
		/// <summary> 
		/// TaskRewards
		/// </summary>
		public List<TaskRewardsDefine> TaskRewards = new List<TaskRewardsDefine>(25); 
		/// <summary> 
		/// Thief
		/// </summary>
		public List<ThiefDefine> Thief = new List<ThiefDefine>(97); 
		/// <summary> 
		/// UIBeginnerGuide
		/// </summary>
		public List<UIBeginnerGuideDefine> UIBeginnerGuide = new List<UIBeginnerGuideDefine>(22); 
		/// <summary> 
		/// UIStoreData
		/// </summary>
		public List<UIStoreDataDefine> UIStoreData = new List<UIStoreDataDefine>(9); 
		/// <summary> 
		/// UIStoreGoodsData
		/// </summary>
		public List<UIStoreGoodsDataDefine> UIStoreGoodsData = new List<UIStoreGoodsDataDefine>(67); 
		/// <summary> 
		/// UISupplyStoreAccumulative
		/// </summary>
		public List<UISupplyStoreAccumulativeDefine> UISupplyStoreAccumulative = new List<UISupplyStoreAccumulativeDefine>(8); 
		/// <summary> 
		/// UISupplyStoreData
		/// </summary>
		public List<UISupplyStoreDataDefine> UISupplyStoreData = new List<UISupplyStoreDataDefine>(3); 
		/// <summary> 
		/// UISupplyStoreGoodsData
		/// </summary>
		public List<UISupplyStoreGoodsDataDefine> UISupplyStoreGoodsData = new List<UISupplyStoreGoodsDataDefine>(17); 
		/// <summary> 
		/// UIUnlockTip
		/// </summary>
		public List<UIUnlockTipDefine> UIUnlockTip = new List<UIUnlockTipDefine>(16); 
		/// <summary> 
		/// WeeklyTaskConfig
		/// </summary>
		public List<WeeklyTaskConfigDefine> WeeklyTaskConfig = new List<WeeklyTaskConfigDefine>(6); 
		/// <summary> 
		/// WeeklyTaskRewards
		/// </summary>
		public List<WeeklyTaskRewardsDefine> WeeklyTaskRewards = new List<WeeklyTaskRewardsDefine>(5); 
		#region Index code
	 	Dictionary<int, AudioConfigDefine> _AudioConfigByID = new Dictionary<int, AudioConfigDefine>(432);
        public AudioConfigDefine GetAudioConfigByID(int ID, AudioConfigDefine def = default(AudioConfigDefine))
        {
            AudioConfigDefine ret;
            if ( _AudioConfigByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			if ( def == default(AudioConfigDefine) )
			{
				TableLogger.ErrorLine("GetAudioConfigByID failed, ID: {0}", ID);
			}
            return def;
        }
		Dictionary<int, AvatarDefine> _AvatarById = new Dictionary<int, AvatarDefine>(19);
        public AvatarDefine GetAvatarById(int Id, AvatarDefine def = default(AvatarDefine))
        {
            AvatarDefine ret;
            if ( _AvatarById.TryGetValue( Id, out ret ) )
            {
                return ret;
            }
			if ( def == default(AvatarDefine) )
			{
				TableLogger.ErrorLine("GetAvatarById failed, Id: {0}", Id);
			}
            return def;
        }
		Dictionary<int, BannerDefine> _BannerByBannerID = new Dictionary<int, BannerDefine>(44);
        public BannerDefine GetBannerByBannerID(int BannerID, BannerDefine def = default(BannerDefine))
        {
            BannerDefine ret;
            if ( _BannerByBannerID.TryGetValue( BannerID, out ret ) )
            {
                return ret;
            }
			if ( def == default(BannerDefine) )
			{
				TableLogger.ErrorLine("GetBannerByBannerID failed, BannerID: {0}", BannerID);
			}
            return def;
        }
		Dictionary<int, BoxSetDefine> _BoxSetBySetID = new Dictionary<int, BoxSetDefine>(1);
        public BoxSetDefine GetBoxSetBySetID(int SetID, BoxSetDefine def = default(BoxSetDefine))
        {
            BoxSetDefine ret;
            if ( _BoxSetBySetID.TryGetValue( SetID, out ret ) )
            {
                return ret;
            }
			if ( def == default(BoxSetDefine) )
			{
				TableLogger.ErrorLine("GetBoxSetBySetID failed, SetID: {0}", SetID);
			}
            return def;
        }
		Dictionary<int, ChapterInfoDefine> _ChapterInfoByChapter = new Dictionary<int, ChapterInfoDefine>(97);
        public ChapterInfoDefine GetChapterInfoByChapter(int Chapter, ChapterInfoDefine def = default(ChapterInfoDefine))
        {
            ChapterInfoDefine ret;
            if ( _ChapterInfoByChapter.TryGetValue( Chapter, out ret ) )
            {
                return ret;
            }
			if ( def == default(ChapterInfoDefine) )
			{
				TableLogger.ErrorLine("GetChapterInfoByChapter failed, Chapter: {0}", Chapter);
			}
            return def;
        }
		Dictionary<int, ClearRewardDefine> _ClearRewardByIndex = new Dictionary<int, ClearRewardDefine>(386);
        public ClearRewardDefine GetClearRewardByIndex(int Index, ClearRewardDefine def = default(ClearRewardDefine))
        {
            ClearRewardDefine ret;
            if ( _ClearRewardByIndex.TryGetValue( Index, out ret ) )
            {
                return ret;
            }
			if ( def == default(ClearRewardDefine) )
			{
				TableLogger.ErrorLine("GetClearRewardByIndex failed, Index: {0}", Index);
			}
            return def;
        }
		Dictionary<int, CycleShopDefine> _CycleShopByShopIndex = new Dictionary<int, CycleShopDefine>(17);
        public CycleShopDefine GetCycleShopByShopIndex(int ShopIndex, CycleShopDefine def = default(CycleShopDefine))
        {
            CycleShopDefine ret;
            if ( _CycleShopByShopIndex.TryGetValue( ShopIndex, out ret ) )
            {
                return ret;
            }
			if ( def == default(CycleShopDefine) )
			{
				TableLogger.ErrorLine("GetCycleShopByShopIndex failed, ShopIndex: {0}", ShopIndex);
			}
            return def;
        }
		Dictionary<int, DialogueDefine> _DialogueByIndex = new Dictionary<int, DialogueDefine>(100);
        public DialogueDefine GetDialogueByIndex(int Index, DialogueDefine def = default(DialogueDefine))
        {
            DialogueDefine ret;
            if ( _DialogueByIndex.TryGetValue( Index, out ret ) )
            {
                return ret;
            }
			if ( def == default(DialogueDefine) )
			{
				TableLogger.ErrorLine("GetDialogueByIndex failed, Index: {0}", Index);
			}
            return def;
        }
		Dictionary<int, EnemyDefine> _EnemyByEnemyID = new Dictionary<int, EnemyDefine>(119);
        public EnemyDefine GetEnemyByEnemyID(int EnemyID, EnemyDefine def = default(EnemyDefine))
        {
            EnemyDefine ret;
            if ( _EnemyByEnemyID.TryGetValue( EnemyID, out ret ) )
            {
                return ret;
            }
			if ( def == default(EnemyDefine) )
			{
				TableLogger.ErrorLine("GetEnemyByEnemyID failed, EnemyID: {0}", EnemyID);
			}
            return def;
        }
		Dictionary<int, EquipOptionalDefine> _EquipOptionalByItemId = new Dictionary<int, EquipOptionalDefine>(2);
        public EquipOptionalDefine GetEquipOptionalByItemId(int ItemId, EquipOptionalDefine def = default(EquipOptionalDefine))
        {
            EquipOptionalDefine ret;
            if ( _EquipOptionalByItemId.TryGetValue( ItemId, out ret ) )
            {
                return ret;
            }
			if ( def == default(EquipOptionalDefine) )
			{
				TableLogger.ErrorLine("GetEquipOptionalByItemId failed, ItemId: {0}", ItemId);
			}
            return def;
        }
		Dictionary<NewEquipQualityType, EquipQualityDefine> _EquipQualityByQuality = new Dictionary<NewEquipQualityType, EquipQualityDefine>(14);
        public EquipQualityDefine GetEquipQualityByQuality(NewEquipQualityType Quality, EquipQualityDefine def = default(EquipQualityDefine))
        {
            EquipQualityDefine ret;
            if ( _EquipQualityByQuality.TryGetValue( Quality, out ret ) )
            {
                return ret;
            }
			if ( def == default(EquipQualityDefine) )
			{
				TableLogger.ErrorLine("GetEquipQualityByQuality failed, Quality: {0}", Quality);
			}
            return def;
        }
		Dictionary<AttributeType, EquipQualityGrowInfoDefine> _EquipQualityGrowInfoByBaseAttributeType = new Dictionary<AttributeType, EquipQualityGrowInfoDefine>(25);
        public EquipQualityGrowInfoDefine GetEquipQualityGrowInfoByBaseAttributeType(AttributeType BaseAttributeType, EquipQualityGrowInfoDefine def = default(EquipQualityGrowInfoDefine))
        {
            EquipQualityGrowInfoDefine ret;
            if ( _EquipQualityGrowInfoByBaseAttributeType.TryGetValue( BaseAttributeType, out ret ) )
            {
                return ret;
            }
			if ( def == default(EquipQualityGrowInfoDefine) )
			{
				TableLogger.ErrorLine("GetEquipQualityGrowInfoByBaseAttributeType failed, BaseAttributeType: {0}", BaseAttributeType);
			}
            return def;
        }
		Dictionary<int, EquipSetInfoDefine> _EquipSetInfoBySetID = new Dictionary<int, EquipSetInfoDefine>(10);
        public EquipSetInfoDefine GetEquipSetInfoBySetID(int SetID, EquipSetInfoDefine def = default(EquipSetInfoDefine))
        {
            EquipSetInfoDefine ret;
            if ( _EquipSetInfoBySetID.TryGetValue( SetID, out ret ) )
            {
                return ret;
            }
			if ( def == default(EquipSetInfoDefine) )
			{
				TableLogger.ErrorLine("GetEquipSetInfoBySetID failed, SetID: {0}", SetID);
			}
            return def;
        }
		Dictionary<int, EquipShopDefine> _EquipShopByIndex = new Dictionary<int, EquipShopDefine>(4);
        public EquipShopDefine GetEquipShopByIndex(int Index, EquipShopDefine def = default(EquipShopDefine))
        {
            EquipShopDefine ret;
            if ( _EquipShopByIndex.TryGetValue( Index, out ret ) )
            {
                return ret;
            }
			if ( def == default(EquipShopDefine) )
			{
				TableLogger.ErrorLine("GetEquipShopByIndex failed, Index: {0}", Index);
			}
            return def;
        }
		Dictionary<int, EquipShopFloorDefine> _EquipShopFloorByFloorID = new Dictionary<int, EquipShopFloorDefine>(3);
        public EquipShopFloorDefine GetEquipShopFloorByFloorID(int FloorID, EquipShopFloorDefine def = default(EquipShopFloorDefine))
        {
            EquipShopFloorDefine ret;
            if ( _EquipShopFloorByFloorID.TryGetValue( FloorID, out ret ) )
            {
                return ret;
            }
			if ( def == default(EquipShopFloorDefine) )
			{
				TableLogger.ErrorLine("GetEquipShopFloorByFloorID failed, FloorID: {0}", FloorID);
			}
            return def;
        }
		Dictionary<int, EquipTypeDefine> _EquipTypeByType = new Dictionary<int, EquipTypeDefine>(40);
        public EquipTypeDefine GetEquipTypeByType(int Type, EquipTypeDefine def = default(EquipTypeDefine))
        {
            EquipTypeDefine ret;
            if ( _EquipTypeByType.TryGetValue( Type, out ret ) )
            {
                return ret;
            }
			if ( def == default(EquipTypeDefine) )
			{
				TableLogger.ErrorLine("GetEquipTypeByType failed, Type: {0}", Type);
			}
            return def;
        }
		Dictionary<GeneralType, GeneralDefine> _GeneralByGeneral_Type = new Dictionary<GeneralType, GeneralDefine>(28);
        public GeneralDefine GetGeneralByGeneral_Type(GeneralType General_Type, GeneralDefine def = default(GeneralDefine))
        {
            GeneralDefine ret;
            if ( _GeneralByGeneral_Type.TryGetValue( General_Type, out ret ) )
            {
                return ret;
            }
			if ( def == default(GeneralDefine) )
			{
				TableLogger.ErrorLine("GetGeneralByGeneral_Type failed, General_Type: {0}", General_Type);
			}
            return def;
        }
		Dictionary<int, HeroCharactersDefine> _HeroCharactersByID = new Dictionary<int, HeroCharactersDefine>(4);
        public HeroCharactersDefine GetHeroCharactersByID(int ID, HeroCharactersDefine def = default(HeroCharactersDefine))
        {
            HeroCharactersDefine ret;
            if ( _HeroCharactersByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			if ( def == default(HeroCharactersDefine) )
			{
				TableLogger.ErrorLine("GetHeroCharactersByID failed, ID: {0}", ID);
			}
            return def;
        }
		Dictionary<int, HeroLevelInStageDefine> _HeroLevelInStageByLevel = new Dictionary<int, HeroLevelInStageDefine>(11);
        public HeroLevelInStageDefine GetHeroLevelInStageByLevel(int Level, HeroLevelInStageDefine def = default(HeroLevelInStageDefine))
        {
            HeroLevelInStageDefine ret;
            if ( _HeroLevelInStageByLevel.TryGetValue( Level, out ret ) )
            {
                return ret;
            }
			if ( def == default(HeroLevelInStageDefine) )
			{
				TableLogger.ErrorLine("GetHeroLevelInStageByLevel failed, Level: {0}", Level);
			}
            return def;
        }
		Dictionary<int, HighGrowthFundDefine> _HighGrowthFundByID = new Dictionary<int, HighGrowthFundDefine>(24);
        public HighGrowthFundDefine GetHighGrowthFundByID(int ID, HighGrowthFundDefine def = default(HighGrowthFundDefine))
        {
            HighGrowthFundDefine ret;
            if ( _HighGrowthFundByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			if ( def == default(HighGrowthFundDefine) )
			{
				TableLogger.ErrorLine("GetHighGrowthFundByID failed, ID: {0}", ID);
			}
            return def;
        }
		Dictionary<int, ItemDefine> _ItemById = new Dictionary<int, ItemDefine>(103);
        public ItemDefine GetItemById(int Id, ItemDefine def = default(ItemDefine))
        {
            ItemDefine ret;
            if ( _ItemById.TryGetValue( Id, out ret ) )
            {
                return ret;
            }
			if ( def == default(ItemDefine) )
			{
				TableLogger.ErrorLine("GetItemById failed, Id: {0}", Id);
			}
            return def;
        }
		Dictionary<int, ItemSetInfoDefine> _ItemSetInfoBySetID = new Dictionary<int, ItemSetInfoDefine>(1);
        public ItemSetInfoDefine GetItemSetInfoBySetID(int SetID, ItemSetInfoDefine def = default(ItemSetInfoDefine))
        {
            ItemSetInfoDefine ret;
            if ( _ItemSetInfoBySetID.TryGetValue( SetID, out ret ) )
            {
                return ret;
            }
			if ( def == default(ItemSetInfoDefine) )
			{
				TableLogger.ErrorLine("GetItemSetInfoBySetID failed, SetID: {0}", SetID);
			}
            return def;
        }
		Dictionary<int, LootOnlyInCombatDefine> _LootOnlyInCombatById = new Dictionary<int, LootOnlyInCombatDefine>(8);
        public LootOnlyInCombatDefine GetLootOnlyInCombatById(int Id, LootOnlyInCombatDefine def = default(LootOnlyInCombatDefine))
        {
            LootOnlyInCombatDefine ret;
            if ( _LootOnlyInCombatById.TryGetValue( Id, out ret ) )
            {
                return ret;
            }
			if ( def == default(LootOnlyInCombatDefine) )
			{
				TableLogger.ErrorLine("GetLootOnlyInCombatById failed, Id: {0}", Id);
			}
            return def;
        }
		Dictionary<int, MapObjectDefine> _MapObjectByID = new Dictionary<int, MapObjectDefine>(5);
        public MapObjectDefine GetMapObjectByID(int ID, MapObjectDefine def = default(MapObjectDefine))
        {
            MapObjectDefine ret;
            if ( _MapObjectByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			if ( def == default(MapObjectDefine) )
			{
				TableLogger.ErrorLine("GetMapObjectByID failed, ID: {0}", ID);
			}
            return def;
        }
		Dictionary<int, MapRandomPoolDefine> _MapRandomPoolByindex = new Dictionary<int, MapRandomPoolDefine>(191);
        public MapRandomPoolDefine GetMapRandomPoolByindex(int index, MapRandomPoolDefine def = default(MapRandomPoolDefine))
        {
            MapRandomPoolDefine ret;
            if ( _MapRandomPoolByindex.TryGetValue( index, out ret ) )
            {
                return ret;
            }
			if ( def == default(MapRandomPoolDefine) )
			{
				TableLogger.ErrorLine("GetMapRandomPoolByindex failed, index: {0}", index);
			}
            return def;
        }
		Dictionary<UIModuleType, ModuleConfigDefine> _ModuleConfigByModuleType = new Dictionary<UIModuleType, ModuleConfigDefine>();
        public ModuleConfigDefine GetModuleConfigByModuleType(UIModuleType ModuleType, ModuleConfigDefine def = default(ModuleConfigDefine))
        {
            ModuleConfigDefine ret;
            if ( _ModuleConfigByModuleType.TryGetValue( ModuleType, out ret ) )
            {
                return ret;
            }
			if ( def == default(ModuleConfigDefine) )
			{
				TableLogger.ErrorLine("GetModuleConfigByModuleType failed, ModuleType: {0}", ModuleType);
			}
            return def;
        }
		Dictionary<int, NormalGrowthFundDefine> _NormalGrowthFundByID = new Dictionary<int, NormalGrowthFundDefine>(24);
        public NormalGrowthFundDefine GetNormalGrowthFundByID(int ID, NormalGrowthFundDefine def = default(NormalGrowthFundDefine))
        {
            NormalGrowthFundDefine ret;
            if ( _NormalGrowthFundByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			if ( def == default(NormalGrowthFundDefine) )
			{
				TableLogger.ErrorLine("GetNormalGrowthFundByID failed, ID: {0}", ID);
			}
            return def;
        }
		Dictionary<NPCType, NPCDefine> _NPCByID = new Dictionary<NPCType, NPCDefine>(7);
        public NPCDefine GetNPCByID(NPCType ID, NPCDefine def = default(NPCDefine))
        {
            NPCDefine ret;
            if ( _NPCByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			if ( def == default(NPCDefine) )
			{
				TableLogger.ErrorLine("GetNPCByID failed, ID: {0}", ID);
			}
            return def;
        }
		Dictionary<int, OfflineDefine> _OfflineByChapter = new Dictionary<int, OfflineDefine>(98);
        public OfflineDefine GetOfflineByChapter(int Chapter, OfflineDefine def = default(OfflineDefine))
        {
            OfflineDefine ret;
            if ( _OfflineByChapter.TryGetValue( Chapter, out ret ) )
            {
                return ret;
            }
			if ( def == default(OfflineDefine) )
			{
				TableLogger.ErrorLine("GetOfflineByChapter failed, Chapter: {0}", Chapter);
			}
            return def;
        }
		Dictionary<int, PiggyBankDefine> _PiggyBankByCycle = new Dictionary<int, PiggyBankDefine>(4);
        public PiggyBankDefine GetPiggyBankByCycle(int Cycle, PiggyBankDefine def = default(PiggyBankDefine))
        {
            PiggyBankDefine ret;
            if ( _PiggyBankByCycle.TryGetValue( Cycle, out ret ) )
            {
                return ret;
            }
			if ( def == default(PiggyBankDefine) )
			{
				TableLogger.ErrorLine("GetPiggyBankByCycle failed, Cycle: {0}", Cycle);
			}
            return def;
        }
		Dictionary<int, PiggyBankDefine> _PiggyBankByShopID = new Dictionary<int, PiggyBankDefine>(4);
        public PiggyBankDefine GetPiggyBankByShopID(int ShopID, PiggyBankDefine def = default(PiggyBankDefine))
        {
            PiggyBankDefine ret;
            if ( _PiggyBankByShopID.TryGetValue( ShopID, out ret ) )
            {
                return ret;
            }
			if ( def == default(PiggyBankDefine) )
			{
				TableLogger.ErrorLine("GetPiggyBankByShopID failed, ShopID: {0}", ShopID);
			}
            return def;
        }
		Dictionary<int, RankDefine> _RankByRankRewardID = new Dictionary<int, RankDefine>(54);
        public RankDefine GetRankByRankRewardID(int RankRewardID, RankDefine def = default(RankDefine))
        {
            RankDefine ret;
            if ( _RankByRankRewardID.TryGetValue( RankRewardID, out ret ) )
            {
                return ret;
            }
			if ( def == default(RankDefine) )
			{
				TableLogger.ErrorLine("GetRankByRankRewardID failed, RankRewardID: {0}", RankRewardID);
			}
            return def;
        }
		Dictionary<int, RedDotDefine> _RedDotBymoduleID = new Dictionary<int, RedDotDefine>(31);
        public RedDotDefine GetRedDotBymoduleID(int moduleID, RedDotDefine def = default(RedDotDefine))
        {
            RedDotDefine ret;
            if ( _RedDotBymoduleID.TryGetValue( moduleID, out ret ) )
            {
                return ret;
            }
			if ( def == default(RedDotDefine) )
			{
				TableLogger.ErrorLine("GetRedDotBymoduleID failed, moduleID: {0}", moduleID);
			}
            return def;
        }
		Dictionary<int, RetailSkillsDefine> _RetailSkillsBySkillID = new Dictionary<int, RetailSkillsDefine>(4);
        public RetailSkillsDefine GetRetailSkillsBySkillID(int SkillID, RetailSkillsDefine def = default(RetailSkillsDefine))
        {
            RetailSkillsDefine ret;
            if ( _RetailSkillsBySkillID.TryGetValue( SkillID, out ret ) )
            {
                return ret;
            }
			if ( def == default(RetailSkillsDefine) )
			{
				TableLogger.ErrorLine("GetRetailSkillsBySkillID failed, SkillID: {0}", SkillID);
			}
            return def;
        }
		Dictionary<int, SevenDayEventExpBarDefine> _SevenDayEventExpBarById = new Dictionary<int, SevenDayEventExpBarDefine>(8);
        public SevenDayEventExpBarDefine GetSevenDayEventExpBarById(int Id, SevenDayEventExpBarDefine def = default(SevenDayEventExpBarDefine))
        {
            SevenDayEventExpBarDefine ret;
            if ( _SevenDayEventExpBarById.TryGetValue( Id, out ret ) )
            {
                return ret;
            }
			if ( def == default(SevenDayEventExpBarDefine) )
			{
				TableLogger.ErrorLine("GetSevenDayEventExpBarById failed, Id: {0}", Id);
			}
            return def;
        }
		Dictionary<int, SevenDayEventTaskDefine> _SevenDayEventTaskById = new Dictionary<int, SevenDayEventTaskDefine>(75);
        public SevenDayEventTaskDefine GetSevenDayEventTaskById(int Id, SevenDayEventTaskDefine def = default(SevenDayEventTaskDefine))
        {
            SevenDayEventTaskDefine ret;
            if ( _SevenDayEventTaskById.TryGetValue( Id, out ret ) )
            {
                return ret;
            }
			if ( def == default(SevenDayEventTaskDefine) )
			{
				TableLogger.ErrorLine("GetSevenDayEventTaskById failed, Id: {0}", Id);
			}
            return def;
        }
		Dictionary<uint, SevenDaySignInDefine> _SevenDaySignInByDay = new Dictionary<uint, SevenDaySignInDefine>(7);
        public SevenDaySignInDefine GetSevenDaySignInByDay(uint Day, SevenDaySignInDefine def = default(SevenDaySignInDefine))
        {
            SevenDaySignInDefine ret;
            if ( _SevenDaySignInByDay.TryGetValue( Day, out ret ) )
            {
                return ret;
            }
			if ( def == default(SevenDaySignInDefine) )
			{
				TableLogger.ErrorLine("GetSevenDaySignInByDay failed, Day: {0}", Day);
			}
            return def;
        }
		Dictionary<int, ShopDefine> _ShopByShopIndex = new Dictionary<int, ShopDefine>(108);
        public ShopDefine GetShopByShopIndex(int ShopIndex, ShopDefine def = default(ShopDefine))
        {
            ShopDefine ret;
            if ( _ShopByShopIndex.TryGetValue( ShopIndex, out ret ) )
            {
                return ret;
            }
			if ( def == default(ShopDefine) )
			{
				TableLogger.ErrorLine("GetShopByShopIndex failed, ShopIndex: {0}", ShopIndex);
			}
            return def;
        }
		Dictionary<uint, SignInConfigDefine> _SignInConfigByDay = new Dictionary<uint, SignInConfigDefine>(28);
        public SignInConfigDefine GetSignInConfigByDay(uint Day, SignInConfigDefine def = default(SignInConfigDefine))
        {
            SignInConfigDefine ret;
            if ( _SignInConfigByDay.TryGetValue( Day, out ret ) )
            {
                return ret;
            }
			if ( def == default(SignInConfigDefine) )
			{
				TableLogger.ErrorLine("GetSignInConfigByDay failed, Day: {0}", Day);
			}
            return def;
        }
		Dictionary<int, SkillDefine> _SkillBySkillID = new Dictionary<int, SkillDefine>(599);
        public SkillDefine GetSkillBySkillID(int SkillID, SkillDefine def = default(SkillDefine))
        {
            SkillDefine ret;
            if ( _SkillBySkillID.TryGetValue( SkillID, out ret ) )
            {
                return ret;
            }
			if ( def == default(SkillDefine) )
			{
				TableLogger.ErrorLine("GetSkillBySkillID failed, SkillID: {0}", SkillID);
			}
            return def;
        }
		Dictionary<int, SkillSeriesInChapterDefine> _SkillSeriesInChapterByChapter = new Dictionary<int, SkillSeriesInChapterDefine>(97);
        public SkillSeriesInChapterDefine GetSkillSeriesInChapterByChapter(int Chapter, SkillSeriesInChapterDefine def = default(SkillSeriesInChapterDefine))
        {
            SkillSeriesInChapterDefine ret;
            if ( _SkillSeriesInChapterByChapter.TryGetValue( Chapter, out ret ) )
            {
                return ret;
            }
			if ( def == default(SkillSeriesInChapterDefine) )
			{
				TableLogger.ErrorLine("GetSkillSeriesInChapterByChapter failed, Chapter: {0}", Chapter);
			}
            return def;
        }
		Dictionary<SkillSeries, SkillSeriesInfoDefine> _SkillSeriesInfoBySkillSeries = new Dictionary<SkillSeries, SkillSeriesInfoDefine>(10);
        public SkillSeriesInfoDefine GetSkillSeriesInfoBySkillSeries(SkillSeries SkillSeries, SkillSeriesInfoDefine def = default(SkillSeriesInfoDefine))
        {
            SkillSeriesInfoDefine ret;
            if ( _SkillSeriesInfoBySkillSeries.TryGetValue( SkillSeries, out ret ) )
            {
                return ret;
            }
			if ( def == default(SkillSeriesInfoDefine) )
			{
				TableLogger.ErrorLine("GetSkillSeriesInfoBySkillSeries failed, SkillSeries: {0}", SkillSeries);
			}
            return def;
        }
		Dictionary<SpecialChapterType, SpecialChapterInfoDefine> _SpecialChapterInfoByChapterName = new Dictionary<SpecialChapterType, SpecialChapterInfoDefine>(4);
        public SpecialChapterInfoDefine GetSpecialChapterInfoByChapterName(SpecialChapterType ChapterName, SpecialChapterInfoDefine def = default(SpecialChapterInfoDefine))
        {
            SpecialChapterInfoDefine ret;
            if ( _SpecialChapterInfoByChapterName.TryGetValue( ChapterName, out ret ) )
            {
                return ret;
            }
			if ( def == default(SpecialChapterInfoDefine) )
			{
				TableLogger.ErrorLine("GetSpecialChapterInfoByChapterName failed, ChapterName: {0}", ChapterName);
			}
            return def;
        }
		Dictionary<SpecialEquipSerialType, SpecialEquipDefine> _SpecialEquipBySerialType = new Dictionary<SpecialEquipSerialType, SpecialEquipDefine>(1);
        public SpecialEquipDefine GetSpecialEquipBySerialType(SpecialEquipSerialType SerialType, SpecialEquipDefine def = default(SpecialEquipDefine))
        {
            SpecialEquipDefine ret;
            if ( _SpecialEquipBySerialType.TryGetValue( SerialType, out ret ) )
            {
                return ret;
            }
			if ( def == default(SpecialEquipDefine) )
			{
				TableLogger.ErrorLine("GetSpecialEquipBySerialType failed, SerialType: {0}", SerialType);
			}
            return def;
        }
		Dictionary<int, SpineChangeSkinDefine> _SpineChangeSkinByID = new Dictionary<int, SpineChangeSkinDefine>(6);
        public SpineChangeSkinDefine GetSpineChangeSkinByID(int ID, SpineChangeSkinDefine def = default(SpineChangeSkinDefine))
        {
            SpineChangeSkinDefine ret;
            if ( _SpineChangeSkinByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			if ( def == default(SpineChangeSkinDefine) )
			{
				TableLogger.ErrorLine("GetSpineChangeSkinByID failed, ID: {0}", ID);
			}
            return def;
        }
		Dictionary<int, StageDiamondInfoDefine> _StageDiamondInfoByStage = new Dictionary<int, StageDiamondInfoDefine>(400);
        public StageDiamondInfoDefine GetStageDiamondInfoByStage(int Stage, StageDiamondInfoDefine def = default(StageDiamondInfoDefine))
        {
            StageDiamondInfoDefine ret;
            if ( _StageDiamondInfoByStage.TryGetValue( Stage, out ret ) )
            {
                return ret;
            }
			if ( def == default(StageDiamondInfoDefine) )
			{
				TableLogger.ErrorLine("GetStageDiamondInfoByStage failed, Stage: {0}", Stage);
			}
            return def;
        }
		Dictionary<int, StageGold2InfoDefine> _StageGold2InfoByStage = new Dictionary<int, StageGold2InfoDefine>(1);
        public StageGold2InfoDefine GetStageGold2InfoByStage(int Stage, StageGold2InfoDefine def = default(StageGold2InfoDefine))
        {
            StageGold2InfoDefine ret;
            if ( _StageGold2InfoByStage.TryGetValue( Stage, out ret ) )
            {
                return ret;
            }
			if ( def == default(StageGold2InfoDefine) )
			{
				TableLogger.ErrorLine("GetStageGold2InfoByStage failed, Stage: {0}", Stage);
			}
            return def;
        }
		Dictionary<int, StageGoldInfoDefine> _StageGoldInfoByStage = new Dictionary<int, StageGoldInfoDefine>(200);
        public StageGoldInfoDefine GetStageGoldInfoByStage(int Stage, StageGoldInfoDefine def = default(StageGoldInfoDefine))
        {
            StageGoldInfoDefine ret;
            if ( _StageGoldInfoByStage.TryGetValue( Stage, out ret ) )
            {
                return ret;
            }
			if ( def == default(StageGoldInfoDefine) )
			{
				TableLogger.ErrorLine("GetStageGoldInfoByStage failed, Stage: {0}", Stage);
			}
            return def;
        }
		Dictionary<int, SubscriptionShopDefine> _SubscriptionShopByIndex = new Dictionary<int, SubscriptionShopDefine>(2);
        public SubscriptionShopDefine GetSubscriptionShopByIndex(int Index, SubscriptionShopDefine def = default(SubscriptionShopDefine))
        {
            SubscriptionShopDefine ret;
            if ( _SubscriptionShopByIndex.TryGetValue( Index, out ret ) )
            {
                return ret;
            }
			if ( def == default(SubscriptionShopDefine) )
			{
				TableLogger.ErrorLine("GetSubscriptionShopByIndex failed, Index: {0}", Index);
			}
            return def;
        }
		Dictionary<int, SummonedInStageDefine> _SummonedInStageByID = new Dictionary<int, SummonedInStageDefine>(1);
        public SummonedInStageDefine GetSummonedInStageByID(int ID, SummonedInStageDefine def = default(SummonedInStageDefine))
        {
            SummonedInStageDefine ret;
            if ( _SummonedInStageByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			if ( def == default(SummonedInStageDefine) )
			{
				TableLogger.ErrorLine("GetSummonedInStageByID failed, ID: {0}", ID);
			}
            return def;
        }
		Dictionary<int, TalentDefine> _TalentByTalentID = new Dictionary<int, TalentDefine>(288);
        public TalentDefine GetTalentByTalentID(int TalentID, TalentDefine def = default(TalentDefine))
        {
            TalentDefine ret;
            if ( _TalentByTalentID.TryGetValue( TalentID, out ret ) )
            {
                return ret;
            }
			if ( def == default(TalentDefine) )
			{
				TableLogger.ErrorLine("GetTalentByTalentID failed, TalentID: {0}", TalentID);
			}
            return def;
        }
		Dictionary<int, TalentEvolutionDefine> _TalentEvolutionByEvolutionID = new Dictionary<int, TalentEvolutionDefine>(42);
        public TalentEvolutionDefine GetTalentEvolutionByEvolutionID(int EvolutionID, TalentEvolutionDefine def = default(TalentEvolutionDefine))
        {
            TalentEvolutionDefine ret;
            if ( _TalentEvolutionByEvolutionID.TryGetValue( EvolutionID, out ret ) )
            {
                return ret;
            }
			if ( def == default(TalentEvolutionDefine) )
			{
				TableLogger.ErrorLine("GetTalentEvolutionByEvolutionID failed, EvolutionID: {0}", EvolutionID);
			}
            return def;
        }
		Dictionary<int, ThiefDefine> _ThiefByChapterID = new Dictionary<int, ThiefDefine>(97);
        public ThiefDefine GetThiefByChapterID(int ChapterID, ThiefDefine def = default(ThiefDefine))
        {
            ThiefDefine ret;
            if ( _ThiefByChapterID.TryGetValue( ChapterID, out ret ) )
            {
                return ret;
            }
			if ( def == default(ThiefDefine) )
			{
				TableLogger.ErrorLine("GetThiefByChapterID failed, ChapterID: {0}", ChapterID);
			}
            return def;
        }
		Dictionary<int, UIBeginnerGuideDefine> _UIBeginnerGuideByID = new Dictionary<int, UIBeginnerGuideDefine>(22);
        public UIBeginnerGuideDefine GetUIBeginnerGuideByID(int ID, UIBeginnerGuideDefine def = default(UIBeginnerGuideDefine))
        {
            UIBeginnerGuideDefine ret;
            if ( _UIBeginnerGuideByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			if ( def == default(UIBeginnerGuideDefine) )
			{
				TableLogger.ErrorLine("GetUIBeginnerGuideByID failed, ID: {0}", ID);
			}
            return def;
        }
		Dictionary<int, UIStoreDataDefine> _UIStoreDataByIndex = new Dictionary<int, UIStoreDataDefine>(9);
        public UIStoreDataDefine GetUIStoreDataByIndex(int Index, UIStoreDataDefine def = default(UIStoreDataDefine))
        {
            UIStoreDataDefine ret;
            if ( _UIStoreDataByIndex.TryGetValue( Index, out ret ) )
            {
                return ret;
            }
			if ( def == default(UIStoreDataDefine) )
			{
				TableLogger.ErrorLine("GetUIStoreDataByIndex failed, Index: {0}", Index);
			}
            return def;
        }
		Dictionary<string, UIStoreDataDefine> _UIStoreDataBySubStoreName = new Dictionary<string, UIStoreDataDefine>(9);
        public UIStoreDataDefine GetUIStoreDataBySubStoreName(string SubStoreName, UIStoreDataDefine def = default(UIStoreDataDefine))
        {
            UIStoreDataDefine ret;
            if ( _UIStoreDataBySubStoreName.TryGetValue( SubStoreName, out ret ) )
            {
                return ret;
            }
			if ( def == default(UIStoreDataDefine) )
			{
				TableLogger.ErrorLine("GetUIStoreDataBySubStoreName failed, SubStoreName: {0}", SubStoreName);
			}
            return def;
        }
		Dictionary<int, UIStoreGoodsDataDefine> _UIStoreGoodsDataByID = new Dictionary<int, UIStoreGoodsDataDefine>(67);
        public UIStoreGoodsDataDefine GetUIStoreGoodsDataByID(int ID, UIStoreGoodsDataDefine def = default(UIStoreGoodsDataDefine))
        {
            UIStoreGoodsDataDefine ret;
            if ( _UIStoreGoodsDataByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			if ( def == default(UIStoreGoodsDataDefine) )
			{
				TableLogger.ErrorLine("GetUIStoreGoodsDataByID failed, ID: {0}", ID);
			}
            return def;
        }
		Dictionary<int, UISupplyStoreAccumulativeDefine> _UISupplyStoreAccumulativeByID = new Dictionary<int, UISupplyStoreAccumulativeDefine>(8);
        public UISupplyStoreAccumulativeDefine GetUISupplyStoreAccumulativeByID(int ID, UISupplyStoreAccumulativeDefine def = default(UISupplyStoreAccumulativeDefine))
        {
            UISupplyStoreAccumulativeDefine ret;
            if ( _UISupplyStoreAccumulativeByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			if ( def == default(UISupplyStoreAccumulativeDefine) )
			{
				TableLogger.ErrorLine("GetUISupplyStoreAccumulativeByID failed, ID: {0}", ID);
			}
            return def;
        }
		Dictionary<string, UISupplyStoreDataDefine> _UISupplyStoreDataBySubStoreName = new Dictionary<string, UISupplyStoreDataDefine>(3);
        public UISupplyStoreDataDefine GetUISupplyStoreDataBySubStoreName(string SubStoreName, UISupplyStoreDataDefine def = default(UISupplyStoreDataDefine))
        {
            UISupplyStoreDataDefine ret;
            if ( _UISupplyStoreDataBySubStoreName.TryGetValue( SubStoreName, out ret ) )
            {
                return ret;
            }
			if ( def == default(UISupplyStoreDataDefine) )
			{
				TableLogger.ErrorLine("GetUISupplyStoreDataBySubStoreName failed, SubStoreName: {0}", SubStoreName);
			}
            return def;
        }
		Dictionary<int, UISupplyStoreGoodsDataDefine> _UISupplyStoreGoodsDataByID = new Dictionary<int, UISupplyStoreGoodsDataDefine>(17);
        public UISupplyStoreGoodsDataDefine GetUISupplyStoreGoodsDataByID(int ID, UISupplyStoreGoodsDataDefine def = default(UISupplyStoreGoodsDataDefine))
        {
            UISupplyStoreGoodsDataDefine ret;
            if ( _UISupplyStoreGoodsDataByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			if ( def == default(UISupplyStoreGoodsDataDefine) )
			{
				TableLogger.ErrorLine("GetUISupplyStoreGoodsDataByID failed, ID: {0}", ID);
			}
            return def;
        }
		Dictionary<int, UIUnlockTipDefine> _UIUnlockTipByID = new Dictionary<int, UIUnlockTipDefine>(16);
        public UIUnlockTipDefine GetUIUnlockTipByID(int ID, UIUnlockTipDefine def = default(UIUnlockTipDefine))
        {
            UIUnlockTipDefine ret;
            if ( _UIUnlockTipByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			if ( def == default(UIUnlockTipDefine) )
			{
				TableLogger.ErrorLine("GetUIUnlockTipByID failed, ID: {0}", ID);
			}
            return def;
        }
		public string GetBuildID(){
			return "839019efc6fa445b9747687ab347ff51";
		}
		#endregion
		#region Deserialize code
		static tabtoy.DeserializeHandler<TableConfig> _TableConfigDeserializeHandler;
		static tabtoy.DeserializeHandler<TableConfig> TableConfigDeserializeHandler
		{
			get
			{
				if (_TableConfigDeserializeHandler == null )
				{
					_TableConfigDeserializeHandler = new tabtoy.DeserializeHandler<TableConfig>(Deserialize);
				}
				return _TableConfigDeserializeHandler;
			}
		}
		public static void Deserialize( TableConfig ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0xa0000:
                	{
						ins.Achievements.Add( reader.ReadStruct<AchievementsDefine>(AchievementsDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0001:
                	{
						ins.AudioConfig.Add( reader.ReadStruct<AudioConfigDefine>(AudioConfigDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0002:
                	{
						ins.Avatar.Add( reader.ReadStruct<AvatarDefine>(AvatarDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0003:
                	{
						ins.Banner.Add( reader.ReadStruct<BannerDefine>(BannerDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0004:
                	{
						ins.Boss.Add( reader.ReadStruct<BossDefine>(BossDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0005:
                	{
						ins.BoxSet.Add( reader.ReadStruct<BoxSetDefine>(BoxSetDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0006:
                	{
						ins.ChapterInfo.Add( reader.ReadStruct<ChapterInfoDefine>(ChapterInfoDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0007:
                	{
						ins.ClearReward.Add( reader.ReadStruct<ClearRewardDefine>(ClearRewardDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0008:
                	{
						ins.CycleShop.Add( reader.ReadStruct<CycleShopDefine>(CycleShopDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0009:
                	{
						ins.Dialogue.Add( reader.ReadStruct<DialogueDefine>(DialogueDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa000a:
                	{
						ins.ElementalDamageFormula.Add( reader.ReadStruct<ElementalDamageFormulaDefine>(ElementalDamageFormulaDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa000b:
                	{
						ins.Enemy.Add( reader.ReadStruct<EnemyDefine>(EnemyDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa000c:
                	{
						ins.EquipLocationLevel.Add( reader.ReadStruct<EquipLocationLevelDefine>(EquipLocationLevelDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa000d:
                	{
						ins.EquipMaterialMap.Add( reader.ReadStruct<EquipMaterialMapDefine>(EquipMaterialMapDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa000e:
                	{
						ins.EquipOptional.Add( reader.ReadStruct<EquipOptionalDefine>(EquipOptionalDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa000f:
                	{
						ins.EquipQuality.Add( reader.ReadStruct<EquipQualityDefine>(EquipQualityDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0010:
                	{
						ins.EquipQualityGrowInfo.Add( reader.ReadStruct<EquipQualityGrowInfoDefine>(EquipQualityGrowInfoDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0011:
                	{
						ins.EquipSet.Add( reader.ReadStruct<EquipSetDefine>(EquipSetDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0012:
                	{
						ins.EquipSetInfo.Add( reader.ReadStruct<EquipSetInfoDefine>(EquipSetInfoDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0013:
                	{
						ins.EquipShop.Add( reader.ReadStruct<EquipShopDefine>(EquipShopDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0014:
                	{
						ins.EquipShopFloor.Add( reader.ReadStruct<EquipShopFloorDefine>(EquipShopFloorDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0015:
                	{
						ins.EquipType.Add( reader.ReadStruct<EquipTypeDefine>(EquipTypeDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0016:
                	{
						ins.General.Add( reader.ReadStruct<GeneralDefine>(GeneralDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0017:
                	{
						ins.HeroAwake.Add( reader.ReadStruct<HeroAwakeDefine>(HeroAwakeDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0018:
                	{
						ins.HeroCharacters.Add( reader.ReadStruct<HeroCharactersDefine>(HeroCharactersDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0019:
                	{
						ins.HeroLevel.Add( reader.ReadStruct<HeroLevelDefine>(HeroLevelDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa001a:
                	{
						ins.HeroLevelInStage.Add( reader.ReadStruct<HeroLevelInStageDefine>(HeroLevelInStageDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa001b:
                	{
						ins.HighGrowthFund.Add( reader.ReadStruct<HighGrowthFundDefine>(HighGrowthFundDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa001c:
                	{
						ins.Item.Add( reader.ReadStruct<ItemDefine>(ItemDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa001d:
                	{
						ins.ItemSet.Add( reader.ReadStruct<ItemSetDefine>(ItemSetDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa001e:
                	{
						ins.ItemSetInfo.Add( reader.ReadStruct<ItemSetInfoDefine>(ItemSetInfoDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa001f:
                	{
						ins.Localization.Add( reader.ReadStruct<LocalizationDefine>(LocalizationDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0020:
                	{
						ins.LootOnlyInCombat.Add( reader.ReadStruct<LootOnlyInCombatDefine>(LootOnlyInCombatDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0021:
                	{
						ins.MapObject.Add( reader.ReadStruct<MapObjectDefine>(MapObjectDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0022:
                	{
						ins.MapRandomPool.Add( reader.ReadStruct<MapRandomPoolDefine>(MapRandomPoolDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0023:
                	{
						ins.MapTape.Add( reader.ReadStruct<MapTapeDefine>(MapTapeDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0024:
                	{
						ins.ModuleConfig.Add( reader.ReadStruct<ModuleConfigDefine>(ModuleConfigDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0025:
                	{
						ins.NormalGrowthFund.Add( reader.ReadStruct<NormalGrowthFundDefine>(NormalGrowthFundDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0026:
                	{
						ins.NPC.Add( reader.ReadStruct<NPCDefine>(NPCDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0027:
                	{
						ins.Offline.Add( reader.ReadStruct<OfflineDefine>(OfflineDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0028:
                	{
						ins.PassReward.Add( reader.ReadStruct<PassRewardDefine>(PassRewardDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0029:
                	{
						ins.PiggyBank.Add( reader.ReadStruct<PiggyBankDefine>(PiggyBankDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa002a:
                	{
						ins.Rank.Add( reader.ReadStruct<RankDefine>(RankDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa002b:
                	{
						ins.RedDot.Add( reader.ReadStruct<RedDotDefine>(RedDotDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa002c:
                	{
						ins.RetailSkills.Add( reader.ReadStruct<RetailSkillsDefine>(RetailSkillsDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa002d:
                	{
						ins.SevenDayEventExpBar.Add( reader.ReadStruct<SevenDayEventExpBarDefine>(SevenDayEventExpBarDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa002e:
                	{
						ins.SevenDayEventTask.Add( reader.ReadStruct<SevenDayEventTaskDefine>(SevenDayEventTaskDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa002f:
                	{
						ins.SevenDaySignIn.Add( reader.ReadStruct<SevenDaySignInDefine>(SevenDaySignInDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0030:
                	{
						ins.Shop.Add( reader.ReadStruct<ShopDefine>(ShopDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0031:
                	{
						ins.SignInConfig.Add( reader.ReadStruct<SignInConfigDefine>(SignInConfigDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0032:
                	{
						ins.Skill.Add( reader.ReadStruct<SkillDefine>(SkillDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0033:
                	{
						ins.SkillLevel.Add( reader.ReadStruct<SkillLevelDefine>(SkillLevelDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0034:
                	{
						ins.SkillSeriesInChapter.Add( reader.ReadStruct<SkillSeriesInChapterDefine>(SkillSeriesInChapterDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0035:
                	{
						ins.SkillSeriesInfo.Add( reader.ReadStruct<SkillSeriesInfoDefine>(SkillSeriesInfoDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0036:
                	{
						ins.SpecialChallenge.Add( reader.ReadStruct<SpecialChallengeDefine>(SpecialChallengeDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0037:
                	{
						ins.SpecialChapterInfo.Add( reader.ReadStruct<SpecialChapterInfoDefine>(SpecialChapterInfoDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0038:
                	{
						ins.SpecialEquip.Add( reader.ReadStruct<SpecialEquipDefine>(SpecialEquipDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0039:
                	{
						ins.SpineChangeSkin.Add( reader.ReadStruct<SpineChangeSkinDefine>(SpineChangeSkinDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa003a:
                	{
						ins.StageChapterChallengeInfo.Add( reader.ReadStruct<StageChapterChallengeInfoDefine>(StageChapterChallengeInfoDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa003b:
                	{
						ins.StageDiamondInfo.Add( reader.ReadStruct<StageDiamondInfoDefine>(StageDiamondInfoDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa003c:
                	{
						ins.StageGold2Info.Add( reader.ReadStruct<StageGold2InfoDefine>(StageGold2InfoDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa003d:
                	{
						ins.StageGoldInfo.Add( reader.ReadStruct<StageGoldInfoDefine>(StageGoldInfoDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa003e:
                	{
						ins.StageHeroPartInfo.Add( reader.ReadStruct<StageHeroPartInfoDefine>(StageHeroPartInfoDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa003f:
                	{
						ins.StageInfo.Add( reader.ReadStruct<StageInfoDefine>(StageInfoDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0040:
                	{
						ins.StageRandomPool.Add( reader.ReadStruct<StageRandomPoolDefine>(StageRandomPoolDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0041:
                	{
						ins.SubscriptionShop.Add( reader.ReadStruct<SubscriptionShopDefine>(SubscriptionShopDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0042:
                	{
						ins.SummonedInStage.Add( reader.ReadStruct<SummonedInStageDefine>(SummonedInStageDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0043:
                	{
						ins.Talent.Add( reader.ReadStruct<TalentDefine>(TalentDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0044:
                	{
						ins.TalentEvolution.Add( reader.ReadStruct<TalentEvolutionDefine>(TalentEvolutionDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0045:
                	{
						ins.TaskConfig.Add( reader.ReadStruct<TaskConfigDefine>(TaskConfigDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0046:
                	{
						ins.TaskRewards.Add( reader.ReadStruct<TaskRewardsDefine>(TaskRewardsDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0047:
                	{
						ins.Thief.Add( reader.ReadStruct<ThiefDefine>(ThiefDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0048:
                	{
						ins.UIBeginnerGuide.Add( reader.ReadStruct<UIBeginnerGuideDefine>(UIBeginnerGuideDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0049:
                	{
						ins.UIStoreData.Add( reader.ReadStruct<UIStoreDataDefine>(UIStoreDataDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa004a:
                	{
						ins.UIStoreGoodsData.Add( reader.ReadStruct<UIStoreGoodsDataDefine>(UIStoreGoodsDataDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa004b:
                	{
						ins.UISupplyStoreAccumulative.Add( reader.ReadStruct<UISupplyStoreAccumulativeDefine>(UISupplyStoreAccumulativeDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa004c:
                	{
						ins.UISupplyStoreData.Add( reader.ReadStruct<UISupplyStoreDataDefine>(UISupplyStoreDataDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa004d:
                	{
						ins.UISupplyStoreGoodsData.Add( reader.ReadStruct<UISupplyStoreGoodsDataDefine>(UISupplyStoreGoodsDataDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa004e:
                	{
						ins.UIUnlockTip.Add( reader.ReadStruct<UIUnlockTipDefine>(UIUnlockTipDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa004f:
                	{
						ins.WeeklyTaskConfig.Add( reader.ReadStruct<WeeklyTaskConfigDefine>(WeeklyTaskConfigDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0050:
                	{
						ins.WeeklyTaskRewards.Add( reader.ReadStruct<WeeklyTaskRewardsDefine>(WeeklyTaskRewardsDefineDeserializeHandler) );
                	}
                	break; 
                }
             } 
			// Build AudioConfig Index
			for( int i = 0;i< ins.AudioConfig.Count;i++)
			{
				var element = ins.AudioConfig[i];
				ins._AudioConfigByID.Add(element.ID, element);
			}
			// Build Avatar Index
			for( int i = 0;i< ins.Avatar.Count;i++)
			{
				var element = ins.Avatar[i];
				ins._AvatarById.Add(element.Id, element);
			}
			// Build Banner Index
			for( int i = 0;i< ins.Banner.Count;i++)
			{
				var element = ins.Banner[i];
				ins._BannerByBannerID.Add(element.BannerID, element);
			}
			// Build BoxSet Index
			for( int i = 0;i< ins.BoxSet.Count;i++)
			{
				var element = ins.BoxSet[i];
				ins._BoxSetBySetID.Add(element.SetID, element);
			}
			// Build ChapterInfo Index
			for( int i = 0;i< ins.ChapterInfo.Count;i++)
			{
				var element = ins.ChapterInfo[i];
				ins._ChapterInfoByChapter.Add(element.Chapter, element);
			}
			// Build ClearReward Index
			for( int i = 0;i< ins.ClearReward.Count;i++)
			{
				var element = ins.ClearReward[i];
				ins._ClearRewardByIndex.Add(element.Index, element);
			}
			// Build CycleShop Index
			for( int i = 0;i< ins.CycleShop.Count;i++)
			{
				var element = ins.CycleShop[i];
				ins._CycleShopByShopIndex.Add(element.ShopIndex, element);
			}
			// Build Dialogue Index
			for( int i = 0;i< ins.Dialogue.Count;i++)
			{
				var element = ins.Dialogue[i];
				ins._DialogueByIndex.Add(element.Index, element);
			}
			// Build Enemy Index
			for( int i = 0;i< ins.Enemy.Count;i++)
			{
				var element = ins.Enemy[i];
				ins._EnemyByEnemyID.Add(element.EnemyID, element);
			}
			// Build EquipOptional Index
			for( int i = 0;i< ins.EquipOptional.Count;i++)
			{
				var element = ins.EquipOptional[i];
				ins._EquipOptionalByItemId.Add(element.ItemId, element);
			}
			// Build EquipQuality Index
			for( int i = 0;i< ins.EquipQuality.Count;i++)
			{
				var element = ins.EquipQuality[i];
				ins._EquipQualityByQuality.Add(element.Quality, element);
			}
			// Build EquipQualityGrowInfo Index
			for( int i = 0;i< ins.EquipQualityGrowInfo.Count;i++)
			{
				var element = ins.EquipQualityGrowInfo[i];
				ins._EquipQualityGrowInfoByBaseAttributeType.Add(element.BaseAttributeType, element);
			}
			// Build EquipSetInfo Index
			for( int i = 0;i< ins.EquipSetInfo.Count;i++)
			{
				var element = ins.EquipSetInfo[i];
				ins._EquipSetInfoBySetID.Add(element.SetID, element);
			}
			// Build EquipShop Index
			for( int i = 0;i< ins.EquipShop.Count;i++)
			{
				var element = ins.EquipShop[i];
				ins._EquipShopByIndex.Add(element.Index, element);
			}
			// Build EquipShopFloor Index
			for( int i = 0;i< ins.EquipShopFloor.Count;i++)
			{
				var element = ins.EquipShopFloor[i];
				ins._EquipShopFloorByFloorID.Add(element.FloorID, element);
			}
			// Build EquipType Index
			for( int i = 0;i< ins.EquipType.Count;i++)
			{
				var element = ins.EquipType[i];
				ins._EquipTypeByType.Add(element.Type, element);
			}
			// Build General Index
			for( int i = 0;i< ins.General.Count;i++)
			{
				var element = ins.General[i];
				ins._GeneralByGeneral_Type.Add(element.General_Type, element);
			}
			// Build HeroCharacters Index
			for( int i = 0;i< ins.HeroCharacters.Count;i++)
			{
				var element = ins.HeroCharacters[i];
				ins._HeroCharactersByID.Add(element.ID, element);
			}
			// Build HeroLevelInStage Index
			for( int i = 0;i< ins.HeroLevelInStage.Count;i++)
			{
				var element = ins.HeroLevelInStage[i];
				ins._HeroLevelInStageByLevel.Add(element.Level, element);
			}
			// Build HighGrowthFund Index
			for( int i = 0;i< ins.HighGrowthFund.Count;i++)
			{
				var element = ins.HighGrowthFund[i];
				ins._HighGrowthFundByID.Add(element.ID, element);
			}
			// Build Item Index
			for( int i = 0;i< ins.Item.Count;i++)
			{
				var element = ins.Item[i];
				ins._ItemById.Add(element.Id, element);
			}
			// Build ItemSetInfo Index
			for( int i = 0;i< ins.ItemSetInfo.Count;i++)
			{
				var element = ins.ItemSetInfo[i];
				ins._ItemSetInfoBySetID.Add(element.SetID, element);
			}
			// Build LootOnlyInCombat Index
			for( int i = 0;i< ins.LootOnlyInCombat.Count;i++)
			{
				var element = ins.LootOnlyInCombat[i];
				ins._LootOnlyInCombatById.Add(element.Id, element);
			}
			// Build MapObject Index
			for( int i = 0;i< ins.MapObject.Count;i++)
			{
				var element = ins.MapObject[i];
				ins._MapObjectByID.Add(element.ID, element);
			}
			// Build MapRandomPool Index
			for( int i = 0;i< ins.MapRandomPool.Count;i++)
			{
				var element = ins.MapRandomPool[i];
				ins._MapRandomPoolByindex.Add(element.index, element);
			}
			// Build ModuleConfig Index
			for( int i = 0;i< ins.ModuleConfig.Count;i++)
			{
				var element = ins.ModuleConfig[i];
				ins._ModuleConfigByModuleType.Add(element.ModuleType, element);
			}
			// Build NormalGrowthFund Index
			for( int i = 0;i< ins.NormalGrowthFund.Count;i++)
			{
				var element = ins.NormalGrowthFund[i];
				ins._NormalGrowthFundByID.Add(element.ID, element);
			}
			// Build NPC Index
			for( int i = 0;i< ins.NPC.Count;i++)
			{
				var element = ins.NPC[i];
				ins._NPCByID.Add(element.ID, element);
			}
			// Build Offline Index
			for( int i = 0;i< ins.Offline.Count;i++)
			{
				var element = ins.Offline[i];
				ins._OfflineByChapter.Add(element.Chapter, element);
			}
			// Build PiggyBank Index
			for( int i = 0;i< ins.PiggyBank.Count;i++)
			{
				var element = ins.PiggyBank[i];
				ins._PiggyBankByCycle.Add(element.Cycle, element);
				ins._PiggyBankByShopID.Add(element.ShopID, element);
			}
			// Build Rank Index
			for( int i = 0;i< ins.Rank.Count;i++)
			{
				var element = ins.Rank[i];
				ins._RankByRankRewardID.Add(element.RankRewardID, element);
			}
			// Build RedDot Index
			for( int i = 0;i< ins.RedDot.Count;i++)
			{
				var element = ins.RedDot[i];
				ins._RedDotBymoduleID.Add(element.moduleID, element);
			}
			// Build RetailSkills Index
			for( int i = 0;i< ins.RetailSkills.Count;i++)
			{
				var element = ins.RetailSkills[i];
				ins._RetailSkillsBySkillID.Add(element.SkillID, element);
			}
			// Build SevenDayEventExpBar Index
			for( int i = 0;i< ins.SevenDayEventExpBar.Count;i++)
			{
				var element = ins.SevenDayEventExpBar[i];
				ins._SevenDayEventExpBarById.Add(element.Id, element);
			}
			// Build SevenDayEventTask Index
			for( int i = 0;i< ins.SevenDayEventTask.Count;i++)
			{
				var element = ins.SevenDayEventTask[i];
				ins._SevenDayEventTaskById.Add(element.Id, element);
			}
			// Build SevenDaySignIn Index
			for( int i = 0;i< ins.SevenDaySignIn.Count;i++)
			{
				var element = ins.SevenDaySignIn[i];
				ins._SevenDaySignInByDay.Add(element.Day, element);
			}
			// Build Shop Index
			for( int i = 0;i< ins.Shop.Count;i++)
			{
				var element = ins.Shop[i];
				ins._ShopByShopIndex.Add(element.ShopIndex, element);
			}
			// Build SignInConfig Index
			for( int i = 0;i< ins.SignInConfig.Count;i++)
			{
				var element = ins.SignInConfig[i];
				ins._SignInConfigByDay.Add(element.Day, element);
			}
			// Build Skill Index
			for( int i = 0;i< ins.Skill.Count;i++)
			{
				var element = ins.Skill[i];
				ins._SkillBySkillID.Add(element.SkillID, element);
			}
			// Build SkillSeriesInChapter Index
			for( int i = 0;i< ins.SkillSeriesInChapter.Count;i++)
			{
				var element = ins.SkillSeriesInChapter[i];
				ins._SkillSeriesInChapterByChapter.Add(element.Chapter, element);
			}
			// Build SkillSeriesInfo Index
			for( int i = 0;i< ins.SkillSeriesInfo.Count;i++)
			{
				var element = ins.SkillSeriesInfo[i];
				ins._SkillSeriesInfoBySkillSeries.Add(element.SkillSeries, element);
			}
			// Build SpecialChapterInfo Index
			for( int i = 0;i< ins.SpecialChapterInfo.Count;i++)
			{
				var element = ins.SpecialChapterInfo[i];
				ins._SpecialChapterInfoByChapterName.Add(element.ChapterName, element);
			}
			// Build SpecialEquip Index
			for( int i = 0;i< ins.SpecialEquip.Count;i++)
			{
				var element = ins.SpecialEquip[i];
				ins._SpecialEquipBySerialType.Add(element.SerialType, element);
			}
			// Build SpineChangeSkin Index
			for( int i = 0;i< ins.SpineChangeSkin.Count;i++)
			{
				var element = ins.SpineChangeSkin[i];
				ins._SpineChangeSkinByID.Add(element.ID, element);
			}
			// Build StageDiamondInfo Index
			for( int i = 0;i< ins.StageDiamondInfo.Count;i++)
			{
				var element = ins.StageDiamondInfo[i];
				ins._StageDiamondInfoByStage.Add(element.Stage, element);
			}
			// Build StageGold2Info Index
			for( int i = 0;i< ins.StageGold2Info.Count;i++)
			{
				var element = ins.StageGold2Info[i];
				ins._StageGold2InfoByStage.Add(element.Stage, element);
			}
			// Build StageGoldInfo Index
			for( int i = 0;i< ins.StageGoldInfo.Count;i++)
			{
				var element = ins.StageGoldInfo[i];
				ins._StageGoldInfoByStage.Add(element.Stage, element);
			}
			// Build SubscriptionShop Index
			for( int i = 0;i< ins.SubscriptionShop.Count;i++)
			{
				var element = ins.SubscriptionShop[i];
				ins._SubscriptionShopByIndex.Add(element.Index, element);
			}
			// Build SummonedInStage Index
			for( int i = 0;i< ins.SummonedInStage.Count;i++)
			{
				var element = ins.SummonedInStage[i];
				ins._SummonedInStageByID.Add(element.ID, element);
			}
			// Build Talent Index
			for( int i = 0;i< ins.Talent.Count;i++)
			{
				var element = ins.Talent[i];
				ins._TalentByTalentID.Add(element.TalentID, element);
			}
			// Build TalentEvolution Index
			for( int i = 0;i< ins.TalentEvolution.Count;i++)
			{
				var element = ins.TalentEvolution[i];
				ins._TalentEvolutionByEvolutionID.Add(element.EvolutionID, element);
			}
			// Build Thief Index
			for( int i = 0;i< ins.Thief.Count;i++)
			{
				var element = ins.Thief[i];
				ins._ThiefByChapterID.Add(element.ChapterID, element);
			}
			// Build UIBeginnerGuide Index
			for( int i = 0;i< ins.UIBeginnerGuide.Count;i++)
			{
				var element = ins.UIBeginnerGuide[i];
				ins._UIBeginnerGuideByID.Add(element.ID, element);
			}
			// Build UIStoreData Index
			for( int i = 0;i< ins.UIStoreData.Count;i++)
			{
				var element = ins.UIStoreData[i];
				ins._UIStoreDataByIndex.Add(element.Index, element);
				ins._UIStoreDataBySubStoreName.Add(element.SubStoreName, element);
			}
			// Build UIStoreGoodsData Index
			for( int i = 0;i< ins.UIStoreGoodsData.Count;i++)
			{
				var element = ins.UIStoreGoodsData[i];
				ins._UIStoreGoodsDataByID.Add(element.ID, element);
			}
			// Build UISupplyStoreAccumulative Index
			for( int i = 0;i< ins.UISupplyStoreAccumulative.Count;i++)
			{
				var element = ins.UISupplyStoreAccumulative[i];
				ins._UISupplyStoreAccumulativeByID.Add(element.ID, element);
			}
			// Build UISupplyStoreData Index
			for( int i = 0;i< ins.UISupplyStoreData.Count;i++)
			{
				var element = ins.UISupplyStoreData[i];
				ins._UISupplyStoreDataBySubStoreName.Add(element.SubStoreName, element);
			}
			// Build UISupplyStoreGoodsData Index
			for( int i = 0;i< ins.UISupplyStoreGoodsData.Count;i++)
			{
				var element = ins.UISupplyStoreGoodsData[i];
				ins._UISupplyStoreGoodsDataByID.Add(element.ID, element);
			}
			// Build UIUnlockTip Index
			for( int i = 0;i< ins.UIUnlockTip.Count;i++)
			{
				var element = ins.UIUnlockTip[i];
				ins._UIUnlockTipByID.Add(element.ID, element);
			}
		}
		static tabtoy.DeserializeHandler<KeyInt_ValueString> _KeyInt_ValueStringDeserializeHandler;
		static tabtoy.DeserializeHandler<KeyInt_ValueString> KeyInt_ValueStringDeserializeHandler
		{
			get
			{
				if (_KeyInt_ValueStringDeserializeHandler == null )
				{
					_KeyInt_ValueStringDeserializeHandler = new tabtoy.DeserializeHandler<KeyInt_ValueString>(Deserialize);
				}
				return _KeyInt_ValueStringDeserializeHandler;
			}
		}
		public static void Deserialize( KeyInt_ValueString ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Int_Key = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.String_Value = reader.ReadString();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<KeyInt_ValueInt> _KeyInt_ValueIntDeserializeHandler;
		static tabtoy.DeserializeHandler<KeyInt_ValueInt> KeyInt_ValueIntDeserializeHandler
		{
			get
			{
				if (_KeyInt_ValueIntDeserializeHandler == null )
				{
					_KeyInt_ValueIntDeserializeHandler = new tabtoy.DeserializeHandler<KeyInt_ValueInt>(Deserialize);
				}
				return _KeyInt_ValueIntDeserializeHandler;
			}
		}
		public static void Deserialize( KeyInt_ValueInt ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Int_Key = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Int_Value = reader.ReadInt32();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<RewardItem> _RewardItemDeserializeHandler;
		static tabtoy.DeserializeHandler<RewardItem> RewardItemDeserializeHandler
		{
			get
			{
				if (_RewardItemDeserializeHandler == null )
				{
					_RewardItemDeserializeHandler = new tabtoy.DeserializeHandler<RewardItem>(Deserialize);
				}
				return _RewardItemDeserializeHandler;
			}
		}
		public static void Deserialize( RewardItem ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ItemID = reader.ReadInt32();
                	}
                	break; 
                	case 0x40001:
                	{
						ins.ItemNumber = reader.ReadUInt64();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<AtlasStructure> _AtlasStructureDeserializeHandler;
		static tabtoy.DeserializeHandler<AtlasStructure> AtlasStructureDeserializeHandler
		{
			get
			{
				if (_AtlasStructureDeserializeHandler == null )
				{
					_AtlasStructureDeserializeHandler = new tabtoy.DeserializeHandler<AtlasStructure>(Deserialize);
				}
				return _AtlasStructureDeserializeHandler;
			}
		}
		public static void Deserialize( AtlasStructure ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x60000:
                	{
						ins.AtlasPath = reader.ReadString();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.SpriteName = reader.ReadString();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<RangeIntValue> _RangeIntValueDeserializeHandler;
		static tabtoy.DeserializeHandler<RangeIntValue> RangeIntValueDeserializeHandler
		{
			get
			{
				if (_RangeIntValueDeserializeHandler == null )
				{
					_RangeIntValueDeserializeHandler = new tabtoy.DeserializeHandler<RangeIntValue>(Deserialize);
				}
				return _RangeIntValueDeserializeHandler;
			}
		}
		public static void Deserialize( RangeIntValue ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Min = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Max = reader.ReadInt32();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<RangeFloatValue> _RangeFloatValueDeserializeHandler;
		static tabtoy.DeserializeHandler<RangeFloatValue> RangeFloatValueDeserializeHandler
		{
			get
			{
				if (_RangeFloatValueDeserializeHandler == null )
				{
					_RangeFloatValueDeserializeHandler = new tabtoy.DeserializeHandler<RangeFloatValue>(Deserialize);
				}
				return _RangeFloatValueDeserializeHandler;
			}
		}
		public static void Deserialize( RangeFloatValue ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x50000:
                	{
						ins.Min = reader.ReadFloat();
                	}
                	break; 
                	case 0x50001:
                	{
						ins.Max = reader.ReadFloat();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<GlobalsVector3> _GlobalsVector3DeserializeHandler;
		static tabtoy.DeserializeHandler<GlobalsVector3> GlobalsVector3DeserializeHandler
		{
			get
			{
				if (_GlobalsVector3DeserializeHandler == null )
				{
					_GlobalsVector3DeserializeHandler = new tabtoy.DeserializeHandler<GlobalsVector3>(Deserialize);
				}
				return _GlobalsVector3DeserializeHandler;
			}
		}
		public static void Deserialize( GlobalsVector3 ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x50000:
                	{
						ins.x = reader.ReadFloat();
                	}
                	break; 
                	case 0x50001:
                	{
						ins.y = reader.ReadFloat();
                	}
                	break; 
                	case 0x50002:
                	{
						ins.z = reader.ReadFloat();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<TutorialNode> _TutorialNodeDeserializeHandler;
		static tabtoy.DeserializeHandler<TutorialNode> TutorialNodeDeserializeHandler
		{
			get
			{
				if (_TutorialNodeDeserializeHandler == null )
				{
					_TutorialNodeDeserializeHandler = new tabtoy.DeserializeHandler<TutorialNode>(Deserialize);
				}
				return _TutorialNodeDeserializeHandler;
			}
		}
		public static void Deserialize( TutorialNode ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x70000:
                	{
						ins.isTrigger = reader.ReadBool();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.triggerID = reader.ReadInt32();
                	}
                	break; 
                	case 0x70002:
                	{
						ins.promptly = reader.ReadBool();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<RandomItem> _RandomItemDeserializeHandler;
		static tabtoy.DeserializeHandler<RandomItem> RandomItemDeserializeHandler
		{
			get
			{
				if (_RandomItemDeserializeHandler == null )
				{
					_RandomItemDeserializeHandler = new tabtoy.DeserializeHandler<RandomItem>(Deserialize);
				}
				return _RandomItemDeserializeHandler;
			}
		}
		public static void Deserialize( RandomItem ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ItemID = reader.ReadInt32();
                	}
                	break; 
                	case 0x40001:
                	{
						ins.ItemNumber = reader.ReadUInt64();
                	}
                	break; 
                	case 0x50002:
                	{
						ins.Rate = reader.ReadFloat();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<RangeItem> _RangeItemDeserializeHandler;
		static tabtoy.DeserializeHandler<RangeItem> RangeItemDeserializeHandler
		{
			get
			{
				if (_RangeItemDeserializeHandler == null )
				{
					_RangeItemDeserializeHandler = new tabtoy.DeserializeHandler<RangeItem>(Deserialize);
				}
				return _RangeItemDeserializeHandler;
			}
		}
		public static void Deserialize( RangeItem ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ItemID = reader.ReadInt32();
                	}
                	break; 
                	case 0x20001:
                	{
						ins.Max = reader.ReadInt64();
                	}
                	break; 
                	case 0x20002:
                	{
						ins.Min = reader.ReadInt64();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<LocalItem> _LocalItemDeserializeHandler;
		static tabtoy.DeserializeHandler<LocalItem> LocalItemDeserializeHandler
		{
			get
			{
				if (_LocalItemDeserializeHandler == null )
				{
					_LocalItemDeserializeHandler = new tabtoy.DeserializeHandler<LocalItem>(Deserialize);
				}
				return _LocalItemDeserializeHandler;
			}
		}
		public static void Deserialize( LocalItem ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x80000:
                	{
						ins.LocalFunc = reader.ReadEnum<FunctionType>();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.LocalOrder = reader.ReadInt32();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<EnemyInfo> _EnemyInfoDeserializeHandler;
		static tabtoy.DeserializeHandler<EnemyInfo> EnemyInfoDeserializeHandler
		{
			get
			{
				if (_EnemyInfoDeserializeHandler == null )
				{
					_EnemyInfoDeserializeHandler = new tabtoy.DeserializeHandler<EnemyInfo>(Deserialize);
				}
				return _EnemyInfoDeserializeHandler;
			}
		}
		public static void Deserialize( EnemyInfo ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Count = reader.ReadInt32();
                	}
                	break; 
                	case 0x50002:
                	{
						ins.X = reader.ReadFloat();
                	}
                	break; 
                	case 0x50003:
                	{
						ins.Y = reader.ReadFloat();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.AppearTimes = reader.ReadInt32();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.AppearOrder = reader.ReadInt32();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<LootInfo> _LootInfoDeserializeHandler;
		static tabtoy.DeserializeHandler<LootInfo> LootInfoDeserializeHandler
		{
			get
			{
				if (_LootInfoDeserializeHandler == null )
				{
					_LootInfoDeserializeHandler = new tabtoy.DeserializeHandler<LootInfo>(Deserialize);
				}
				return _LootInfoDeserializeHandler;
			}
		}
		public static void Deserialize( LootInfo ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x50001:
                	{
						ins.DropChance = reader.ReadFloat();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<EquipReward> _EquipRewardDeserializeHandler;
		static tabtoy.DeserializeHandler<EquipReward> EquipRewardDeserializeHandler
		{
			get
			{
				if (_EquipRewardDeserializeHandler == null )
				{
					_EquipRewardDeserializeHandler = new tabtoy.DeserializeHandler<EquipReward>(Deserialize);
				}
				return _EquipRewardDeserializeHandler;
			}
		}
		public static void Deserialize( EquipReward ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Type = reader.ReadInt32();
                	}
                	break; 
                	case 0x80001:
                	{
						ins.Quality = reader.ReadEnum<NewEquipQualityType>();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.Level = reader.ReadInt32();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<RandomEquip> _RandomEquipDeserializeHandler;
		static tabtoy.DeserializeHandler<RandomEquip> RandomEquipDeserializeHandler
		{
			get
			{
				if (_RandomEquipDeserializeHandler == null )
				{
					_RandomEquipDeserializeHandler = new tabtoy.DeserializeHandler<RandomEquip>(Deserialize);
				}
				return _RandomEquipDeserializeHandler;
			}
		}
		public static void Deserialize( RandomEquip ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Set = reader.ReadInt32();
                	}
                	break; 
                	case 0x80001:
                	{
						ins.Quality = reader.ReadEnum<NewEquipQualityType>();
                	}
                	break; 
                	case 0x50002:
                	{
						ins.Rate = reader.ReadFloat();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<NPCInfo> _NPCInfoDeserializeHandler;
		static tabtoy.DeserializeHandler<NPCInfo> NPCInfoDeserializeHandler
		{
			get
			{
				if (_NPCInfoDeserializeHandler == null )
				{
					_NPCInfoDeserializeHandler = new tabtoy.DeserializeHandler<NPCInfo>(Deserialize);
				}
				return _NPCInfoDeserializeHandler;
			}
		}
		public static void Deserialize( NPCInfo ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x80000:
                	{
						ins.Type = reader.ReadEnum<NPCType>();
                	}
                	break; 
                	case 0x50001:
                	{
						ins.X = reader.ReadFloat();
                	}
                	break; 
                	case 0x50002:
                	{
						ins.Y = reader.ReadFloat();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.AppearOrder = reader.ReadInt32();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<RandomItemSet> _RandomItemSetDeserializeHandler;
		static tabtoy.DeserializeHandler<RandomItemSet> RandomItemSetDeserializeHandler
		{
			get
			{
				if (_RandomItemSetDeserializeHandler == null )
				{
					_RandomItemSetDeserializeHandler = new tabtoy.DeserializeHandler<RandomItemSet>(Deserialize);
				}
				return _RandomItemSetDeserializeHandler;
			}
		}
		public static void Deserialize( RandomItemSet ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Set = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Number = reader.ReadInt32();
                	}
                	break; 
                	case 0x50002:
                	{
						ins.Rate = reader.ReadFloat();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<AchievementsDefine> _AchievementsDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<AchievementsDefine> AchievementsDefineDeserializeHandler
		{
			get
			{
				if (_AchievementsDefineDeserializeHandler == null )
				{
					_AchievementsDefineDeserializeHandler = new tabtoy.DeserializeHandler<AchievementsDefine>(Deserialize);
				}
				return _AchievementsDefineDeserializeHandler;
			}
		}
		public static void Deserialize( AchievementsDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x80000:
                	{
						ins.Achievement = reader.ReadEnum<AchievementsType>();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Require = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.RequireEx = reader.ReadInt32();
                	}
                	break; 
                	case 0x80003:
                	{
						ins.RequireQuality = reader.ReadEnum<NewEquipQualityType>();
                	}
                	break; 
                	case 0x80004:
                	{
						ins.RoleQuality = reader.ReadEnum<RoleQualityType>();
                	}
                	break; 
                	case 0x70005:
                	{
						ins.RequireQualityAndCount = reader.ReadBool();
                	}
                	break; 
                	case 0x90006:
                	{
						ins.Reward.Add( reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler) );
                	}
                	break; 
                	case 0x90007:
                	{
						ins.LocalRequirement = reader.ReadStruct<LocalItem>(LocalItemDeserializeHandler);
                	}
                	break; 
                	case 0x60008:
                	{
						ins.TargetUI = reader.ReadString();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<AudioConfigDefine> _AudioConfigDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<AudioConfigDefine> AudioConfigDefineDeserializeHandler
		{
			get
			{
				if (_AudioConfigDefineDeserializeHandler == null )
				{
					_AudioConfigDefineDeserializeHandler = new tabtoy.DeserializeHandler<AudioConfigDefine>(Deserialize);
				}
				return _AudioConfigDefineDeserializeHandler;
			}
		}
		public static void Deserialize( AudioConfigDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x80001:
                	{
						ins.soundType = reader.ReadEnum<AudioType>();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.formName = reader.ReadString();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.audioClipPath = reader.ReadString();
                	}
                	break; 
                	case 0x70004:
                	{
						ins.isPreLoad = reader.ReadBool();
                	}
                	break; 
                	case 0x50005:
                	{
						ins.volumeScale = reader.ReadFloat();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<AvatarDefine> _AvatarDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<AvatarDefine> AvatarDefineDeserializeHandler
		{
			get
			{
				if (_AvatarDefineDeserializeHandler == null )
				{
					_AvatarDefineDeserializeHandler = new tabtoy.DeserializeHandler<AvatarDefine>(Deserialize);
				}
				return _AvatarDefineDeserializeHandler;
			}
		}
		public static void Deserialize( AvatarDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Id = reader.ReadInt32();
                	}
                	break; 
                	case 0x90001:
                	{
						ins.Avatar = reader.ReadStruct<AtlasStructure>(AtlasStructureDeserializeHandler);
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<BannerDefine> _BannerDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<BannerDefine> BannerDefineDeserializeHandler
		{
			get
			{
				if (_BannerDefineDeserializeHandler == null )
				{
					_BannerDefineDeserializeHandler = new tabtoy.DeserializeHandler<BannerDefine>(Deserialize);
				}
				return _BannerDefineDeserializeHandler;
			}
		}
		public static void Deserialize( BannerDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.BannerID = reader.ReadInt32();
                	}
                	break; 
                	case 0x80001:
                	{
						ins.BannerType = reader.ReadEnum<BannerType>();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.Priority = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.TriggerChapter = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.CanTriggerTimes = reader.ReadInt32();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.LoginTriggerTimes = reader.ReadInt32();
                	}
                	break; 
                	case 0x10006:
                	{
						ins.Duration = reader.ReadInt32();
                	}
                	break; 
                	case 0x10007:
                	{
						ins.ShopID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60008:
                	{
						ins.UIName = reader.ReadString();
                	}
                	break; 
                	case 0x10009:
                	{
						ins.RoleID = reader.ReadInt32();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<BossDefine> _BossDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<BossDefine> BossDefineDeserializeHandler
		{
			get
			{
				if (_BossDefineDeserializeHandler == null )
				{
					_BossDefineDeserializeHandler = new tabtoy.DeserializeHandler<BossDefine>(Deserialize);
				}
				return _BossDefineDeserializeHandler;
			}
		}
		public static void Deserialize( BossDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.EnemyID = reader.ReadInt32();
                	}
                	break; 
                	case 0x80001:
                	{
						ins.Stage = reader.ReadEnum<Stage>();
                	}
                	break; 
                	case 0x80002:
                	{
						ins.EnemyAttackType = reader.ReadEnum<EnemyAttackType>();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.HP = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.Attack = reader.ReadInt32();
                	}
                	break; 
                	case 0x50005:
                	{
						ins.Speed = reader.ReadFloat();
                	}
                	break; 
                	case 0x50006:
                	{
						ins.AttackInterval = reader.ReadFloat();
                	}
                	break; 
                	case 0x10007:
                	{
						ins.AttackAniCount = reader.ReadInt32();
                	}
                	break; 
                	case 0x70008:
                	{
						ins.IsFlip = reader.ReadBool();
                	}
                	break; 
                	case 0x80009:
                	{
						ins.DeadType = reader.ReadEnum<EnemyDeadType>();
                	}
                	break; 
                	case 0x1000a:
                	{
						ins.ExSkillPower = reader.ReadInt32();
                	}
                	break; 
                	case 0x6000b:
                	{
						ins.SpinePath = reader.ReadString();
                	}
                	break; 
                	case 0x6000c:
                	{
						ins.ExtraObject = reader.ReadString();
                	}
                	break; 
                	case 0x1000d:
                	{
						ins.StageCount = reader.ReadInt32();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<BoxSetDefine> _BoxSetDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<BoxSetDefine> BoxSetDefineDeserializeHandler
		{
			get
			{
				if (_BoxSetDefineDeserializeHandler == null )
				{
					_BoxSetDefineDeserializeHandler = new tabtoy.DeserializeHandler<BoxSetDefine>(Deserialize);
				}
				return _BoxSetDefineDeserializeHandler;
			}
		}
		public static void Deserialize( BoxSetDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.SetID = reader.ReadInt32();
                	}
                	break; 
                	case 0x90001:
                	{
						ins.Items.Add( reader.ReadStruct<RandomItem>(RandomItemDeserializeHandler) );
                	}
                	break; 
                	case 0x90002:
                	{
						ins.EquipSet.Add( reader.ReadStruct<RandomEquip>(RandomEquipDeserializeHandler) );
                	}
                	break; 
                	case 0x90003:
                	{
						ins.ItemSet.Add( reader.ReadStruct<RandomItemSet>(RandomItemSetDeserializeHandler) );
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<ChapterInfoDefine> _ChapterInfoDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<ChapterInfoDefine> ChapterInfoDefineDeserializeHandler
		{
			get
			{
				if (_ChapterInfoDefineDeserializeHandler == null )
				{
					_ChapterInfoDefineDeserializeHandler = new tabtoy.DeserializeHandler<ChapterInfoDefine>(Deserialize);
				}
				return _ChapterInfoDefineDeserializeHandler;
			}
		}
		public static void Deserialize( ChapterInfoDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Chapter = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.ChapterName = reader.ReadString();
                	}
                	break; 
                	case 0x90002:
                	{
						ins.LocalChapterName = reader.ReadStruct<LocalItem>(LocalItemDeserializeHandler);
                	}
                	break; 
                	case 0x60003:
                	{
						ins.SpinePath = reader.ReadString();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.HeroMaxLevel = reader.ReadInt32();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.MaxStageIndex = reader.ReadInt32();
                	}
                	break; 
                	case 0x10006:
                	{
						ins.StaminaCost = reader.ReadInt32();
                	}
                	break; 
                	case 0x90007:
                	{
						ins.FirstRewardItems.Add( reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler) );
                	}
                	break; 
                	case 0x90008:
                	{
						ins.ChapterImage = reader.ReadStruct<AtlasStructure>(AtlasStructureDeserializeHandler);
                	}
                	break; 
                	case 0x10009:
                	{
						ins.Open = reader.ReadInt32();
                	}
                	break; 
                	case 0x6000a:
                	{
						ins.GradientColor = reader.ReadString();
                	}
                	break; 
                	case 0x1000b:
                	{
						ins.GoldPerCount = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000c:
                	{
						ins.HiddenLevels.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x1000d:
                	{
						ins.HiddenLevelsCount = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000e:
                	{
						ins.HiddenObjects.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x1000f:
                	{
						ins.HiddenObjectsCount = reader.ReadInt32();
                	}
                	break; 
                	case 0x10010:
                	{
						ins.DiamondPerHiddenObject = reader.ReadInt32();
                	}
                	break; 
                	case 0x90011:
                	{
						ins.HideGoodsIcon = reader.ReadStruct<AtlasStructure>(AtlasStructureDeserializeHandler);
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<ClearRewardDefine> _ClearRewardDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<ClearRewardDefine> ClearRewardDefineDeserializeHandler
		{
			get
			{
				if (_ClearRewardDefineDeserializeHandler == null )
				{
					_ClearRewardDefineDeserializeHandler = new tabtoy.DeserializeHandler<ClearRewardDefine>(Deserialize);
				}
				return _ClearRewardDefineDeserializeHandler;
			}
		}
		public static void Deserialize( ClearRewardDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Index = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Chapter = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.Stage = reader.ReadInt32();
                	}
                	break; 
                	case 0x90003:
                	{
						ins.Rewards.Add( reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler) );
                	}
                	break; 
                	case 0x90004:
                	{
						ins.ItemSetIndex.Add( reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler) );
                	}
                	break; 
                	case 0x10005:
                	{
						ins.OfflineTime = reader.ReadInt32();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<CycleShopDefine> _CycleShopDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<CycleShopDefine> CycleShopDefineDeserializeHandler
		{
			get
			{
				if (_CycleShopDefineDeserializeHandler == null )
				{
					_CycleShopDefineDeserializeHandler = new tabtoy.DeserializeHandler<CycleShopDefine>(Deserialize);
				}
				return _CycleShopDefineDeserializeHandler;
			}
		}
		public static void Deserialize( CycleShopDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ShopIndex = reader.ReadInt32();
                	}
                	break; 
                	case 0x80001:
                	{
						ins.Cycle = reader.ReadEnum<CycleType>();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.ProductName = reader.ReadString();
                	}
                	break; 
                	case 0x80003:
                	{
						ins.ShopType = reader.ReadEnum<ShopType>();
                	}
                	break; 
                	case 0x60004:
                	{
						ins.GoogleProductId = reader.ReadString();
                	}
                	break; 
                	case 0x80005:
                	{
						ins.ProductType = reader.ReadEnum<ProductType>();
                	}
                	break; 
                	case 0x50006:
                	{
						ins.DollarPrice = reader.ReadFloat();
                	}
                	break; 
                	case 0x90007:
                	{
						ins.EquipPool.Add( reader.ReadStruct<RandomEquip>(RandomEquipDeserializeHandler) );
                	}
                	break; 
                	case 0x90008:
                	{
						ins.ItemSetIndex.Add( reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler) );
                	}
                	break; 
                	case 0x90009:
                	{
						ins.Goods.Add( reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler) );
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<DialogueDefine> _DialogueDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<DialogueDefine> DialogueDefineDeserializeHandler
		{
			get
			{
				if (_DialogueDefineDeserializeHandler == null )
				{
					_DialogueDefineDeserializeHandler = new tabtoy.DeserializeHandler<DialogueDefine>(Deserialize);
				}
				return _DialogueDefineDeserializeHandler;
			}
		}
		public static void Deserialize( DialogueDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Index = reader.ReadInt32();
                	}
                	break; 
                	case 0x90001:
                	{
						ins.StartLocalSystem = reader.ReadStruct<LocalItem>(LocalItemDeserializeHandler);
                	}
                	break; 
                	case 0x90002:
                	{
						ins.EndLocalSystem = reader.ReadStruct<LocalItem>(LocalItemDeserializeHandler);
                	}
                	break; 
                	case 0x90003:
                	{
						ins.FinalSkillLocalSystem = reader.ReadStruct<LocalItem>(LocalItemDeserializeHandler);
                	}
                	break; 
                	case 0x90004:
                	{
						ins.PlayerDeadLocalSystem = reader.ReadStruct<LocalItem>(LocalItemDeserializeHandler);
                	}
                	break; 
                	case 0x90005:
                	{
						ins.EnterChapterLocalSystem = reader.ReadStruct<LocalItem>(LocalItemDeserializeHandler);
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<ElementalDamageFormulaDefine> _ElementalDamageFormulaDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<ElementalDamageFormulaDefine> ElementalDamageFormulaDefineDeserializeHandler
		{
			get
			{
				if (_ElementalDamageFormulaDefineDeserializeHandler == null )
				{
					_ElementalDamageFormulaDefineDeserializeHandler = new tabtoy.DeserializeHandler<ElementalDamageFormulaDefine>(Deserialize);
				}
				return _ElementalDamageFormulaDefineDeserializeHandler;
			}
		}
		public static void Deserialize( ElementalDamageFormulaDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x80000:
                	{
						ins.ElementalType = reader.ReadEnum<ElementalType>();
                	}
                	break; 
                	case 0x80001:
                	{
						ins.BuffHurtType = reader.ReadEnum<BuffHurtType>();
                	}
                	break; 
                	case 0x50002:
                	{
						ins.HurtRatio = reader.ReadFloat();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<EnemyDefine> _EnemyDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<EnemyDefine> EnemyDefineDeserializeHandler
		{
			get
			{
				if (_EnemyDefineDeserializeHandler == null )
				{
					_EnemyDefineDeserializeHandler = new tabtoy.DeserializeHandler<EnemyDefine>(Deserialize);
				}
				return _EnemyDefineDeserializeHandler;
			}
		}
		public static void Deserialize( EnemyDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.EnemyID = reader.ReadInt32();
                	}
                	break; 
                	case 0x80001:
                	{
						ins.EnemyAttackType = reader.ReadEnum<EnemyAttackType>();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.HP = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.Attack = reader.ReadInt32();
                	}
                	break; 
                	case 0x50004:
                	{
						ins.Speed = reader.ReadFloat();
                	}
                	break; 
                	case 0x50005:
                	{
						ins.AttackInterval = reader.ReadFloat();
                	}
                	break; 
                	case 0x10006:
                	{
						ins.AttackAniCount = reader.ReadInt32();
                	}
                	break; 
                	case 0x70007:
                	{
						ins.IsFlip = reader.ReadBool();
                	}
                	break; 
                	case 0x80008:
                	{
						ins.DeadType = reader.ReadEnum<EnemyDeadType>();
                	}
                	break; 
                	case 0x10009:
                	{
						ins.DeadID = reader.ReadInt32();
                	}
                	break; 
                	case 0x6000a:
                	{
						ins.SpinePath = reader.ReadString();
                	}
                	break; 
                	case 0x6000b:
                	{
						ins.ExtraObject = reader.ReadString();
                	}
                	break; 
                	case 0x1000c:
                	{
						ins.StageCount = reader.ReadInt32();
                	}
                	break; 
                	case 0x7000d:
                	{
						ins.CollideWithObstacle = reader.ReadBool();
                	}
                	break; 
                	case 0x1000e:
                	{
						ins.ExSkillPower = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000f:
                	{
						ins.Score = reader.ReadInt32();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<EquipLocationLevelDefine> _EquipLocationLevelDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<EquipLocationLevelDefine> EquipLocationLevelDefineDeserializeHandler
		{
			get
			{
				if (_EquipLocationLevelDefineDeserializeHandler == null )
				{
					_EquipLocationLevelDefineDeserializeHandler = new tabtoy.DeserializeHandler<EquipLocationLevelDefine>(Deserialize);
				}
				return _EquipLocationLevelDefineDeserializeHandler;
			}
		}
		public static void Deserialize( EquipLocationLevelDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x80000:
                	{
						ins.Location = reader.ReadEnum<EquipLocation>();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Level = reader.ReadInt32();
                	}
                	break; 
                	case 0x90002:
                	{
						ins.LevelUpConsume.Add( reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler) );
                	}
                	break; 
                	case 0x90003:
                	{
						ins.TotalConsume.Add( reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler) );
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<EquipMaterialMapDefine> _EquipMaterialMapDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<EquipMaterialMapDefine> EquipMaterialMapDefineDeserializeHandler
		{
			get
			{
				if (_EquipMaterialMapDefineDeserializeHandler == null )
				{
					_EquipMaterialMapDefineDeserializeHandler = new tabtoy.DeserializeHandler<EquipMaterialMapDefine>(Deserialize);
				}
				return _EquipMaterialMapDefineDeserializeHandler;
			}
		}
		public static void Deserialize( EquipMaterialMapDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x80000:
                	{
						ins.Quality = reader.ReadEnum<NewEquipQualityType>();
                	}
                	break; 
                	case 0x80001:
                	{
						ins.Location = reader.ReadEnum<EquipLocation>();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.ItemID = reader.ReadInt32();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<EquipOptionalDefine> _EquipOptionalDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<EquipOptionalDefine> EquipOptionalDefineDeserializeHandler
		{
			get
			{
				if (_EquipOptionalDefineDeserializeHandler == null )
				{
					_EquipOptionalDefineDeserializeHandler = new tabtoy.DeserializeHandler<EquipOptionalDefine>(Deserialize);
				}
				return _EquipOptionalDefineDeserializeHandler;
			}
		}
		public static void Deserialize( EquipOptionalDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ItemId = reader.ReadInt32();
                	}
                	break; 
                	case 0x80001:
                	{
						ins.EquipQuality = reader.ReadEnum<NewEquipQualityType>();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.OptionalSet = reader.ReadInt32();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<EquipQualityDefine> _EquipQualityDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<EquipQualityDefine> EquipQualityDefineDeserializeHandler
		{
			get
			{
				if (_EquipQualityDefineDeserializeHandler == null )
				{
					_EquipQualityDefineDeserializeHandler = new tabtoy.DeserializeHandler<EquipQualityDefine>(Deserialize);
				}
				return _EquipQualityDefineDeserializeHandler;
			}
		}
		public static void Deserialize( EquipQualityDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x80000:
                	{
						ins.Quality = reader.ReadEnum<NewEquipQualityType>();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.SynthesisSameEquip = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.SynthesisMaterial = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.DowngradeMaterial = reader.ReadInt32();
                	}
                	break; 
                	case 0x50004:
                	{
						ins.BaseAttributeRate = reader.ReadFloat();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.MaxLevel = reader.ReadInt32();
                	}
                	break; 
                	case 0x90006:
                	{
						ins.DecompositionBaseItem.Add( reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler) );
                	}
                	break; 
                	case 0x50007:
                	{
						ins.TotalConsumReturnRatio = reader.ReadFloat();
                	}
                	break; 
                	case 0x90008:
                	{
						ins.QualitySprite1 = reader.ReadStruct<AtlasStructure>(AtlasStructureDeserializeHandler);
                	}
                	break; 
                	case 0x90009:
                	{
						ins.QualitySprite2 = reader.ReadStruct<AtlasStructure>(AtlasStructureDeserializeHandler);
                	}
                	break; 
                	case 0x9000a:
                	{
						ins.QualitySprite3 = reader.ReadStruct<AtlasStructure>(AtlasStructureDeserializeHandler);
                	}
                	break; 
                	case 0x9000b:
                	{
						ins.SignInEquip = reader.ReadStruct<AtlasStructure>(AtlasStructureDeserializeHandler);
                	}
                	break; 
                	case 0x5000c:
                	{
						ins.PowerRate = reader.ReadFloat();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<EquipQualityGrowInfoDefine> _EquipQualityGrowInfoDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<EquipQualityGrowInfoDefine> EquipQualityGrowInfoDefineDeserializeHandler
		{
			get
			{
				if (_EquipQualityGrowInfoDefineDeserializeHandler == null )
				{
					_EquipQualityGrowInfoDefineDeserializeHandler = new tabtoy.DeserializeHandler<EquipQualityGrowInfoDefine>(Deserialize);
				}
				return _EquipQualityGrowInfoDefineDeserializeHandler;
			}
		}
		public static void Deserialize( EquipQualityGrowInfoDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x80000:
                	{
						ins.BaseAttributeType = reader.ReadEnum<AttributeType>();
                	}
                	break; 
                	case 0x50001:
                	{
						ins.Grow.Add( reader.ReadFloat() );
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<EquipSetDefine> _EquipSetDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<EquipSetDefine> EquipSetDefineDeserializeHandler
		{
			get
			{
				if (_EquipSetDefineDeserializeHandler == null )
				{
					_EquipSetDefineDeserializeHandler = new tabtoy.DeserializeHandler<EquipSetDefine>(Deserialize);
				}
				return _EquipSetDefineDeserializeHandler;
			}
		}
		public static void Deserialize( EquipSetDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.SetID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.EquipType = reader.ReadInt32();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<EquipSetInfoDefine> _EquipSetInfoDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<EquipSetInfoDefine> EquipSetInfoDefineDeserializeHandler
		{
			get
			{
				if (_EquipSetInfoDefineDeserializeHandler == null )
				{
					_EquipSetInfoDefineDeserializeHandler = new tabtoy.DeserializeHandler<EquipSetInfoDefine>(Deserialize);
				}
				return _EquipSetInfoDefineDeserializeHandler;
			}
		}
		public static void Deserialize( EquipSetInfoDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.SetID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.ItemId = reader.ReadInt32();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<EquipShopDefine> _EquipShopDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<EquipShopDefine> EquipShopDefineDeserializeHandler
		{
			get
			{
				if (_EquipShopDefineDeserializeHandler == null )
				{
					_EquipShopDefineDeserializeHandler = new tabtoy.DeserializeHandler<EquipShopDefine>(Deserialize);
				}
				return _EquipShopDefineDeserializeHandler;
			}
		}
		public static void Deserialize( EquipShopDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Index = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.DrawTimes = reader.ReadInt32();
                	}
                	break; 
                	case 0x90002:
                	{
						ins.Price = reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler);
                	}
                	break; 
                	case 0x90003:
                	{
						ins.Pool.Add( reader.ReadStruct<RandomEquip>(RandomEquipDeserializeHandler) );
                	}
                	break; 
                	case 0x10004:
                	{
						ins.FloorID = reader.ReadInt32();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<EquipShopFloorDefine> _EquipShopFloorDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<EquipShopFloorDefine> EquipShopFloorDefineDeserializeHandler
		{
			get
			{
				if (_EquipShopFloorDefineDeserializeHandler == null )
				{
					_EquipShopFloorDefineDeserializeHandler = new tabtoy.DeserializeHandler<EquipShopFloorDefine>(Deserialize);
				}
				return _EquipShopFloorDefineDeserializeHandler;
			}
		}
		public static void Deserialize( EquipShopFloorDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.FloorID = reader.ReadInt32();
                	}
                	break; 
                	case 0x80001:
                	{
						ins.Floors = reader.ReadEnum<NewEquipQualityType>();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.FloorsNumber = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.FloorsSet = reader.ReadInt32();
                	}
                	break; 
                	case 0x80004:
                	{
						ins.SecondFloors = reader.ReadEnum<NewEquipQualityType>();
                	}
                	break; 
                	case 0x80005:
                	{
						ins.SerialType = reader.ReadEnum<SpecialEquipSerialType>();
                	}
                	break; 
                	case 0x10006:
                	{
						ins.SecondFloorsNumber = reader.ReadInt32();
                	}
                	break; 
                	case 0x10007:
                	{
						ins.SecondFloorsSet = reader.ReadInt32();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<EquipTypeDefine> _EquipTypeDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<EquipTypeDefine> EquipTypeDefineDeserializeHandler
		{
			get
			{
				if (_EquipTypeDefineDeserializeHandler == null )
				{
					_EquipTypeDefineDeserializeHandler = new tabtoy.DeserializeHandler<EquipTypeDefine>(Deserialize);
				}
				return _EquipTypeDefineDeserializeHandler;
			}
		}
		public static void Deserialize( EquipTypeDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Type = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Name = reader.ReadString();
                	}
                	break; 
                	case 0x80002:
                	{
						ins.Location = reader.ReadEnum<EquipLocation>();
                	}
                	break; 
                	case 0x80003:
                	{
						ins.BaseAttributeType = reader.ReadEnum<AttributeType>();
                	}
                	break; 
                	case 0x80004:
                	{
						ins.SerialType = reader.ReadEnum<SpecialEquipSerialType>();
                	}
                	break; 
                	case 0x50005:
                	{
						ins.BaseAttributeValue.Add( reader.ReadFloat() );
                	}
                	break; 
                	case 0x10006:
                	{
						ins.QualitySkill.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x80007:
                	{
						ins.AuxiliaryType = reader.ReadEnum<AttributeType>();
                	}
                	break; 
                	case 0x50008:
                	{
						ins.Auxiliary = reader.ReadFloat();
                	}
                	break; 
                	case 0x80009:
                	{
						ins.RareType = reader.ReadEnum<AttributeType>();
                	}
                	break; 
                	case 0x5000a:
                	{
						ins.Rare = reader.ReadFloat();
                	}
                	break; 
                	case 0x8000b:
                	{
						ins.EpicType = reader.ReadEnum<AttributeType>();
                	}
                	break; 
                	case 0x5000c:
                	{
						ins.Epic = reader.ReadFloat();
                	}
                	break; 
                	case 0x8000d:
                	{
						ins.LegendaryType = reader.ReadEnum<AttributeType>();
                	}
                	break; 
                	case 0x5000e:
                	{
						ins.Legendary = reader.ReadFloat();
                	}
                	break; 
                	case 0x8000f:
                	{
						ins.MythicType = reader.ReadEnum<AttributeType>();
                	}
                	break; 
                	case 0x50010:
                	{
						ins.Mythic = reader.ReadFloat();
                	}
                	break; 
                	case 0x60011:
                	{
						ins.TipsData = reader.ReadString();
                	}
                	break; 
                	case 0x90012:
                	{
						ins.LocalTipsData = reader.ReadStruct<LocalItem>(LocalItemDeserializeHandler);
                	}
                	break; 
                	case 0x60013:
                	{
						ins.TipsMsg = reader.ReadString();
                	}
                	break; 
                	case 0x90014:
                	{
						ins.LocalTipsMsg = reader.ReadStruct<LocalItem>(LocalItemDeserializeHandler);
                	}
                	break; 
                	case 0x60015:
                	{
						ins.AuxiliaryMsg = reader.ReadString();
                	}
                	break; 
                	case 0x90016:
                	{
						ins.LocalAuxiliaryMsg = reader.ReadStruct<LocalItem>(LocalItemDeserializeHandler);
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<GeneralDefine> _GeneralDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<GeneralDefine> GeneralDefineDeserializeHandler
		{
			get
			{
				if (_GeneralDefineDeserializeHandler == null )
				{
					_GeneralDefineDeserializeHandler = new tabtoy.DeserializeHandler<GeneralDefine>(Deserialize);
				}
				return _GeneralDefineDeserializeHandler;
			}
		}
		public static void Deserialize( GeneralDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x80000:
                	{
						ins.General_Type = reader.ReadEnum<GeneralType>();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.String_Arg0 = reader.ReadString();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.String_Arg1 = reader.ReadString();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.String_Arg2 = reader.ReadString();
                	}
                	break; 
                	case 0x60004:
                	{
						ins.String_Arg3 = reader.ReadString();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.Int_Arg0 = reader.ReadInt32();
                	}
                	break; 
                	case 0x10006:
                	{
						ins.Int_Arg1 = reader.ReadInt32();
                	}
                	break; 
                	case 0x10007:
                	{
						ins.Int_Arg2 = reader.ReadInt32();
                	}
                	break; 
                	case 0x10008:
                	{
						ins.Int_Arg3 = reader.ReadInt32();
                	}
                	break; 
                	case 0x10009:
                	{
						ins.Int_Arg4 = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000a:
                	{
						ins.Int_Arg5 = reader.ReadInt32();
                	}
                	break; 
                	case 0x5000b:
                	{
						ins.Float_Arg0 = reader.ReadFloat();
                	}
                	break; 
                	case 0x5000c:
                	{
						ins.Float_Arg1 = reader.ReadFloat();
                	}
                	break; 
                	case 0x5000d:
                	{
						ins.Float_Arg2 = reader.ReadFloat();
                	}
                	break; 
                	case 0x9000e:
                	{
						ins.RangeFloat_Arg0 = reader.ReadStruct<RangeFloatValue>(RangeFloatValueDeserializeHandler);
                	}
                	break; 
                	case 0x9000f:
                	{
						ins.RangeFloat_Arg1 = reader.ReadStruct<RangeFloatValue>(RangeFloatValueDeserializeHandler);
                	}
                	break; 
                	case 0x90010:
                	{
						ins.RangeInt_Arg0 = reader.ReadStruct<RangeIntValue>(RangeIntValueDeserializeHandler);
                	}
                	break; 
                	case 0x90011:
                	{
						ins.RangeInt_Arg1 = reader.ReadStruct<RangeIntValue>(RangeIntValueDeserializeHandler);
                	}
                	break; 
                	case 0x90012:
                	{
						ins.RangeInt_Arg2 = reader.ReadStruct<RangeIntValue>(RangeIntValueDeserializeHandler);
                	}
                	break; 
                	case 0x90013:
                	{
						ins.RangeInt_Arg3 = reader.ReadStruct<RangeIntValue>(RangeIntValueDeserializeHandler);
                	}
                	break; 
                	case 0x90014:
                	{
						ins.RangeInt_Arg4 = reader.ReadStruct<RangeIntValue>(RangeIntValueDeserializeHandler);
                	}
                	break; 
                	case 0x90015:
                	{
						ins.RewardList_Arg0.Add( reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler) );
                	}
                	break; 
                	case 0x90016:
                	{
						ins.RewardList_Arg1.Add( reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler) );
                	}
                	break; 
                	case 0x90017:
                	{
						ins.RewardList_Arg2.Add( reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler) );
                	}
                	break; 
                	case 0x90018:
                	{
						ins.sprite_Arg0 = reader.ReadStruct<AtlasStructure>(AtlasStructureDeserializeHandler);
                	}
                	break; 
                	case 0x90019:
                	{
						ins.sprite_Arg1 = reader.ReadStruct<AtlasStructure>(AtlasStructureDeserializeHandler);
                	}
                	break; 
                	case 0x9001a:
                	{
						ins.sprite_Arg2 = reader.ReadStruct<AtlasStructure>(AtlasStructureDeserializeHandler);
                	}
                	break; 
                	case 0x5001b:
                	{
						ins.FloatList_Arg0.Add( reader.ReadFloat() );
                	}
                	break; 
                	case 0x5001c:
                	{
						ins.floatList_Arg1.Add( reader.ReadFloat() );
                	}
                	break; 
                	case 0x5001d:
                	{
						ins.floatList_Arg2.Add( reader.ReadFloat() );
                	}
                	break; 
                	case 0x5001e:
                	{
						ins.floatList_Arg3.Add( reader.ReadFloat() );
                	}
                	break; 
                	case 0x5001f:
                	{
						ins.floatList_Arg4.Add( reader.ReadFloat() );
                	}
                	break; 
                	case 0x90020:
                	{
						ins.myVectory3.Add( reader.ReadStruct<GlobalsVector3>(GlobalsVector3DeserializeHandler) );
                	}
                	break; 
                	case 0x10021:
                	{
						ins.IntList_Arg0.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x10022:
                	{
						ins.IntList_Arg1.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x60023:
                	{
						ins.stringList_Arg0.Add( reader.ReadString() );
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<HeroAwakeDefine> _HeroAwakeDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<HeroAwakeDefine> HeroAwakeDefineDeserializeHandler
		{
			get
			{
				if (_HeroAwakeDefineDeserializeHandler == null )
				{
					_HeroAwakeDefineDeserializeHandler = new tabtoy.DeserializeHandler<HeroAwakeDefine>(Deserialize);
				}
				return _HeroAwakeDefineDeserializeHandler;
			}
		}
		public static void Deserialize( HeroAwakeDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.HeroID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.AwakeLevel = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.RequireHeroLevel = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.MaxLevel = reader.ReadInt32();
                	}
                	break; 
                	case 0x90004:
                	{
						ins.Consume.Add( reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler) );
                	}
                	break; 
                	case 0x10005:
                	{
						ins.FinalSkillID = reader.ReadInt32();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<HeroCharactersDefine> _HeroCharactersDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<HeroCharactersDefine> HeroCharactersDefineDeserializeHandler
		{
			get
			{
				if (_HeroCharactersDefineDeserializeHandler == null )
				{
					_HeroCharactersDefineDeserializeHandler = new tabtoy.DeserializeHandler<HeroCharactersDefine>(Deserialize);
				}
				return _HeroCharactersDefineDeserializeHandler;
			}
		}
		public static void Deserialize( HeroCharactersDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x80001:
                	{
						ins.QualityType = reader.ReadEnum<RoleQualityType>();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.Name = reader.ReadString();
                	}
                	break; 
                	case 0x90003:
                	{
						ins.LocalName = reader.ReadStruct<LocalItem>(LocalItemDeserializeHandler);
                	}
                	break; 
                	case 0x90004:
                	{
						ins.LocalDescription = reader.ReadStruct<LocalItem>(LocalItemDeserializeHandler);
                	}
                	break; 
                	case 0x90005:
                	{
						ins.LocalJumpTips = reader.ReadStruct<LocalItem>(LocalItemDeserializeHandler);
                	}
                	break; 
                	case 0x10006:
                	{
						ins.Order = reader.ReadInt32();
                	}
                	break; 
                	case 0x10007:
                	{
						ins.Shard = reader.ReadInt32();
                	}
                	break; 
                	case 0x10008:
                	{
						ins.MaxLevel = reader.ReadInt32();
                	}
                	break; 
                	case 0x10009:
                	{
						ins.ShopID = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000a:
                	{
						ins.UnlockConsumePuzzle = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000b:
                	{
						ins.UnlockLvl.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x1000c:
                	{
						ins.LvProperty.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x9000d:
                	{
						ins.HeadImage = reader.ReadStruct<AtlasStructure>(AtlasStructureDeserializeHandler);
                	}
                	break; 
                	case 0x6000e:
                	{
						ins.SpinePath = reader.ReadString();
                	}
                	break; 
                	case 0x6000f:
                	{
						ins.MenuSpinePath = reader.ReadString();
                	}
                	break; 
                	case 0x90010:
                	{
						ins.PuzzleImage = reader.ReadStruct<AtlasStructure>(AtlasStructureDeserializeHandler);
                	}
                	break; 
                	case 0x60011:
                	{
						ins.StartDrawAudio = reader.ReadString();
                	}
                	break; 
                	case 0x60012:
                	{
						ins.SuperSkillSplash = reader.ReadString();
                	}
                	break; 
                	case 0x60013:
                	{
						ins.SuperSkillSplashSkin = reader.ReadString();
                	}
                	break; 
                	case 0x90014:
                	{
						ins.RankingBg = reader.ReadStruct<AtlasStructure>(AtlasStructureDeserializeHandler);
                	}
                	break; 
                	case 0x90015:
                	{
						ins.ShopBg = reader.ReadStruct<AtlasStructure>(AtlasStructureDeserializeHandler);
                	}
                	break; 
                	case 0x60016:
                	{
						ins.ShopBgSprite = reader.ReadString();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<HeroLevelDefine> _HeroLevelDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<HeroLevelDefine> HeroLevelDefineDeserializeHandler
		{
			get
			{
				if (_HeroLevelDefineDeserializeHandler == null )
				{
					_HeroLevelDefineDeserializeHandler = new tabtoy.DeserializeHandler<HeroLevelDefine>(Deserialize);
				}
				return _HeroLevelDefineDeserializeHandler;
			}
		}
		public static void Deserialize( HeroLevelDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Level = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.Hp = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.Power = reader.ReadInt32();
                	}
                	break; 
                	case 0x50004:
                	{
						ins.BaseProperty = reader.ReadFloat();
                	}
                	break; 
                	case 0x50005:
                	{
						ins.EquipmentMultiplier = reader.ReadFloat();
                	}
                	break; 
                	case 0x50006:
                	{
						ins.HPRecoverPerLevelUp = reader.ReadFloat();
                	}
                	break; 
                	case 0x10007:
                	{
						ins.Atk = reader.ReadInt32();
                	}
                	break; 
                	case 0x50008:
                	{
						ins.CritChance = reader.ReadFloat();
                	}
                	break; 
                	case 0x50009:
                	{
						ins.CritDamage = reader.ReadFloat();
                	}
                	break; 
                	case 0x5000a:
                	{
						ins.Evasion = reader.ReadFloat();
                	}
                	break; 
                	case 0x5000b:
                	{
						ins.MoveSpeed = reader.ReadFloat();
                	}
                	break; 
                	case 0x5000c:
                	{
						ins.AllDamageReduction = reader.ReadFloat();
                	}
                	break; 
                	case 0x5000d:
                	{
						ins.ShortDamageReduction = reader.ReadFloat();
                	}
                	break; 
                	case 0x5000e:
                	{
						ins.LongDamageReduction = reader.ReadFloat();
                	}
                	break; 
                	case 0x5000f:
                	{
						ins.BossDamageReduction = reader.ReadFloat();
                	}
                	break; 
                	case 0x50010:
                	{
						ins.ShortDamageBonus = reader.ReadFloat();
                	}
                	break; 
                	case 0x50011:
                	{
						ins.LongDamageBonus = reader.ReadFloat();
                	}
                	break; 
                	case 0x50012:
                	{
						ins.BossDamageBonus = reader.ReadFloat();
                	}
                	break; 
                	case 0x50013:
                	{
						ins.AllDamageBonus = reader.ReadFloat();
                	}
                	break; 
                	case 0x50014:
                	{
						ins.RecoveryRatio = reader.ReadFloat();
                	}
                	break; 
                	case 0x50015:
                	{
						ins.PowerCostPerDistance = reader.ReadFloat();
                	}
                	break; 
                	case 0x50016:
                	{
						ins.PowerCostWhenStart = reader.ReadFloat();
                	}
                	break; 
                	case 0x50017:
                	{
						ins.PowerCostPerSecond = reader.ReadFloat();
                	}
                	break; 
                	case 0x50018:
                	{
						ins.PowerRecoverSpeed = reader.ReadFloat();
                	}
                	break; 
                	case 0x50019:
                	{
						ins.OneHitKill = reader.ReadFloat();
                	}
                	break; 
                	case 0x9001a:
                	{
						ins.LevelUpConsume.Add( reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler) );
                	}
                	break; 
                	case 0x1001b:
                	{
						ins.ExSkillPowerNeed = reader.ReadInt32();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<HeroLevelInStageDefine> _HeroLevelInStageDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<HeroLevelInStageDefine> HeroLevelInStageDefineDeserializeHandler
		{
			get
			{
				if (_HeroLevelInStageDefineDeserializeHandler == null )
				{
					_HeroLevelInStageDefineDeserializeHandler = new tabtoy.DeserializeHandler<HeroLevelInStageDefine>(Deserialize);
				}
				return _HeroLevelInStageDefineDeserializeHandler;
			}
		}
		public static void Deserialize( HeroLevelInStageDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Level = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.ExpNeed = reader.ReadInt32();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<HighGrowthFundDefine> _HighGrowthFundDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<HighGrowthFundDefine> HighGrowthFundDefineDeserializeHandler
		{
			get
			{
				if (_HighGrowthFundDefineDeserializeHandler == null )
				{
					_HighGrowthFundDefineDeserializeHandler = new tabtoy.DeserializeHandler<HighGrowthFundDefine>(Deserialize);
				}
				return _HighGrowthFundDefineDeserializeHandler;
			}
		}
		public static void Deserialize( HighGrowthFundDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.ChapterID = reader.ReadInt32();
                	}
                	break; 
                	case 0x90002:
                	{
						ins.FreeReward = reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler);
                	}
                	break; 
                	case 0x90003:
                	{
						ins.NormalReward = reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler);
                	}
                	break; 
                	case 0x90004:
                	{
						ins.HighReward = reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler);
                	}
                	break; 
                	case 0x90005:
                	{
						ins.LocalSystem = reader.ReadStruct<LocalItem>(LocalItemDeserializeHandler);
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<ItemDefine> _ItemDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<ItemDefine> ItemDefineDeserializeHandler
		{
			get
			{
				if (_ItemDefineDeserializeHandler == null )
				{
					_ItemDefineDeserializeHandler = new tabtoy.DeserializeHandler<ItemDefine>(Deserialize);
				}
				return _ItemDefineDeserializeHandler;
			}
		}
		public static void Deserialize( ItemDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Id = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Name = reader.ReadString();
                	}
                	break; 
                	case 0x90002:
                	{
						ins.LocalName = reader.ReadStruct<LocalItem>(LocalItemDeserializeHandler);
                	}
                	break; 
                	case 0x60003:
                	{
						ins.Description = reader.ReadString();
                	}
                	break; 
                	case 0x90004:
                	{
						ins.LocalDescription = reader.ReadStruct<LocalItem>(LocalItemDeserializeHandler);
                	}
                	break; 
                	case 0x80005:
                	{
						ins.ItemTypeID = reader.ReadEnum<ItemType>();
                	}
                	break; 
                	case 0x90006:
                	{
						ins.icon = reader.ReadStruct<AtlasStructure>(AtlasStructureDeserializeHandler);
                	}
                	break; 
                	case 0x90007:
                	{
						ins.lootIcon = reader.ReadStruct<AtlasStructure>(AtlasStructureDeserializeHandler);
                	}
                	break; 
                	case 0x80008:
                	{
						ins.SerialType = reader.ReadEnum<SpecialEquipSerialType>();
                	}
                	break; 
                	case 0x80009:
                	{
						ins.Quality = reader.ReadEnum<NewEquipQualityType>();
                	}
                	break; 
                	case 0x1000a:
                	{
						ins.MapID = reader.ReadInt32();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<ItemSetDefine> _ItemSetDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<ItemSetDefine> ItemSetDefineDeserializeHandler
		{
			get
			{
				if (_ItemSetDefineDeserializeHandler == null )
				{
					_ItemSetDefineDeserializeHandler = new tabtoy.DeserializeHandler<ItemSetDefine>(Deserialize);
				}
				return _ItemSetDefineDeserializeHandler;
			}
		}
		public static void Deserialize( ItemSetDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.SetID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.ItemID = reader.ReadInt32();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<ItemSetInfoDefine> _ItemSetInfoDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<ItemSetInfoDefine> ItemSetInfoDefineDeserializeHandler
		{
			get
			{
				if (_ItemSetInfoDefineDeserializeHandler == null )
				{
					_ItemSetInfoDefineDeserializeHandler = new tabtoy.DeserializeHandler<ItemSetInfoDefine>(Deserialize);
				}
				return _ItemSetInfoDefineDeserializeHandler;
			}
		}
		public static void Deserialize( ItemSetInfoDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.SetID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.ItemId = reader.ReadInt32();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<LocalizationDefine> _LocalizationDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<LocalizationDefine> LocalizationDefineDeserializeHandler
		{
			get
			{
				if (_LocalizationDefineDeserializeHandler == null )
				{
					_LocalizationDefineDeserializeHandler = new tabtoy.DeserializeHandler<LocalizationDefine>(Deserialize);
				}
				return _LocalizationDefineDeserializeHandler;
			}
		}
		public static void Deserialize( LocalizationDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x80000:
                	{
						ins.Module = reader.ReadEnum<FunctionType>();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Order = reader.ReadInt32();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.Chinese = reader.ReadString();
                	}
                	break; 
                	case 0x90003:
                	{
						ins.ChineseKeyValue.Add( reader.ReadStruct<KeyInt_ValueString>(KeyInt_ValueStringDeserializeHandler) );
                	}
                	break; 
                	case 0x60004:
                	{
						ins.ChineseStrings.Add( reader.ReadString() );
                	}
                	break; 
                	case 0x60005:
                	{
						ins.English = reader.ReadString();
                	}
                	break; 
                	case 0x90006:
                	{
						ins.EnglishKeyValue.Add( reader.ReadStruct<KeyInt_ValueString>(KeyInt_ValueStringDeserializeHandler) );
                	}
                	break; 
                	case 0x60007:
                	{
						ins.EnglishStrings.Add( reader.ReadString() );
                	}
                	break; 
                	case 0x60008:
                	{
						ins.ChineseTraditional = reader.ReadString();
                	}
                	break; 
                	case 0x90009:
                	{
						ins.ChineseTraditionalKeyValue.Add( reader.ReadStruct<KeyInt_ValueString>(KeyInt_ValueStringDeserializeHandler) );
                	}
                	break; 
                	case 0x6000a:
                	{
						ins.ChineseTraditionalStrings.Add( reader.ReadString() );
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<LootOnlyInCombatDefine> _LootOnlyInCombatDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<LootOnlyInCombatDefine> LootOnlyInCombatDefineDeserializeHandler
		{
			get
			{
				if (_LootOnlyInCombatDefineDeserializeHandler == null )
				{
					_LootOnlyInCombatDefineDeserializeHandler = new tabtoy.DeserializeHandler<LootOnlyInCombatDefine>(Deserialize);
				}
				return _LootOnlyInCombatDefineDeserializeHandler;
			}
		}
		public static void Deserialize( LootOnlyInCombatDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Id = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Name = reader.ReadString();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.PrefabPath = reader.ReadString();
                	}
                	break; 
                	case 0x50003:
                	{
						ins.ExistDuration = reader.ReadFloat();
                	}
                	break; 
                	case 0x50004:
                	{
						ins.FloatArg0 = reader.ReadFloat();
                	}
                	break; 
                	case 0x50005:
                	{
						ins.FloatArg1 = reader.ReadFloat();
                	}
                	break; 
                	case 0x10006:
                	{
						ins.IntArg0 = reader.ReadInt32();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<MapObjectDefine> _MapObjectDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<MapObjectDefine> MapObjectDefineDeserializeHandler
		{
			get
			{
				if (_MapObjectDefineDeserializeHandler == null )
				{
					_MapObjectDefineDeserializeHandler = new tabtoy.DeserializeHandler<MapObjectDefine>(Deserialize);
				}
				return _MapObjectDefineDeserializeHandler;
			}
		}
		public static void Deserialize( MapObjectDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Name = reader.ReadString();
                	}
                	break; 
                	case 0x70002:
                	{
						ins.Invincible = reader.ReadBool();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.Health = reader.ReadInt32();
                	}
                	break; 
                	case 0x60004:
                	{
						ins.PrefabPath = reader.ReadString();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.Atk = reader.ReadInt32();
                	}
                	break; 
                	case 0x50006:
                	{
						ins.FloatArg0 = reader.ReadFloat();
                	}
                	break; 
                	case 0x50007:
                	{
						ins.FloatArg1 = reader.ReadFloat();
                	}
                	break; 
                	case 0x10008:
                	{
						ins.IntArg0 = reader.ReadInt32();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<MapRandomPoolDefine> _MapRandomPoolDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<MapRandomPoolDefine> MapRandomPoolDefineDeserializeHandler
		{
			get
			{
				if (_MapRandomPoolDefineDeserializeHandler == null )
				{
					_MapRandomPoolDefineDeserializeHandler = new tabtoy.DeserializeHandler<MapRandomPoolDefine>(Deserialize);
				}
				return _MapRandomPoolDefineDeserializeHandler;
			}
		}
		public static void Deserialize( MapRandomPoolDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.index = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.MapPaths.Add( reader.ReadString() );
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<MapTapeDefine> _MapTapeDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<MapTapeDefine> MapTapeDefineDeserializeHandler
		{
			get
			{
				if (_MapTapeDefineDeserializeHandler == null )
				{
					_MapTapeDefineDeserializeHandler = new tabtoy.DeserializeHandler<MapTapeDefine>(Deserialize);
				}
				return _MapTapeDefineDeserializeHandler;
			}
		}
		public static void Deserialize( MapTapeDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Chapter = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Stage = reader.ReadInt32();
                	}
                	break; 
                	case 0x90002:
                	{
						ins.LoacalName = reader.ReadStruct<LocalItem>(LocalItemDeserializeHandler);
                	}
                	break; 
                	case 0x90003:
                	{
						ins.LoacalName2 = reader.ReadStruct<LocalItem>(LocalItemDeserializeHandler);
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<ModuleConfigDefine> _ModuleConfigDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<ModuleConfigDefine> ModuleConfigDefineDeserializeHandler
		{
			get
			{
				if (_ModuleConfigDefineDeserializeHandler == null )
				{
					_ModuleConfigDefineDeserializeHandler = new tabtoy.DeserializeHandler<ModuleConfigDefine>(Deserialize);
				}
				return _ModuleConfigDefineDeserializeHandler;
			}
		}
		public static void Deserialize( ModuleConfigDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x80000:
                	{
						ins.ModuleType = reader.ReadEnum<UIModuleType>();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.UnlockChapter = reader.ReadInt32();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.prefabPath = reader.ReadString();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.TitlePath = reader.ReadString();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<NormalGrowthFundDefine> _NormalGrowthFundDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<NormalGrowthFundDefine> NormalGrowthFundDefineDeserializeHandler
		{
			get
			{
				if (_NormalGrowthFundDefineDeserializeHandler == null )
				{
					_NormalGrowthFundDefineDeserializeHandler = new tabtoy.DeserializeHandler<NormalGrowthFundDefine>(Deserialize);
				}
				return _NormalGrowthFundDefineDeserializeHandler;
			}
		}
		public static void Deserialize( NormalGrowthFundDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.ChapterID = reader.ReadInt32();
                	}
                	break; 
                	case 0x90002:
                	{
						ins.FreeReward = reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler);
                	}
                	break; 
                	case 0x90003:
                	{
						ins.NormalReward = reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler);
                	}
                	break; 
                	case 0x90004:
                	{
						ins.HighReward = reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler);
                	}
                	break; 
                	case 0x90005:
                	{
						ins.LocalSystem = reader.ReadStruct<LocalItem>(LocalItemDeserializeHandler);
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<SkillInSale> _SkillInSaleDeserializeHandler;
		static tabtoy.DeserializeHandler<SkillInSale> SkillInSaleDeserializeHandler
		{
			get
			{
				if (_SkillInSaleDeserializeHandler == null )
				{
					_SkillInSaleDeserializeHandler = new tabtoy.DeserializeHandler<SkillInSale>(Deserialize);
				}
				return _SkillInSaleDeserializeHandler;
			}
		}
		public static void Deserialize( SkillInSale ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.skill = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.price = reader.ReadInt32();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<NPCDefine> _NPCDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<NPCDefine> NPCDefineDeserializeHandler
		{
			get
			{
				if (_NPCDefineDeserializeHandler == null )
				{
					_NPCDefineDeserializeHandler = new tabtoy.DeserializeHandler<NPCDefine>(Deserialize);
				}
				return _NPCDefineDeserializeHandler;
			}
		}
		public static void Deserialize( NPCDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x80000:
                	{
						ins.ID = reader.ReadEnum<NPCType>();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Name = reader.ReadString();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.SkillsID.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x90003:
                	{
						ins.SkillsInSale.Add( reader.ReadStruct<SkillInSale>(SkillInSaleDeserializeHandler) );
                	}
                	break; 
                	case 0x60004:
                	{
						ins.SpinePath = reader.ReadString();
                	}
                	break; 
                	case 0x60005:
                	{
						ins.PrefabPath = reader.ReadString();
                	}
                	break; 
                	case 0x90006:
                	{
						ins.icon = reader.ReadStruct<AtlasStructure>(AtlasStructureDeserializeHandler);
                	}
                	break; 
                	case 0x50007:
                	{
						ins.FloatArg0 = reader.ReadFloat();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<OfflineDefine> _OfflineDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<OfflineDefine> OfflineDefineDeserializeHandler
		{
			get
			{
				if (_OfflineDefineDeserializeHandler == null )
				{
					_OfflineDefineDeserializeHandler = new tabtoy.DeserializeHandler<OfflineDefine>(Deserialize);
				}
				return _OfflineDefineDeserializeHandler;
			}
		}
		public static void Deserialize( OfflineDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Chapter = reader.ReadInt32();
                	}
                	break; 
                	case 0x90001:
                	{
						ins.BaseRewards.Add( reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler) );
                	}
                	break; 
                	case 0x10002:
                	{
						ins.BaseCycle = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.MaxBaseCycle = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.Cycle = reader.ReadInt32();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.MaxCycle = reader.ReadInt32();
                	}
                	break; 
                	case 0x90006:
                	{
						ins.RandomItems.Add( reader.ReadStruct<RandomItem>(RandomItemDeserializeHandler) );
                	}
                	break; 
                	case 0x90007:
                	{
						ins.ItemSetIndex.Add( reader.ReadStruct<RandomItemSet>(RandomItemSetDeserializeHandler) );
                	}
                	break; 
                	case 0x90008:
                	{
						ins.EquipSetIndex.Add( reader.ReadStruct<RandomEquip>(RandomEquipDeserializeHandler) );
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<PassRewardDefine> _PassRewardDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<PassRewardDefine> PassRewardDefineDeserializeHandler
		{
			get
			{
				if (_PassRewardDefineDeserializeHandler == null )
				{
					_PassRewardDefineDeserializeHandler = new tabtoy.DeserializeHandler<PassRewardDefine>(Deserialize);
				}
				return _PassRewardDefineDeserializeHandler;
			}
		}
		public static void Deserialize( PassRewardDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Cycle = reader.ReadInt32();
                	}
                	break; 
                	case 0x80001:
                	{
						ins.PassType = reader.ReadEnum<PassType>();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.Level = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.ExpRequire = reader.ReadInt32();
                	}
                	break; 
                	case 0x90004:
                	{
						ins.Reward.Add( reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler) );
                	}
                	break; 
                	case 0x90005:
                	{
						ins.ItemSetIndex.Add( reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler) );
                	}
                	break; 
                	case 0x90006:
                	{
						ins.EquipPool.Add( reader.ReadStruct<RandomEquip>(RandomEquipDeserializeHandler) );
                	}
                	break; 
                	case 0x10007:
                	{
						ins.CoinSeconds = reader.ReadInt32();
                	}
                	break; 
                	case 0x10008:
                	{
						ins.Strength = reader.ReadInt32();
                	}
                	break; 
                	case 0x90009:
                	{
						ins.SeasonName = reader.ReadStruct<LocalItem>(LocalItemDeserializeHandler);
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<PiggyBankDefine> _PiggyBankDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<PiggyBankDefine> PiggyBankDefineDeserializeHandler
		{
			get
			{
				if (_PiggyBankDefineDeserializeHandler == null )
				{
					_PiggyBankDefineDeserializeHandler = new tabtoy.DeserializeHandler<PiggyBankDefine>(Deserialize);
				}
				return _PiggyBankDefineDeserializeHandler;
			}
		}
		public static void Deserialize( PiggyBankDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Cycle = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Require = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.ShopID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.Name = reader.ReadString();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.InitDiamond = reader.ReadInt32();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.FullDiamond = reader.ReadInt32();
                	}
                	break; 
                	case 0x50006:
                	{
						ins.Ratio = reader.ReadFloat();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<RankDefine> _RankDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<RankDefine> RankDefineDeserializeHandler
		{
			get
			{
				if (_RankDefineDeserializeHandler == null )
				{
					_RankDefineDeserializeHandler = new tabtoy.DeserializeHandler<RankDefine>(Deserialize);
				}
				return _RankDefineDeserializeHandler;
			}
		}
		public static void Deserialize( RankDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.RankRewardID = reader.ReadInt32();
                	}
                	break; 
                	case 0x80001:
                	{
						ins.RankType = reader.ReadEnum<RankType>();
                	}
                	break; 
                	case 0x50002:
                	{
						ins.RankValue = reader.ReadFloat();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.Msg = reader.ReadString();
                	}
                	break; 
                	case 0x90004:
                	{
						ins.SelfRewards.Add( reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler) );
                	}
                	break; 
                	case 0x90005:
                	{
						ins.Rewards.Add( reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler) );
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<RedDotDefine> _RedDotDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<RedDotDefine> RedDotDefineDeserializeHandler
		{
			get
			{
				if (_RedDotDefineDeserializeHandler == null )
				{
					_RedDotDefineDeserializeHandler = new tabtoy.DeserializeHandler<RedDotDefine>(Deserialize);
				}
				return _RedDotDefineDeserializeHandler;
			}
		}
		public static void Deserialize( RedDotDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.moduleID = reader.ReadInt32();
                	}
                	break; 
                	case 0x80001:
                	{
						ins.moduleType = reader.ReadEnum<ModuleType>();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.path = reader.ReadString();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<RetailSkillsDefine> _RetailSkillsDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<RetailSkillsDefine> RetailSkillsDefineDeserializeHandler
		{
			get
			{
				if (_RetailSkillsDefineDeserializeHandler == null )
				{
					_RetailSkillsDefineDeserializeHandler = new tabtoy.DeserializeHandler<RetailSkillsDefine>(Deserialize);
				}
				return _RetailSkillsDefineDeserializeHandler;
			}
		}
		public static void Deserialize( RetailSkillsDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.SkillID = reader.ReadInt32();
                	}
                	break; 
                	case 0x90001:
                	{
						ins.SkillPrice.Add( reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler) );
                	}
                	break; 
                	case 0x60002:
                	{
						ins.SkillName = reader.ReadString();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.SkillDes = reader.ReadString();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<SevenDayEventExpBarDefine> _SevenDayEventExpBarDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<SevenDayEventExpBarDefine> SevenDayEventExpBarDefineDeserializeHandler
		{
			get
			{
				if (_SevenDayEventExpBarDefineDeserializeHandler == null )
				{
					_SevenDayEventExpBarDefineDeserializeHandler = new tabtoy.DeserializeHandler<SevenDayEventExpBarDefine>(Deserialize);
				}
				return _SevenDayEventExpBarDefineDeserializeHandler;
			}
		}
		public static void Deserialize( SevenDayEventExpBarDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Id = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.ENeed = reader.ReadInt32();
                	}
                	break; 
                	case 0x90002:
                	{
						ins.RewardItems.Add( reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler) );
                	}
                	break; 
                	case 0x90003:
                	{
						ins.Equips.Add( reader.ReadStruct<EquipReward>(EquipRewardDeserializeHandler) );
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<SevenDayEventTaskDefine> _SevenDayEventTaskDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<SevenDayEventTaskDefine> SevenDayEventTaskDefineDeserializeHandler
		{
			get
			{
				if (_SevenDayEventTaskDefineDeserializeHandler == null )
				{
					_SevenDayEventTaskDefineDeserializeHandler = new tabtoy.DeserializeHandler<SevenDayEventTaskDefine>(Deserialize);
				}
				return _SevenDayEventTaskDefineDeserializeHandler;
			}
		}
		public static void Deserialize( SevenDayEventTaskDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Id = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Day = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.ENeed = reader.ReadInt32();
                	}
                	break; 
                	case 0x90003:
                	{
						ins.RewardItems.Add( reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler) );
                	}
                	break; 
                	case 0x80004:
                	{
						ins.TaskType = reader.ReadEnum<SevenDayTaskType>();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.Require = reader.ReadInt32();
                	}
                	break; 
                	case 0x10006:
                	{
						ins.RequireEx = reader.ReadInt32();
                	}
                	break; 
                	case 0x80007:
                	{
						ins.EquipQuality = reader.ReadEnum<NewEquipQualityType>();
                	}
                	break; 
                	case 0x60008:
                	{
						ins.Description = reader.ReadString();
                	}
                	break; 
                	case 0x90009:
                	{
						ins.LocalDescription = reader.ReadStruct<LocalItem>(LocalItemDeserializeHandler);
                	}
                	break; 
                	case 0x6000a:
                	{
						ins.TargetUI = reader.ReadString();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<SevenDaySignInDefine> _SevenDaySignInDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<SevenDaySignInDefine> SevenDaySignInDefineDeserializeHandler
		{
			get
			{
				if (_SevenDaySignInDefineDeserializeHandler == null )
				{
					_SevenDaySignInDefineDeserializeHandler = new tabtoy.DeserializeHandler<SevenDaySignInDefine>(Deserialize);
				}
				return _SevenDaySignInDefineDeserializeHandler;
			}
		}
		public static void Deserialize( SevenDaySignInDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x30000:
                	{
						ins.Day = reader.ReadUInt32();
                	}
                	break; 
                	case 0x90001:
                	{
						ins.RewardList.Add( reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler) );
                	}
                	break; 
                	case 0x90002:
                	{
						ins.Equip = reader.ReadStruct<EquipReward>(EquipRewardDeserializeHandler);
                	}
                	break; 
                	case 0x10003:
                	{
						ins.Strength = reader.ReadInt32();
                	}
                	break; 
                	case 0x90004:
                	{
						ins.ItemSetIndex.Add( reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler) );
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<ShopDefine> _ShopDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<ShopDefine> ShopDefineDeserializeHandler
		{
			get
			{
				if (_ShopDefineDeserializeHandler == null )
				{
					_ShopDefineDeserializeHandler = new tabtoy.DeserializeHandler<ShopDefine>(Deserialize);
				}
				return _ShopDefineDeserializeHandler;
			}
		}
		public static void Deserialize( ShopDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ShopIndex = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.StoreID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.ProductName = reader.ReadString();
                	}
                	break; 
                	case 0x80003:
                	{
						ins.ItemType = reader.ReadEnum<ShopItemType>();
                	}
                	break; 
                	case 0x80004:
                	{
						ins.ShopType = reader.ReadEnum<ShopType>();
                	}
                	break; 
                	case 0x60005:
                	{
						ins.GoogleProductId = reader.ReadString();
                	}
                	break; 
                	case 0x60006:
                	{
						ins.AppleProductId = reader.ReadString();
                	}
                	break; 
                	case 0x80007:
                	{
						ins.ProductType = reader.ReadEnum<ProductType>();
                	}
                	break; 
                	case 0x50008:
                	{
						ins.DollarPrice = reader.ReadFloat();
                	}
                	break; 
                	case 0x90009:
                	{
						ins.Price = reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler);
                	}
                	break; 
                	case 0x1000a:
                	{
						ins.OfflineSeconds = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000b:
                	{
						ins.CoolDown = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000c:
                	{
						ins.DailyTimes = reader.ReadInt32();
                	}
                	break; 
                	case 0x9000d:
                	{
						ins.Goods.Add( reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler) );
                	}
                	break; 
                	case 0x9000e:
                	{
						ins.Equips.Add( reader.ReadStruct<EquipReward>(EquipRewardDeserializeHandler) );
                	}
                	break; 
                	case 0x9000f:
                	{
						ins.ItemSetIndex.Add( reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler) );
                	}
                	break; 
                	case 0x10010:
                	{
						ins.EquipIndex = reader.ReadInt32();
                	}
                	break; 
                	case 0x10011:
                	{
						ins.SubIndex = reader.ReadInt32();
                	}
                	break; 
                	case 0x10012:
                	{
						ins.SubDays = reader.ReadInt32();
                	}
                	break; 
                	case 0x10013:
                	{
						ins.FondLevel = reader.ReadInt32();
                	}
                	break; 
                	case 0x10014:
                	{
						ins.FondType = reader.ReadInt32();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<SignInConfigDefine> _SignInConfigDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<SignInConfigDefine> SignInConfigDefineDeserializeHandler
		{
			get
			{
				if (_SignInConfigDefineDeserializeHandler == null )
				{
					_SignInConfigDefineDeserializeHandler = new tabtoy.DeserializeHandler<SignInConfigDefine>(Deserialize);
				}
				return _SignInConfigDefineDeserializeHandler;
			}
		}
		public static void Deserialize( SignInConfigDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x30000:
                	{
						ins.Day = reader.ReadUInt32();
                	}
                	break; 
                	case 0x90001:
                	{
						ins.RewardList.Add( reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler) );
                	}
                	break; 
                	case 0x90002:
                	{
						ins.Equip = reader.ReadStruct<EquipReward>(EquipRewardDeserializeHandler);
                	}
                	break; 
                	case 0x60003:
                	{
						ins.desc = reader.ReadString();
                	}
                	break; 
                	case 0x90004:
                	{
						ins.LocalDesc = reader.ReadStruct<LocalItem>(LocalItemDeserializeHandler);
                	}
                	break; 
                	case 0x10005:
                	{
						ins.itemID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60006:
                	{
						ins.name = reader.ReadString();
                	}
                	break; 
                	case 0x90007:
                	{
						ins.LocalName = reader.ReadStruct<LocalItem>(LocalItemDeserializeHandler);
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<SkillDefine> _SkillDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<SkillDefine> SkillDefineDeserializeHandler
		{
			get
			{
				if (_SkillDefineDeserializeHandler == null )
				{
					_SkillDefineDeserializeHandler = new tabtoy.DeserializeHandler<SkillDefine>(Deserialize);
				}
				return _SkillDefineDeserializeHandler;
			}
		}
		public static void Deserialize( SkillDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.SkillID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.SkillName = reader.ReadString();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.Level = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.ResetID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.NextLvlID = reader.ReadInt32();
                	}
                	break; 
                	case 0x90005:
                	{
						ins.LevelUPConsume.Add( reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler) );
                	}
                	break; 
                	case 0x90006:
                	{
						ins.LocalSkillName = reader.ReadStruct<LocalItem>(LocalItemDeserializeHandler);
                	}
                	break; 
                	case 0x60007:
                	{
						ins.SkillDes = reader.ReadString();
                	}
                	break; 
                	case 0x90008:
                	{
						ins.LocalSkillDes = reader.ReadStruct<LocalItem>(LocalItemDeserializeHandler);
                	}
                	break; 
                	case 0x80009:
                	{
						ins.SkillType = reader.ReadEnum<SkillType>();
                	}
                	break; 
                	case 0x8000a:
                	{
						ins.DefaultSkillSeries = reader.ReadEnum<SkillSeries>();
                	}
                	break; 
                	case 0x8000b:
                	{
						ins.SkillGrade = reader.ReadEnum<SkillGrade>();
                	}
                	break; 
                	case 0x7000c:
                	{
						ins.UpdateAvailable = reader.ReadBool();
                	}
                	break; 
                	case 0x7000d:
                	{
						ins.ForAllRoles = reader.ReadBool();
                	}
                	break; 
                	case 0x7000e:
                	{
						ins.StackAvailable = reader.ReadBool();
                	}
                	break; 
                	case 0x1000f:
                	{
						ins.FxFirst = reader.ReadInt32();
                	}
                	break; 
                	case 0x10010:
                	{
						ins.LinkedSkill = reader.ReadInt32();
                	}
                	break; 
                	case 0x80011:
                	{
						ins.ImpactType.Add( reader.ReadEnum<ImpactType>() );
                	}
                	break; 
                	case 0x80012:
                	{
						ins.AddAttributeType.Add( reader.ReadEnum<AddAttributeType>() );
                	}
                	break; 
                	case 0x60013:
                	{
						ins.AttackTargetTags.Add( reader.ReadString() );
                	}
                	break; 
                	case 0x80014:
                	{
						ins.SkillAttackType = reader.ReadEnum<SkillAttackType>();
                	}
                	break; 
                	case 0x80015:
                	{
						ins.SelectorType = reader.ReadEnum<SkillSelectorType>();
                	}
                	break; 
                	case 0x80016:
                	{
						ins.SelectorCondition = reader.ReadEnum<SelectorCondition>();
                	}
                	break; 
                	case 0x50017:
                	{
						ins.SkillEffectTime = reader.ReadFloat();
                	}
                	break; 
                	case 0x80018:
                	{
						ins.TriggerType = reader.ReadEnum<SkillTriggerType>();
                	}
                	break; 
                	case 0x70019:
                	{
						ins.NeedRecord = reader.ReadBool();
                	}
                	break; 
                	case 0x6001a:
                	{
						ins.ProjectilePrefab = reader.ReadString();
                	}
                	break; 
                	case 0x6001b:
                	{
						ins.HitFxPrefab = reader.ReadString();
                	}
                	break; 
                	case 0x6001c:
                	{
						ins.iconAnimationPrefab = reader.ReadString();
                	}
                	break; 
                	case 0x9001d:
                	{
						ins.iconSpritePrefab = reader.ReadStruct<AtlasStructure>(AtlasStructureDeserializeHandler);
                	}
                	break; 
                	case 0x6001e:
                	{
						ins.AttrIconPrefab = reader.ReadString();
                	}
                	break; 
                	case 0x9001f:
                	{
						ins.AttrIcon = reader.ReadStruct<AtlasStructure>(AtlasStructureDeserializeHandler);
                	}
                	break; 
                	case 0x60020:
                	{
						ins.SkyRay = reader.ReadString();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<SkillLevelDefine> _SkillLevelDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<SkillLevelDefine> SkillLevelDefineDeserializeHandler
		{
			get
			{
				if (_SkillLevelDefineDeserializeHandler == null )
				{
					_SkillLevelDefineDeserializeHandler = new tabtoy.DeserializeHandler<SkillLevelDefine>(Deserialize);
				}
				return _SkillLevelDefineDeserializeHandler;
			}
		}
		public static void Deserialize( SkillLevelDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.SkillID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Level = reader.ReadInt32();
                	}
                	break; 
                	case 0x50002:
                	{
						ins.EffectValue.Add( reader.ReadFloat() );
                	}
                	break; 
                	case 0x50003:
                	{
						ins.BossEffectValue.Add( reader.ReadFloat() );
                	}
                	break; 
                	case 0x80004:
                	{
						ins.TriggerID = reader.ReadEnum<SkillTriggerEvent>();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.IntArg0 = reader.ReadInt32();
                	}
                	break; 
                	case 0x10006:
                	{
						ins.IntArg1 = reader.ReadInt32();
                	}
                	break; 
                	case 0x50007:
                	{
						ins.FloatArg0 = reader.ReadFloat();
                	}
                	break; 
                	case 0x50008:
                	{
						ins.FloatArg1 = reader.ReadFloat();
                	}
                	break; 
                	case 0x50009:
                	{
						ins.DurationTime = reader.ReadFloat();
                	}
                	break; 
                	case 0x5000a:
                	{
						ins.AttackInterval = reader.ReadFloat();
                	}
                	break; 
                	case 0x5000b:
                	{
						ins.AttackDistance = reader.ReadFloat();
                	}
                	break; 
                	case 0x1000c:
                	{
						ins.AttackAngle = reader.ReadInt32();
                	}
                	break; 
                	case 0x8000d:
                	{
						ins.ElementalType = reader.ReadEnum<ElementalType>();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<SkillSeriesInChapterDefine> _SkillSeriesInChapterDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<SkillSeriesInChapterDefine> SkillSeriesInChapterDefineDeserializeHandler
		{
			get
			{
				if (_SkillSeriesInChapterDefineDeserializeHandler == null )
				{
					_SkillSeriesInChapterDefineDeserializeHandler = new tabtoy.DeserializeHandler<SkillSeriesInChapterDefine>(Deserialize);
				}
				return _SkillSeriesInChapterDefineDeserializeHandler;
			}
		}
		public static void Deserialize( SkillSeriesInChapterDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Chapter = reader.ReadInt32();
                	}
                	break; 
                	case 0x80001:
                	{
						ins.CertainSeries.Add( reader.ReadEnum<SkillSeries>() );
                	}
                	break; 
                	case 0x80002:
                	{
						ins.PossibleSeries.Add( reader.ReadEnum<SkillSeries>() );
                	}
                	break; 
                	case 0x10003:
                	{
						ins.TotalCount = reader.ReadInt32();
                	}
                	break; 
                	case 0x80004:
                	{
						ins.UnlockSeries.Add( reader.ReadEnum<SkillSeries>() );
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<SkillSeriesInfoDefine> _SkillSeriesInfoDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<SkillSeriesInfoDefine> SkillSeriesInfoDefineDeserializeHandler
		{
			get
			{
				if (_SkillSeriesInfoDefineDeserializeHandler == null )
				{
					_SkillSeriesInfoDefineDeserializeHandler = new tabtoy.DeserializeHandler<SkillSeriesInfoDefine>(Deserialize);
				}
				return _SkillSeriesInfoDefineDeserializeHandler;
			}
		}
		public static void Deserialize( SkillSeriesInfoDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x80000:
                	{
						ins.SkillSeries = reader.ReadEnum<SkillSeries>();
                	}
                	break; 
                	case 0x90001:
                	{
						ins.Icon = reader.ReadStruct<AtlasStructure>(AtlasStructureDeserializeHandler);
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<SpecialChallengeDefine> _SpecialChallengeDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<SpecialChallengeDefine> SpecialChallengeDefineDeserializeHandler
		{
			get
			{
				if (_SpecialChallengeDefineDeserializeHandler == null )
				{
					_SpecialChallengeDefineDeserializeHandler = new tabtoy.DeserializeHandler<SpecialChallengeDefine>(Deserialize);
				}
				return _SpecialChallengeDefineDeserializeHandler;
			}
		}
		public static void Deserialize( SpecialChallengeDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ChapterRequire = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Difficulty = reader.ReadInt32();
                	}
                	break; 
                	case 0x90002:
                	{
						ins.Rewards.Add( reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler) );
                	}
                	break; 
                	case 0x10003:
                	{
						ins.ChallengeStage = reader.ReadInt32();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<SpecialChapterInfoDefine> _SpecialChapterInfoDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<SpecialChapterInfoDefine> SpecialChapterInfoDefineDeserializeHandler
		{
			get
			{
				if (_SpecialChapterInfoDefineDeserializeHandler == null )
				{
					_SpecialChapterInfoDefineDeserializeHandler = new tabtoy.DeserializeHandler<SpecialChapterInfoDefine>(Deserialize);
				}
				return _SpecialChapterInfoDefineDeserializeHandler;
			}
		}
		public static void Deserialize( SpecialChapterInfoDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x80000:
                	{
						ins.ChapterName = reader.ReadEnum<SpecialChapterType>();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.UnlockRequirement = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.EnergyCost = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.DailyLimit = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.NormalMonthCardAdd = reader.ReadInt32();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.HighMonthCardAdd = reader.ReadInt32();
                	}
                	break; 
                	case 0x10006:
                	{
						ins.RewardLimit = reader.ReadInt32();
                	}
                	break; 
                	case 0x10007:
                	{
						ins.HeroMaxLevel = reader.ReadInt32();
                	}
                	break; 
                	case 0x60008:
                	{
						ins.ChapterDescription = reader.ReadString();
                	}
                	break; 
                	case 0x10009:
                	{
						ins.Open = reader.ReadInt32();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<SpecialEquipDefine> _SpecialEquipDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<SpecialEquipDefine> SpecialEquipDefineDeserializeHandler
		{
			get
			{
				if (_SpecialEquipDefineDeserializeHandler == null )
				{
					_SpecialEquipDefineDeserializeHandler = new tabtoy.DeserializeHandler<SpecialEquipDefine>(Deserialize);
				}
				return _SpecialEquipDefineDeserializeHandler;
			}
		}
		public static void Deserialize( SpecialEquipDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x80000:
                	{
						ins.SerialType = reader.ReadEnum<SpecialEquipSerialType>();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Equips.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x60002:
                	{
						ins.ShopSpine = reader.ReadString();
                	}
                	break; 
                	case 0x90003:
                	{
						ins.LocalName = reader.ReadStruct<LocalItem>(LocalItemDeserializeHandler);
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<SpineChangeSkinDefine> _SpineChangeSkinDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<SpineChangeSkinDefine> SpineChangeSkinDefineDeserializeHandler
		{
			get
			{
				if (_SpineChangeSkinDefineDeserializeHandler == null )
				{
					_SpineChangeSkinDefineDeserializeHandler = new tabtoy.DeserializeHandler<SpineChangeSkinDefine>(Deserialize);
				}
				return _SpineChangeSkinDefineDeserializeHandler;
			}
		}
		public static void Deserialize( SpineChangeSkinDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Path = reader.ReadString();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<StageChapterChallengeInfoDefine> _StageChapterChallengeInfoDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<StageChapterChallengeInfoDefine> StageChapterChallengeInfoDefineDeserializeHandler
		{
			get
			{
				if (_StageChapterChallengeInfoDefineDeserializeHandler == null )
				{
					_StageChapterChallengeInfoDefineDeserializeHandler = new tabtoy.DeserializeHandler<StageChapterChallengeInfoDefine>(Deserialize);
				}
				return _StageChapterChallengeInfoDefineDeserializeHandler;
			}
		}
		public static void Deserialize( StageChapterChallengeInfoDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Chapter = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Stage = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.Progress = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.StageExp = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.StageMoney = reader.ReadInt32();
                	}
                	break; 
                	case 0x60005:
                	{
						ins.MapPath.Add( reader.ReadString() );
                	}
                	break; 
                	case 0x90006:
                	{
						ins.EnemyList.Add( reader.ReadStruct<EnemyInfo>(EnemyInfoDeserializeHandler) );
                	}
                	break; 
                	case 0x90007:
                	{
						ins.NPCList.Add( reader.ReadStruct<NPCInfo>(NPCInfoDeserializeHandler) );
                	}
                	break; 
                	case 0x90008:
                	{
						ins.TurnTable.Add( reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler) );
                	}
                	break; 
                	case 0x90009:
                	{
						ins.DropRewards.Add( reader.ReadStruct<RangeItem>(RangeItemDeserializeHandler) );
                	}
                	break; 
                	case 0x9000a:
                	{
						ins.ExtraDropLoots.Add( reader.ReadStruct<RangeItem>(RangeItemDeserializeHandler) );
                	}
                	break; 
                	case 0x9000b:
                	{
						ins.DropEquips.Add( reader.ReadStruct<RandomEquip>(RandomEquipDeserializeHandler) );
                	}
                	break; 
                	case 0x9000c:
                	{
						ins.DropLoots.Add( reader.ReadStruct<LootInfo>(LootInfoDeserializeHandler) );
                	}
                	break; 
                	case 0x5000d:
                	{
						ins.AttackCoefficient = reader.ReadFloat();
                	}
                	break; 
                	case 0x5000e:
                	{
						ins.HPCoefficient = reader.ReadFloat();
                	}
                	break; 
                	case 0x6000f:
                	{
						ins.MapBottomSprite = reader.ReadString();
                	}
                	break; 
                	case 0x60010:
                	{
						ins.MapBottomSprite2 = reader.ReadString();
                	}
                	break; 
                	case 0x60011:
                	{
						ins.ExtraObjects.Add( reader.ReadString() );
                	}
                	break; 
                	case 0x50012:
                	{
						ins.PriceCoefficient = reader.ReadFloat();
                	}
                	break; 
                	case 0x50013:
                	{
						ins.GamblerMaxHpAdd.Add( reader.ReadFloat() );
                	}
                	break; 
                	case 0x50014:
                	{
						ins.GamblerMaxHpMinus.Add( reader.ReadFloat() );
                	}
                	break; 
                	case 0x10015:
                	{
						ins.TraderPrice = reader.ReadInt32();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<StageDiamondInfoDefine> _StageDiamondInfoDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<StageDiamondInfoDefine> StageDiamondInfoDefineDeserializeHandler
		{
			get
			{
				if (_StageDiamondInfoDefineDeserializeHandler == null )
				{
					_StageDiamondInfoDefineDeserializeHandler = new tabtoy.DeserializeHandler<StageDiamondInfoDefine>(Deserialize);
				}
				return _StageDiamondInfoDefineDeserializeHandler;
			}
		}
		public static void Deserialize( StageDiamondInfoDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Chapter = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Stage = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.StageExp = reader.ReadInt32();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.MapPath.Add( reader.ReadString() );
                	}
                	break; 
                	case 0x90004:
                	{
						ins.EnemyList.Add( reader.ReadStruct<EnemyInfo>(EnemyInfoDeserializeHandler) );
                	}
                	break; 
                	case 0x10005:
                	{
						ins.Skills.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x90006:
                	{
						ins.DropRewards.Add( reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler) );
                	}
                	break; 
                	case 0x90007:
                	{
						ins.DropLoots.Add( reader.ReadStruct<LootInfo>(LootInfoDeserializeHandler) );
                	}
                	break; 
                	case 0x50008:
                	{
						ins.AttackCoefficient = reader.ReadFloat();
                	}
                	break; 
                	case 0x50009:
                	{
						ins.HPCoefficient = reader.ReadFloat();
                	}
                	break; 
                	case 0x6000a:
                	{
						ins.MapBottomSprite = reader.ReadString();
                	}
                	break; 
                	case 0x6000b:
                	{
						ins.MapBottomSprite2 = reader.ReadString();
                	}
                	break; 
                	case 0x6000c:
                	{
						ins.ExtraObjects.Add( reader.ReadString() );
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<GoldEnemyInfo> _GoldEnemyInfoDeserializeHandler;
		static tabtoy.DeserializeHandler<GoldEnemyInfo> GoldEnemyInfoDeserializeHandler
		{
			get
			{
				if (_GoldEnemyInfoDeserializeHandler == null )
				{
					_GoldEnemyInfoDeserializeHandler = new tabtoy.DeserializeHandler<GoldEnemyInfo>(Deserialize);
				}
				return _GoldEnemyInfoDeserializeHandler;
			}
		}
		public static void Deserialize( GoldEnemyInfo ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.min = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.max = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.id = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.apTimes = reader.ReadInt32();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<StageGold2InfoDefine> _StageGold2InfoDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<StageGold2InfoDefine> StageGold2InfoDefineDeserializeHandler
		{
			get
			{
				if (_StageGold2InfoDefineDeserializeHandler == null )
				{
					_StageGold2InfoDefineDeserializeHandler = new tabtoy.DeserializeHandler<StageGold2InfoDefine>(Deserialize);
				}
				return _StageGold2InfoDefineDeserializeHandler;
			}
		}
		public static void Deserialize( StageGold2InfoDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Chapter = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Stage = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.StageExp = reader.ReadInt32();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.MapPath.Add( reader.ReadString() );
                	}
                	break; 
                	case 0x90004:
                	{
						ins.EnemyList.Add( reader.ReadStruct<EnemyInfo>(EnemyInfoDeserializeHandler) );
                	}
                	break; 
                	case 0x10005:
                	{
						ins.Skills.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x90006:
                	{
						ins.DropRewards.Add( reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler) );
                	}
                	break; 
                	case 0x90007:
                	{
						ins.DropLoots.Add( reader.ReadStruct<LootInfo>(LootInfoDeserializeHandler) );
                	}
                	break; 
                	case 0x50008:
                	{
						ins.AttackCoefficient = reader.ReadFloat();
                	}
                	break; 
                	case 0x50009:
                	{
						ins.HPCoefficient = reader.ReadFloat();
                	}
                	break; 
                	case 0x6000a:
                	{
						ins.MapBottomSprite = reader.ReadString();
                	}
                	break; 
                	case 0x6000b:
                	{
						ins.MapBottomSprite2 = reader.ReadString();
                	}
                	break; 
                	case 0x6000c:
                	{
						ins.ExtraObjects.Add( reader.ReadString() );
                	}
                	break; 
                	case 0x5000d:
                	{
						ins.LimitTime = reader.ReadFloat();
                	}
                	break; 
                	case 0x9000e:
                	{
						ins.EnemyRange.Add( reader.ReadStruct<GoldEnemyInfo>(GoldEnemyInfoDeserializeHandler) );
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<StageGoldInfoDefine> _StageGoldInfoDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<StageGoldInfoDefine> StageGoldInfoDefineDeserializeHandler
		{
			get
			{
				if (_StageGoldInfoDefineDeserializeHandler == null )
				{
					_StageGoldInfoDefineDeserializeHandler = new tabtoy.DeserializeHandler<StageGoldInfoDefine>(Deserialize);
				}
				return _StageGoldInfoDefineDeserializeHandler;
			}
		}
		public static void Deserialize( StageGoldInfoDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Chapter = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Stage = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.StageExp = reader.ReadInt32();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.MapPath.Add( reader.ReadString() );
                	}
                	break; 
                	case 0x90004:
                	{
						ins.EnemyList.Add( reader.ReadStruct<EnemyInfo>(EnemyInfoDeserializeHandler) );
                	}
                	break; 
                	case 0x10005:
                	{
						ins.Skills.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x90006:
                	{
						ins.DropRewards.Add( reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler) );
                	}
                	break; 
                	case 0x90007:
                	{
						ins.DropLoots.Add( reader.ReadStruct<LootInfo>(LootInfoDeserializeHandler) );
                	}
                	break; 
                	case 0x50008:
                	{
						ins.AttackCoefficient = reader.ReadFloat();
                	}
                	break; 
                	case 0x50009:
                	{
						ins.HPCoefficient = reader.ReadFloat();
                	}
                	break; 
                	case 0x6000a:
                	{
						ins.MapBottomSprite = reader.ReadString();
                	}
                	break; 
                	case 0x6000b:
                	{
						ins.MapBottomSprite2 = reader.ReadString();
                	}
                	break; 
                	case 0x6000c:
                	{
						ins.ExtraObjects.Add( reader.ReadString() );
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<HeroPartDropInfo> _HeroPartDropInfoDeserializeHandler;
		static tabtoy.DeserializeHandler<HeroPartDropInfo> HeroPartDropInfoDeserializeHandler
		{
			get
			{
				if (_HeroPartDropInfoDeserializeHandler == null )
				{
					_HeroPartDropInfoDeserializeHandler = new tabtoy.DeserializeHandler<HeroPartDropInfo>(Deserialize);
				}
				return _HeroPartDropInfoDeserializeHandler;
			}
		}
		public static void Deserialize( HeroPartDropInfo ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x80000:
                	{
						ins.Quality = reader.ReadEnum<RoleQualityType>();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Count = reader.ReadInt32();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<StageHeroPartInfoDefine> _StageHeroPartInfoDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<StageHeroPartInfoDefine> StageHeroPartInfoDefineDeserializeHandler
		{
			get
			{
				if (_StageHeroPartInfoDefineDeserializeHandler == null )
				{
					_StageHeroPartInfoDefineDeserializeHandler = new tabtoy.DeserializeHandler<StageHeroPartInfoDefine>(Deserialize);
				}
				return _StageHeroPartInfoDefineDeserializeHandler;
			}
		}
		public static void Deserialize( StageHeroPartInfoDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Difficulty = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Stage = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.StageExp = reader.ReadInt32();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.MapPath.Add( reader.ReadString() );
                	}
                	break; 
                	case 0x90004:
                	{
						ins.EnemyList.Add( reader.ReadStruct<EnemyInfo>(EnemyInfoDeserializeHandler) );
                	}
                	break; 
                	case 0x10005:
                	{
						ins.Skills.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x90006:
                	{
						ins.DropRewardsCount.Add( reader.ReadStruct<HeroPartDropInfo>(HeroPartDropInfoDeserializeHandler) );
                	}
                	break; 
                	case 0x90007:
                	{
						ins.DropLoots.Add( reader.ReadStruct<LootInfo>(LootInfoDeserializeHandler) );
                	}
                	break; 
                	case 0x50008:
                	{
						ins.AttackCoefficient = reader.ReadFloat();
                	}
                	break; 
                	case 0x50009:
                	{
						ins.HPCoefficient = reader.ReadFloat();
                	}
                	break; 
                	case 0x6000a:
                	{
						ins.MapBottomSprite = reader.ReadString();
                	}
                	break; 
                	case 0x6000b:
                	{
						ins.MapBottomSprite2 = reader.ReadString();
                	}
                	break; 
                	case 0x6000c:
                	{
						ins.ExtraObjects.Add( reader.ReadString() );
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<Vec2> _Vec2DeserializeHandler;
		static tabtoy.DeserializeHandler<Vec2> Vec2DeserializeHandler
		{
			get
			{
				if (_Vec2DeserializeHandler == null )
				{
					_Vec2DeserializeHandler = new tabtoy.DeserializeHandler<Vec2>(Deserialize);
				}
				return _Vec2DeserializeHandler;
			}
		}
		public static void Deserialize( Vec2 ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.X = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Y = reader.ReadInt32();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<StageInfoDefine> _StageInfoDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<StageInfoDefine> StageInfoDefineDeserializeHandler
		{
			get
			{
				if (_StageInfoDefineDeserializeHandler == null )
				{
					_StageInfoDefineDeserializeHandler = new tabtoy.DeserializeHandler<StageInfoDefine>(Deserialize);
				}
				return _StageInfoDefineDeserializeHandler;
			}
		}
		public static void Deserialize( StageInfoDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Chapter = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Stage = reader.ReadInt32();
                	}
                	break; 
                	case 0x90002:
                	{
						ins.MapSize = reader.ReadStruct<Vec2>(Vec2DeserializeHandler);
                	}
                	break; 
                	case 0x90003:
                	{
						ins.InitPos = reader.ReadStruct<Vec2>(Vec2DeserializeHandler);
                	}
                	break; 
                	case 0x50004:
                	{
						ins.Progress = reader.ReadFloat();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.StageExp = reader.ReadInt32();
                	}
                	break; 
                	case 0x10006:
                	{
						ins.StageMoney = reader.ReadInt32();
                	}
                	break; 
                	case 0x60007:
                	{
						ins.MapPath.Add( reader.ReadString() );
                	}
                	break; 
                	case 0x10008:
                	{
						ins.RandomMapsGroup = reader.ReadInt32();
                	}
                	break; 
                	case 0x90009:
                	{
						ins.EnemyList.Add( reader.ReadStruct<EnemyInfo>(EnemyInfoDeserializeHandler) );
                	}
                	break; 
                	case 0x8000a:
                	{
						ins.BossShow = reader.ReadEnum<BossShowType>();
                	}
                	break; 
                	case 0x1000b:
                	{
						ins.Dialogue = reader.ReadInt32();
                	}
                	break; 
                	case 0x9000c:
                	{
						ins.NPCList.Add( reader.ReadStruct<NPCInfo>(NPCInfoDeserializeHandler) );
                	}
                	break; 
                	case 0x9000d:
                	{
						ins.TurnTable.Add( reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler) );
                	}
                	break; 
                	case 0x9000e:
                	{
						ins.DropRewards.Add( reader.ReadStruct<RangeItem>(RangeItemDeserializeHandler) );
                	}
                	break; 
                	case 0x9000f:
                	{
						ins.ItemSetIndex.Add( reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler) );
                	}
                	break; 
                	case 0x90010:
                	{
						ins.ExtraDropLoots.Add( reader.ReadStruct<RangeItem>(RangeItemDeserializeHandler) );
                	}
                	break; 
                	case 0x90011:
                	{
						ins.DropEquips.Add( reader.ReadStruct<RandomEquip>(RandomEquipDeserializeHandler) );
                	}
                	break; 
                	case 0x90012:
                	{
						ins.DropLoots.Add( reader.ReadStruct<LootInfo>(LootInfoDeserializeHandler) );
                	}
                	break; 
                	case 0x50013:
                	{
						ins.AttackCoefficient = reader.ReadFloat();
                	}
                	break; 
                	case 0x50014:
                	{
						ins.HPCoefficient = reader.ReadFloat();
                	}
                	break; 
                	case 0x50015:
                	{
						ins.BulletSpeedCoefficient = reader.ReadFloat();
                	}
                	break; 
                	case 0x60016:
                	{
						ins.MapBottomSprite = reader.ReadString();
                	}
                	break; 
                	case 0x60017:
                	{
						ins.MapBottomSprite2 = reader.ReadString();
                	}
                	break; 
                	case 0x60018:
                	{
						ins.ExtraObjects.Add( reader.ReadString() );
                	}
                	break; 
                	case 0x50019:
                	{
						ins.PriceCoefficient = reader.ReadFloat();
                	}
                	break; 
                	case 0x5001a:
                	{
						ins.GamblerMaxHpAdd.Add( reader.ReadFloat() );
                	}
                	break; 
                	case 0x5001b:
                	{
						ins.GamblerMaxHpMinus.Add( reader.ReadFloat() );
                	}
                	break; 
                	case 0x1001c:
                	{
						ins.TraderPrice = reader.ReadInt32();
                	}
                	break; 
                	case 0x1001d:
                	{
						ins.BossSplash = reader.ReadInt32();
                	}
                	break; 
                	case 0x5001e:
                	{
						ins.PowerRecoverSpeed_Adder = reader.ReadFloat();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<StageRandomPoolDefine> _StageRandomPoolDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<StageRandomPoolDefine> StageRandomPoolDefineDeserializeHandler
		{
			get
			{
				if (_StageRandomPoolDefineDeserializeHandler == null )
				{
					_StageRandomPoolDefineDeserializeHandler = new tabtoy.DeserializeHandler<StageRandomPoolDefine>(Deserialize);
				}
				return _StageRandomPoolDefineDeserializeHandler;
			}
		}
		public static void Deserialize( StageRandomPoolDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Chapter = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Stage = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.StageExp = reader.ReadInt32();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.MapPath.Add( reader.ReadString() );
                	}
                	break; 
                	case 0x90004:
                	{
						ins.EnemyList.Add( reader.ReadStruct<EnemyInfo>(EnemyInfoDeserializeHandler) );
                	}
                	break; 
                	case 0x90005:
                	{
						ins.NPCList.Add( reader.ReadStruct<NPCInfo>(NPCInfoDeserializeHandler) );
                	}
                	break; 
                	case 0x90006:
                	{
						ins.TurnTable.Add( reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler) );
                	}
                	break; 
                	case 0x90007:
                	{
						ins.DropRewards.Add( reader.ReadStruct<RangeItem>(RangeItemDeserializeHandler) );
                	}
                	break; 
                	case 0x90008:
                	{
						ins.ExtraDropLoots.Add( reader.ReadStruct<RangeItem>(RangeItemDeserializeHandler) );
                	}
                	break; 
                	case 0x90009:
                	{
						ins.DropLoots.Add( reader.ReadStruct<LootInfo>(LootInfoDeserializeHandler) );
                	}
                	break; 
                	case 0x5000a:
                	{
						ins.AttackCoefficient = reader.ReadFloat();
                	}
                	break; 
                	case 0x5000b:
                	{
						ins.HPCoefficient = reader.ReadFloat();
                	}
                	break; 
                	case 0x5000c:
                	{
						ins.AtkRatioBaseOnPlayerHP = reader.ReadFloat();
                	}
                	break; 
                	case 0x5000d:
                	{
						ins.HPRatioBaseOnPlayerAtk = reader.ReadFloat();
                	}
                	break; 
                	case 0x6000e:
                	{
						ins.MapBottomSprite = reader.ReadString();
                	}
                	break; 
                	case 0x6000f:
                	{
						ins.MapBottomSprite2 = reader.ReadString();
                	}
                	break; 
                	case 0x60010:
                	{
						ins.ExtraObjects.Add( reader.ReadString() );
                	}
                	break; 
                	case 0x50011:
                	{
						ins.PriceCoefficient = reader.ReadFloat();
                	}
                	break; 
                	case 0x50012:
                	{
						ins.GamblerMaxHpAdd.Add( reader.ReadFloat() );
                	}
                	break; 
                	case 0x50013:
                	{
						ins.GamblerMaxHpMinus.Add( reader.ReadFloat() );
                	}
                	break; 
                	case 0x10014:
                	{
						ins.TraderPrice = reader.ReadInt32();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<SubscriptionShopDefine> _SubscriptionShopDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<SubscriptionShopDefine> SubscriptionShopDefineDeserializeHandler
		{
			get
			{
				if (_SubscriptionShopDefineDeserializeHandler == null )
				{
					_SubscriptionShopDefineDeserializeHandler = new tabtoy.DeserializeHandler<SubscriptionShopDefine>(Deserialize);
				}
				return _SubscriptionShopDefineDeserializeHandler;
			}
		}
		public static void Deserialize( SubscriptionShopDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Index = reader.ReadInt32();
                	}
                	break; 
                	case 0x90001:
                	{
						ins.BuyRewards.Add( reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler) );
                	}
                	break; 
                	case 0x90002:
                	{
						ins.CycleRewards.Add( reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler) );
                	}
                	break; 
                	case 0x50003:
                	{
						ins.OfflineRewardsAdd = reader.ReadFloat();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.OfflineTimesAdd = reader.ReadInt32();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.MaxStrengthAdd = reader.ReadInt32();
                	}
                	break; 
                	case 0x70006:
                	{
						ins.SkipAd = reader.ReadBool();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<SummonedInStageDefine> _SummonedInStageDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<SummonedInStageDefine> SummonedInStageDefineDeserializeHandler
		{
			get
			{
				if (_SummonedInStageDefineDeserializeHandler == null )
				{
					_SummonedInStageDefineDeserializeHandler = new tabtoy.DeserializeHandler<SummonedInStageDefine>(Deserialize);
				}
				return _SummonedInStageDefineDeserializeHandler;
			}
		}
		public static void Deserialize( SummonedInStageDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Name = reader.ReadString();
                	}
                	break; 
                	case 0x70002:
                	{
						ins.Invincible = reader.ReadBool();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.Health = reader.ReadInt32();
                	}
                	break; 
                	case 0x60004:
                	{
						ins.PrefabPath = reader.ReadString();
                	}
                	break; 
                	case 0x50005:
                	{
						ins.Atk = reader.ReadFloat();
                	}
                	break; 
                	case 0x50006:
                	{
						ins.AtkRange = reader.ReadFloat();
                	}
                	break; 
                	case 0x50007:
                	{
						ins.AtkInterval = reader.ReadFloat();
                	}
                	break; 
                	case 0x50008:
                	{
						ins.MoveSpeed = reader.ReadFloat();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<TalentDefine> _TalentDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<TalentDefine> TalentDefineDeserializeHandler
		{
			get
			{
				if (_TalentDefineDeserializeHandler == null )
				{
					_TalentDefineDeserializeHandler = new tabtoy.DeserializeHandler<TalentDefine>(Deserialize);
				}
				return _TalentDefineDeserializeHandler;
			}
		}
		public static void Deserialize( TalentDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.TalentID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Cost = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.ChapterRequire = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.SkillID = reader.ReadInt32();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<TalentEvolutionDefine> _TalentEvolutionDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<TalentEvolutionDefine> TalentEvolutionDefineDeserializeHandler
		{
			get
			{
				if (_TalentEvolutionDefineDeserializeHandler == null )
				{
					_TalentEvolutionDefineDeserializeHandler = new tabtoy.DeserializeHandler<TalentEvolutionDefine>(Deserialize);
				}
				return _TalentEvolutionDefineDeserializeHandler;
			}
		}
		public static void Deserialize( TalentEvolutionDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.EvolutionID = reader.ReadInt32();
                	}
                	break; 
                	case 0x90001:
                	{
						ins.Cost.Add( reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler) );
                	}
                	break; 
                	case 0x80002:
                	{
						ins.Evolution = reader.ReadEnum<EvolutionType>();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.ChapterRequire = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.SkillID = reader.ReadInt32();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<TaskConfigDefine> _TaskConfigDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<TaskConfigDefine> TaskConfigDefineDeserializeHandler
		{
			get
			{
				if (_TaskConfigDefineDeserializeHandler == null )
				{
					_TaskConfigDefineDeserializeHandler = new tabtoy.DeserializeHandler<TaskConfigDefine>(Deserialize);
				}
				return _TaskConfigDefineDeserializeHandler;
			}
		}
		public static void Deserialize( TaskConfigDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Day = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Task = reader.ReadInt32();
                	}
                	break; 
                	case 0x80002:
                	{
						ins.TaskType = reader.ReadEnum<DailyTaskType>();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.CompleteNumber = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.Activity = reader.ReadInt32();
                	}
                	break; 
                	case 0x60005:
                	{
						ins.desc = reader.ReadString();
                	}
                	break; 
                	case 0x90006:
                	{
						ins.LocalSystem = reader.ReadStruct<LocalItem>(LocalItemDeserializeHandler);
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<TaskRewardsDefine> _TaskRewardsDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<TaskRewardsDefine> TaskRewardsDefineDeserializeHandler
		{
			get
			{
				if (_TaskRewardsDefineDeserializeHandler == null )
				{
					_TaskRewardsDefineDeserializeHandler = new tabtoy.DeserializeHandler<TaskRewardsDefine>(Deserialize);
				}
				return _TaskRewardsDefineDeserializeHandler;
			}
		}
		public static void Deserialize( TaskRewardsDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Day = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Activity = reader.ReadInt32();
                	}
                	break; 
                	case 0x90002:
                	{
						ins.Rewards.Add( reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler) );
                	}
                	break; 
                	case 0x90003:
                	{
						ins.ItemSetIndex.Add( reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler) );
                	}
                	break; 
                	case 0x10004:
                	{
						ins.OfflineTime = reader.ReadInt32();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<ThiefDefine> _ThiefDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<ThiefDefine> ThiefDefineDeserializeHandler
		{
			get
			{
				if (_ThiefDefineDeserializeHandler == null )
				{
					_ThiefDefineDeserializeHandler = new tabtoy.DeserializeHandler<ThiefDefine>(Deserialize);
				}
				return _ThiefDefineDeserializeHandler;
			}
		}
		public static void Deserialize( ThiefDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ChapterID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Coin = reader.ReadInt32();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<UIBeginnerGuideDefine> _UIBeginnerGuideDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<UIBeginnerGuideDefine> UIBeginnerGuideDefineDeserializeHandler
		{
			get
			{
				if (_UIBeginnerGuideDefineDeserializeHandler == null )
				{
					_UIBeginnerGuideDefineDeserializeHandler = new tabtoy.DeserializeHandler<UIBeginnerGuideDefine>(Deserialize);
				}
				return _UIBeginnerGuideDefineDeserializeHandler;
			}
		}
		public static void Deserialize( UIBeginnerGuideDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x90001:
                	{
						ins.Tip = reader.ReadStruct<LocalItem>(LocalItemDeserializeHandler);
                	}
                	break; 
                	case 0x90002:
                	{
						ins.WordPosition = reader.ReadStruct<GlobalsVector3>(GlobalsVector3DeserializeHandler);
                	}
                	break; 
                	case 0x70003:
                	{
						ins.NeedNext = reader.ReadBool();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.GuideGroup = reader.ReadInt32();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.GuideType = reader.ReadInt32();
                	}
                	break; 
                	case 0x70006:
                	{
						ins.Force = reader.ReadBool();
                	}
                	break; 
                	case 0x70007:
                	{
						ins.InvokeButton = reader.ReadBool();
                	}
                	break; 
                	case 0x60008:
                	{
						ins.TargetTransform = reader.ReadString();
                	}
                	break; 
                	case 0x90009:
                	{
						ins.TargetOffset = reader.ReadStruct<GlobalsVector3>(GlobalsVector3DeserializeHandler);
                	}
                	break; 
                	case 0x9000a:
                	{
						ins.TargetPosition = reader.ReadStruct<GlobalsVector3>(GlobalsVector3DeserializeHandler);
                	}
                	break; 
                	case 0x6000b:
                	{
						ins.UIOpenEvent = reader.ReadString();
                	}
                	break; 
                	case 0x6000c:
                	{
						ins.UICloseEvent = reader.ReadString();
                	}
                	break; 
                	case 0x1000d:
                	{
						ins.DelayShowTime = reader.ReadInt32();
                	}
                	break; 
                	case 0x6000e:
                	{
						ins.UIToOpen = reader.ReadString();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<UIStoreDataDefine> _UIStoreDataDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<UIStoreDataDefine> UIStoreDataDefineDeserializeHandler
		{
			get
			{
				if (_UIStoreDataDefineDeserializeHandler == null )
				{
					_UIStoreDataDefineDeserializeHandler = new tabtoy.DeserializeHandler<UIStoreDataDefine>(Deserialize);
				}
				return _UIStoreDataDefineDeserializeHandler;
			}
		}
		public static void Deserialize( UIStoreDataDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Index = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.SubStoreName = reader.ReadString();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.SubStorePrefabPath = reader.ReadString();
                	}
                	break; 
                	case 0x90003:
                	{
						ins.LocalItemDes = reader.ReadStruct<LocalItem>(LocalItemDeserializeHandler);
                	}
                	break; 
                	case 0x70004:
                	{
						ins.IsOn = reader.ReadBool();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.Order = reader.ReadInt32();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<UIStoreGoodsDataDefine> _UIStoreGoodsDataDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<UIStoreGoodsDataDefine> UIStoreGoodsDataDefineDeserializeHandler
		{
			get
			{
				if (_UIStoreGoodsDataDefineDeserializeHandler == null )
				{
					_UIStoreGoodsDataDefineDeserializeHandler = new tabtoy.DeserializeHandler<UIStoreGoodsDataDefine>(Deserialize);
				}
				return _UIStoreGoodsDataDefineDeserializeHandler;
			}
		}
		public static void Deserialize( UIStoreGoodsDataDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.GoodsID.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x70002:
                	{
						ins.CoolDownBetweenAd = reader.ReadBool();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.SubStore = reader.ReadString();
                	}
                	break; 
                	case 0x60004:
                	{
						ins.GoodsName = reader.ReadString();
                	}
                	break; 
                	case 0x60005:
                	{
						ins.GoodsDes = reader.ReadString();
                	}
                	break; 
                	case 0x90006:
                	{
						ins.LocalGoodsName = reader.ReadStruct<LocalItem>(LocalItemDeserializeHandler);
                	}
                	break; 
                	case 0x90007:
                	{
						ins.LocalGoodsDes = reader.ReadStruct<LocalItem>(LocalItemDeserializeHandler);
                	}
                	break; 
                	case 0x90008:
                	{
						ins.BGAtlas = reader.ReadStruct<AtlasStructure>(AtlasStructureDeserializeHandler);
                	}
                	break; 
                	case 0x60009:
                	{
						ins.BGSprite = reader.ReadString();
                	}
                	break; 
                	case 0x6000a:
                	{
						ins.PrefabPath = reader.ReadString();
                	}
                	break; 
                	case 0x9000b:
                	{
						ins.GoodsAtlas = reader.ReadStruct<AtlasStructure>(AtlasStructureDeserializeHandler);
                	}
                	break; 
                	case 0x6000c:
                	{
						ins.Spine = reader.ReadString();
                	}
                	break; 
                	case 0x1000d:
                	{
						ins.RequireChapter = reader.ReadInt32();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<UISupplyStoreAccumulativeDefine> _UISupplyStoreAccumulativeDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<UISupplyStoreAccumulativeDefine> UISupplyStoreAccumulativeDefineDeserializeHandler
		{
			get
			{
				if (_UISupplyStoreAccumulativeDefineDeserializeHandler == null )
				{
					_UISupplyStoreAccumulativeDefineDeserializeHandler = new tabtoy.DeserializeHandler<UISupplyStoreAccumulativeDefine>(Deserialize);
				}
				return _UISupplyStoreAccumulativeDefineDeserializeHandler;
			}
		}
		public static void Deserialize( UISupplyStoreAccumulativeDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x90001:
                	{
						ins.Rewards.Add( reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler) );
                	}
                	break; 
                	case 0x10002:
                	{
						ins.NeedBuyTimes = reader.ReadInt32();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<UISupplyStoreDataDefine> _UISupplyStoreDataDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<UISupplyStoreDataDefine> UISupplyStoreDataDefineDeserializeHandler
		{
			get
			{
				if (_UISupplyStoreDataDefineDeserializeHandler == null )
				{
					_UISupplyStoreDataDefineDeserializeHandler = new tabtoy.DeserializeHandler<UISupplyStoreDataDefine>(Deserialize);
				}
				return _UISupplyStoreDataDefineDeserializeHandler;
			}
		}
		public static void Deserialize( UISupplyStoreDataDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x60000:
                	{
						ins.SubStoreName = reader.ReadString();
                	}
                	break; 
                	case 0x90001:
                	{
						ins.LocalItemDes = reader.ReadStruct<LocalItem>(LocalItemDeserializeHandler);
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<UISupplyStoreGoodsDataDefine> _UISupplyStoreGoodsDataDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<UISupplyStoreGoodsDataDefine> UISupplyStoreGoodsDataDefineDeserializeHandler
		{
			get
			{
				if (_UISupplyStoreGoodsDataDefineDeserializeHandler == null )
				{
					_UISupplyStoreGoodsDataDefineDeserializeHandler = new tabtoy.DeserializeHandler<UISupplyStoreGoodsDataDefine>(Deserialize);
				}
				return _UISupplyStoreGoodsDataDefineDeserializeHandler;
			}
		}
		public static void Deserialize( UISupplyStoreGoodsDataDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.GoodsID.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x60002:
                	{
						ins.StoreName = reader.ReadString();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.GoodsPrice = reader.ReadInt32();
                	}
                	break; 
                	case 0x60004:
                	{
						ins.Discount = reader.ReadString();
                	}
                	break; 
                	case 0x90005:
                	{
						ins.BGAtlas = reader.ReadStruct<AtlasStructure>(AtlasStructureDeserializeHandler);
                	}
                	break; 
                	case 0x60006:
                	{
						ins.BGSprite = reader.ReadString();
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<UIUnlockTipDefine> _UIUnlockTipDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<UIUnlockTipDefine> UIUnlockTipDefineDeserializeHandler
		{
			get
			{
				if (_UIUnlockTipDefineDeserializeHandler == null )
				{
					_UIUnlockTipDefineDeserializeHandler = new tabtoy.DeserializeHandler<UIUnlockTipDefine>(Deserialize);
				}
				return _UIUnlockTipDefineDeserializeHandler;
			}
		}
		public static void Deserialize( UIUnlockTipDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x90001:
                	{
						ins.LocalTip = reader.ReadStruct<LocalItem>(LocalItemDeserializeHandler);
                	}
                	break; 
                	case 0x90002:
                	{
						ins.AtlasPicture = reader.ReadStruct<AtlasStructure>(AtlasStructureDeserializeHandler);
                	}
                	break; 
                	case 0x10003:
                	{
						ins.GuideType = reader.ReadInt32();
                	}
                	break; 
                	case 0x60004:
                	{
						ins.TargetTransform = reader.ReadString();
                	}
                	break; 
                	case 0x90005:
                	{
						ins.TargetOffset = reader.ReadStruct<GlobalsVector3>(GlobalsVector3DeserializeHandler);
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<WeeklyTaskConfigDefine> _WeeklyTaskConfigDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<WeeklyTaskConfigDefine> WeeklyTaskConfigDefineDeserializeHandler
		{
			get
			{
				if (_WeeklyTaskConfigDefineDeserializeHandler == null )
				{
					_WeeklyTaskConfigDefineDeserializeHandler = new tabtoy.DeserializeHandler<WeeklyTaskConfigDefine>(Deserialize);
				}
				return _WeeklyTaskConfigDefineDeserializeHandler;
			}
		}
		public static void Deserialize( WeeklyTaskConfigDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Task = reader.ReadInt32();
                	}
                	break; 
                	case 0x80001:
                	{
						ins.TaskType = reader.ReadEnum<WeeklyTaskType>();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.CompleteNumber = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.Activity = reader.ReadInt32();
                	}
                	break; 
                	case 0x90004:
                	{
						ins.icon = reader.ReadStruct<AtlasStructure>(AtlasStructureDeserializeHandler);
                	}
                	break; 
                	case 0x60005:
                	{
						ins.desc = reader.ReadString();
                	}
                	break; 
                	case 0x90006:
                	{
						ins.LocalSystem = reader.ReadStruct<LocalItem>(LocalItemDeserializeHandler);
                	}
                	break; 
                }
             } 
		}
		static tabtoy.DeserializeHandler<WeeklyTaskRewardsDefine> _WeeklyTaskRewardsDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<WeeklyTaskRewardsDefine> WeeklyTaskRewardsDefineDeserializeHandler
		{
			get
			{
				if (_WeeklyTaskRewardsDefineDeserializeHandler == null )
				{
					_WeeklyTaskRewardsDefineDeserializeHandler = new tabtoy.DeserializeHandler<WeeklyTaskRewardsDefine>(Deserialize);
				}
				return _WeeklyTaskRewardsDefineDeserializeHandler;
			}
		}
		public static void Deserialize( WeeklyTaskRewardsDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Activity = reader.ReadInt32();
                	}
                	break; 
                	case 0x90001:
                	{
						ins.Rewards.Add( reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler) );
                	}
                	break; 
                	case 0x90002:
                	{
						ins.ItemSetIndex.Add( reader.ReadStruct<RewardItem>(RewardItemDeserializeHandler) );
                	}
                	break; 
                	case 0x10003:
                	{
						ins.OfflineTime = reader.ReadInt32();
                	}
                	break; 
                }
             } 
		}
		#endregion
		#region Clear Code
		public void Clear( )
		{			
				Achievements.Clear(); 		
				AudioConfig.Clear(); 		
				Avatar.Clear(); 		
				Banner.Clear(); 		
				Boss.Clear(); 		
				BoxSet.Clear(); 		
				ChapterInfo.Clear(); 		
				ClearReward.Clear(); 		
				CycleShop.Clear(); 		
				Dialogue.Clear(); 		
				ElementalDamageFormula.Clear(); 		
				Enemy.Clear(); 		
				EquipLocationLevel.Clear(); 		
				EquipMaterialMap.Clear(); 		
				EquipOptional.Clear(); 		
				EquipQuality.Clear(); 		
				EquipQualityGrowInfo.Clear(); 		
				EquipSet.Clear(); 		
				EquipSetInfo.Clear(); 		
				EquipShop.Clear(); 		
				EquipShopFloor.Clear(); 		
				EquipType.Clear(); 		
				General.Clear(); 		
				HeroAwake.Clear(); 		
				HeroCharacters.Clear(); 		
				HeroLevel.Clear(); 		
				HeroLevelInStage.Clear(); 		
				HighGrowthFund.Clear(); 		
				Item.Clear(); 		
				ItemSet.Clear(); 		
				ItemSetInfo.Clear(); 		
				Localization.Clear(); 		
				LootOnlyInCombat.Clear(); 		
				MapObject.Clear(); 		
				MapRandomPool.Clear(); 		
				MapTape.Clear(); 		
				ModuleConfig.Clear(); 		
				NormalGrowthFund.Clear(); 		
				NPC.Clear(); 		
				Offline.Clear(); 		
				PassReward.Clear(); 		
				PiggyBank.Clear(); 		
				Rank.Clear(); 		
				RedDot.Clear(); 		
				RetailSkills.Clear(); 		
				SevenDayEventExpBar.Clear(); 		
				SevenDayEventTask.Clear(); 		
				SevenDaySignIn.Clear(); 		
				Shop.Clear(); 		
				SignInConfig.Clear(); 		
				Skill.Clear(); 		
				SkillLevel.Clear(); 		
				SkillSeriesInChapter.Clear(); 		
				SkillSeriesInfo.Clear(); 		
				SpecialChallenge.Clear(); 		
				SpecialChapterInfo.Clear(); 		
				SpecialEquip.Clear(); 		
				SpineChangeSkin.Clear(); 		
				StageChapterChallengeInfo.Clear(); 		
				StageDiamondInfo.Clear(); 		
				StageGold2Info.Clear(); 		
				StageGoldInfo.Clear(); 		
				StageHeroPartInfo.Clear(); 		
				StageInfo.Clear(); 		
				StageRandomPool.Clear(); 		
				SubscriptionShop.Clear(); 		
				SummonedInStage.Clear(); 		
				Talent.Clear(); 		
				TalentEvolution.Clear(); 		
				TaskConfig.Clear(); 		
				TaskRewards.Clear(); 		
				Thief.Clear(); 		
				UIBeginnerGuide.Clear(); 		
				UIStoreData.Clear(); 		
				UIStoreGoodsData.Clear(); 		
				UISupplyStoreAccumulative.Clear(); 		
				UISupplyStoreData.Clear(); 		
				UISupplyStoreGoodsData.Clear(); 		
				UIUnlockTip.Clear(); 		
				WeeklyTaskConfig.Clear(); 		
				WeeklyTaskRewards.Clear(); 
				_AudioConfigByID.Clear(); 
				_AvatarById.Clear(); 
				_BannerByBannerID.Clear(); 
				_BoxSetBySetID.Clear(); 
				_ChapterInfoByChapter.Clear(); 
				_ClearRewardByIndex.Clear(); 
				_CycleShopByShopIndex.Clear(); 
				_DialogueByIndex.Clear(); 
				_EnemyByEnemyID.Clear(); 
				_EquipOptionalByItemId.Clear(); 
				_EquipQualityByQuality.Clear(); 
				_EquipQualityGrowInfoByBaseAttributeType.Clear(); 
				_EquipSetInfoBySetID.Clear(); 
				_EquipShopByIndex.Clear(); 
				_EquipShopFloorByFloorID.Clear(); 
				_EquipTypeByType.Clear(); 
				_GeneralByGeneral_Type.Clear(); 
				_HeroCharactersByID.Clear(); 
				_HeroLevelInStageByLevel.Clear(); 
				_HighGrowthFundByID.Clear(); 
				_ItemById.Clear(); 
				_ItemSetInfoBySetID.Clear(); 
				_LootOnlyInCombatById.Clear(); 
				_MapObjectByID.Clear(); 
				_MapRandomPoolByindex.Clear(); 
				_ModuleConfigByModuleType.Clear(); 
				_NormalGrowthFundByID.Clear(); 
				_NPCByID.Clear(); 
				_OfflineByChapter.Clear(); 
				_PiggyBankByCycle.Clear(); 
				_PiggyBankByShopID.Clear(); 
				_RankByRankRewardID.Clear(); 
				_RedDotBymoduleID.Clear(); 
				_RetailSkillsBySkillID.Clear(); 
				_SevenDayEventExpBarById.Clear(); 
				_SevenDayEventTaskById.Clear(); 
				_SevenDaySignInByDay.Clear(); 
				_ShopByShopIndex.Clear(); 
				_SignInConfigByDay.Clear(); 
				_SkillBySkillID.Clear(); 
				_SkillSeriesInChapterByChapter.Clear(); 
				_SkillSeriesInfoBySkillSeries.Clear(); 
				_SpecialChapterInfoByChapterName.Clear(); 
				_SpecialEquipBySerialType.Clear(); 
				_SpineChangeSkinByID.Clear(); 
				_StageDiamondInfoByStage.Clear(); 
				_StageGold2InfoByStage.Clear(); 
				_StageGoldInfoByStage.Clear(); 
				_SubscriptionShopByIndex.Clear(); 
				_SummonedInStageByID.Clear(); 
				_TalentByTalentID.Clear(); 
				_TalentEvolutionByEvolutionID.Clear(); 
				_ThiefByChapterID.Clear(); 
				_UIBeginnerGuideByID.Clear(); 
				_UIStoreDataByIndex.Clear(); 
				_UIStoreDataBySubStoreName.Clear(); 
				_UIStoreGoodsDataByID.Clear(); 
				_UISupplyStoreAccumulativeByID.Clear(); 
				_UISupplyStoreDataBySubStoreName.Clear(); 
				_UISupplyStoreGoodsDataByID.Clear(); 
				_UIUnlockTipByID.Clear(); 
		}
		#endregion
	} 
	// Defined in table: Globals
	[System.Serializable]
	public partial class KeyInt_ValueString
	{
		/// <summary> 
		/// 结构形式Key为int
		/// </summary>
		public int Int_Key = 0; // key
		/// <summary> 
		/// 结构形式Value为string
		/// </summary>
		public string String_Value = ""; // value
	} 
	// Defined in table: Globals
	[System.Serializable]
	public partial class KeyInt_ValueInt
	{
		public int Int_Key = 0; // key
		public int Int_Value = 0; // value
	} 
	// Defined in table: Globals
	[System.Serializable]
	public partial class RewardItem
	{
		/// <summary> 
		/// 道具奖励列表结构
		/// </summary>
		public int ItemID = 0; // 道具ID
		public ulong ItemNumber = 0; // 道具数量
	} 
	// Defined in table: Globals
	[System.Serializable]
	public partial class AtlasStructure
	{
		/// <summary> 
		/// 图集结构
		/// </summary>
		public string AtlasPath = ""; // 图集路径
		public string SpriteName = ""; // 精灵名称
	} 
	// Defined in table: Globals
	[System.Serializable]
	public partial class RangeIntValue
	{
		public int Min = 0; // 最小值
		public int Max = 0; // 最大值
	} 
	// Defined in table: Globals
	[System.Serializable]
	public partial class RangeFloatValue
	{
		public float Min = 0f; // 最小值
		public float Max = 0f; // 最大值
	} 
	// Defined in table: Globals
	[System.Serializable]
	public partial class GlobalsVector3
	{
		public float x = 0f; // X
		public float y = 0f; // Y
		public float z = 0f; // Z
	} 
	// Defined in table: Globals
	[System.Serializable]
	public partial class TutorialNode
	{
		/// <summary> 
		/// 是否触发新手引导
		/// </summary>
		public bool isTrigger = false; // 是否触发
		/// <summary> 
		/// 触发ID
		/// </summary>
		public int triggerID = 0; // 触发ID
		/// <summary> 
		/// 是否立即触发还是等待奖励界面结束
		/// </summary>
		public bool promptly = false; // 立即触发
	} 
	// Defined in table: Globals
	[System.Serializable]
	public partial class RandomItem
	{
		/// <summary> 
		/// 随机道具列表结构
		/// </summary>
		public int ItemID = 0; // 道具ID
		public ulong ItemNumber = 0; // 道具数量
		public float Rate = 0f; // 概率
	} 
	// Defined in table: Globals
	[System.Serializable]
	public partial class RangeItem
	{
		/// <summary> 
		/// 随机物品对象
		/// </summary>
		public int ItemID = 0; // 道具ID
		public long Max = 0; // 最大
		public long Min = 0; // 最小
	} 
	// Defined in table: Globals
	[System.Serializable]
	public partial class LocalItem
	{
		/// <summary> 
		/// 多语言功能
		/// </summary>
		public FunctionType LocalFunc = FunctionType.ChapterInfo; // 多语言功能
		/// <summary> 
		/// 多语言序号
		/// </summary>
		public int LocalOrder = 0; // 多语言序号
	} 
	// Defined in table: Globals
	[System.Serializable]
	public partial class EnemyInfo
	{
		public int ID = 0; 
		public int Count = 0; 
		public float X = 0f; 
		public float Y = 0f; 
		/// <summary> 
		/// 出现次数
		/// </summary>
		public int AppearTimes = 0; 
		/// <summary> 
		/// 出现顺序 0：stage加载完成后立即出现 1: 0出现的怪物被清除后出现 2:1出现的怪物被清除后出现
		/// </summary>
		public int AppearOrder = 0; 
	} 
	// Defined in table: Globals
	[System.Serializable]
	public partial class LootInfo
	{
		public int ID = 0; 
		public float DropChance = 0f; 
	} 
	// Defined in table: Globals
	[System.Serializable]
	public partial class EquipReward
	{
		public int Type = 0; // 装备类型
		public NewEquipQualityType Quality = NewEquipQualityType.Normal; // 品质
		public int Level = 0; // 等级
	} 
	// Defined in table: Globals
	[System.Serializable]
	public partial class RandomEquip
	{
		public int Set = 0; // 装备集合
		public NewEquipQualityType Quality = NewEquipQualityType.Normal; // 品质
		public float Rate = 0f; // 概率
	} 
	// Defined in table: Globals
	[System.Serializable]
	public partial class NPCInfo
	{
		public NPCType Type = NPCType.Godness; // 类型
		public float X = 0f; 
		public float Y = 0f; 
		public int AppearOrder = 0; 
	} 
	// Defined in table: Globals
	[System.Serializable]
	public partial class RandomItemSet
	{
		public int Set = 0; // 道具集合
		public int Number = 0; // 数量
		public float Rate = 0f; // 概率
	} 
	// Defined in table: Achievements
	[System.Serializable]
	public partial class AchievementsDefine
	{
		/// <summary> 
		/// 成就类别ID
		/// </summary>
		public AchievementsType Achievement = AchievementsType.MainLine; 
		/// <summary> 
		/// 完成条件
		/// </summary>
		public int Require = 0; 
		/// <summary> 
		/// 额外完成条件
		/// </summary>
		public int RequireEx = 0; 
		/// <summary> 
		/// 品质要求
		/// </summary>
		public NewEquipQualityType RequireQuality = NewEquipQualityType.Normal; 
		/// <summary> 
		/// 角色品质要求
		/// </summary>
		public RoleQualityType RoleQuality = RoleQualityType.Normal; 
		/// <summary> 
		/// 如果有品质要求,是否还要有数量要求
		/// </summary>
		public bool RequireQualityAndCount = false; 
		/// <summary> 
		/// 完成奖励
		/// </summary>
		public List<RewardItem> Reward = new List<RewardItem>(); 
		/// <summary> 
		/// 多语言定位
		/// </summary>
		public LocalItem LocalRequirement = new LocalItem(); 
		/// <summary> 
		/// 前往的目标UI
		/// </summary>
		public string TargetUI = ""; 
	} 
	// Defined in table: AudioConfig
	[System.Serializable]
	public partial class AudioConfigDefine
	{
		/// <summary> 
		/// 音效ID
		/// </summary>
		public int ID = 0; 
		/// <summary> 
		/// 音乐类型
		/// </summary>
		public AudioType soundType = AudioType.MainMusic; 
		/// <summary> 
		/// 触发UI名儿
		/// </summary>
		public string formName = ""; 
		/// <summary> 
		/// 音频路径
		/// </summary>
		public string audioClipPath = ""; 
		/// <summary> 
		/// 是否预加载
		/// </summary>
		public bool isPreLoad = false; 
		/// <summary> 
		/// 1
		/// </summary>
		public float volumeScale = 0f; 
	} 
	// Defined in table: Avatar
	[System.Serializable]
	public partial class AvatarDefine
	{
		/// <summary> 
		/// 道具ID
		/// </summary>
		public int Id = 0; 
		/// <summary> 
		/// 图集名称
		/// </summary>
		public AtlasStructure Avatar = new AtlasStructure(); 
	} 
	// Defined in table: Banner
	[System.Serializable]
	public partial class BannerDefine
	{
		/// <summary> 
		/// BannerID
		/// </summary>
		public int BannerID = 0; 
		/// <summary> 
		/// banner类型
		/// </summary>
		public BannerType BannerType = BannerType.Notice; 
		/// <summary> 
		/// 优先级
		/// </summary>
		public int Priority = 0; 
		/// <summary> 
		/// 在第几章后触发
		/// </summary>
		public int TriggerChapter = 0; 
		/// <summary> 
		/// 除登录触发外的触发的次数
		/// </summary>
		public int CanTriggerTimes = 0; 
		/// <summary> 
		/// 登录触发次数
		/// </summary>
		public int LoginTriggerTimes = 0; 
		/// <summary> 
		/// 滞留时间(秒)
		/// </summary>
		public int Duration = 0; 
		/// <summary> 
		/// 对应shop表的货物ID
		/// </summary>
		public int ShopID = 0; 
		/// <summary> 
		/// 使用的UI名称
		/// </summary>
		public string UIName = ""; 
		/// <summary> 
		/// 角色ID
		/// </summary>
		public int RoleID = 0; 
	} 
	// Defined in table: Boss
	[System.Serializable]
	public partial class BossDefine
	{
		/// <summary> 
		/// BossID
		/// </summary>
		public int EnemyID = 0; 
		/// <summary> 
		/// Boss阶段
		/// </summary>
		public Stage Stage = Stage.First; 
		/// <summary> 
		/// 攻击类型
		/// </summary>
		public EnemyAttackType EnemyAttackType = EnemyAttackType.Melee; 
		/// <summary> 
		/// Boss血量 总血量=第一阶段+第二阶段
		/// </summary>
		public int HP = 0; 
		/// <summary> 
		/// 攻击力
		/// </summary>
		public int Attack = 0; 
		/// <summary> 
		/// 移动速度
		/// </summary>
		public float Speed = 0f; 
		/// <summary> 
		/// 攻击间隔（秒）
		/// </summary>
		public float AttackInterval = 0f; 
		/// <summary> 
		/// 攻击方式数量
		/// </summary>
		public int AttackAniCount = 0; 
		/// <summary> 
		/// 可翻转
		/// </summary>
		public bool IsFlip = false; 
		/// <summary> 
		/// 死亡类型
		/// </summary>
		public EnemyDeadType DeadType = EnemyDeadType.None; 
		/// <summary> 
		/// 死亡后提供的ex能量
		/// </summary>
		public int ExSkillPower = 0; 
		/// <summary> 
		/// Spine路径
		/// </summary>
		public string SpinePath = ""; 
		/// <summary> 
		/// 怪物额外预制体
		/// </summary>
		public string ExtraObject = ""; 
		/// <summary> 
		/// 怪物的阶段数量(0,1代表只有一个阶段)
		/// </summary>
		public int StageCount = 0; 
	} 
	// Defined in table: BoxSet
	[System.Serializable]
	public partial class BoxSetDefine
	{
		/// <summary> 
		/// 集合ID
		/// </summary>
		public int SetID = 0; 
		/// <summary> 
		/// 物品列表
		/// </summary>
		public List<RandomItem> Items = new List<RandomItem>(); 
		/// <summary> 
		/// 装备集合列表
		/// </summary>
		public List<RandomEquip> EquipSet = new List<RandomEquip>(); 
		/// <summary> 
		/// 物品集合列表
		/// </summary>
		public List<RandomItemSet> ItemSet = new List<RandomItemSet>(); 
	} 
	// Defined in table: ChapterInfo
	[System.Serializable]
	public partial class ChapterInfoDefine
	{
		/// <summary> 
		/// 章节
		/// </summary>
		public int Chapter = 0; 
		/// <summary> 
		/// 章节名称
		/// </summary>
		public string ChapterName = ""; 
		/// <summary> 
		/// 多语言定位
		/// </summary>
		public LocalItem LocalChapterName = new LocalItem(); 
		/// <summary> 
		/// 章节spine路径
		/// </summary>
		public string SpinePath = ""; 
		/// <summary> 
		/// 该章节玩家可升到的最高等级
		/// </summary>
		public int HeroMaxLevel = 0; 
		/// <summary> 
		/// 最大章节数
		/// </summary>
		public int MaxStageIndex = 0; 
		/// <summary> 
		/// 消耗体力数
		/// </summary>
		public int StaminaCost = 0; 
		/// <summary> 
		/// 章节首通奖励
		/// </summary>
		public List<RewardItem> FirstRewardItems = new List<RewardItem>(); 
		/// <summary> 
		/// 章节图片
		/// </summary>
		public AtlasStructure ChapterImage = new AtlasStructure(); 
		/// <summary> 
		/// 是否开放
		/// </summary>
		public int Open = 0; 
		/// <summary> 
		/// 背景渐变色
		/// </summary>
		public string GradientColor = ""; 
		/// <summary> 
		/// 每捡取一枚金币获得的钱数
		/// </summary>
		public int GoldPerCount = 0; 
		/// <summary> 
		/// 隐藏关卡
		/// </summary>
		public List<int> HiddenLevels = new List<int>(); 
		/// <summary> 
		/// 隐藏关卡会出现的次数
		/// </summary>
		public int HiddenLevelsCount = 0; 
		/// <summary> 
		/// 隐藏物品
		/// </summary>
		public List<int> HiddenObjects = new List<int>(); 
		/// <summary> 
		/// 隐藏物品会出现的次数
		/// </summary>
		public int HiddenObjectsCount = 0; 
		/// <summary> 
		/// 每个隐藏物能兑换多少钻石
		/// </summary>
		public int DiamondPerHiddenObject = 0; 
		/// <summary> 
		/// 隐藏物品图集
		/// </summary>
		public AtlasStructure HideGoodsIcon = new AtlasStructure(); 
	} 
	// Defined in table: ClearReward
	[System.Serializable]
	public partial class ClearRewardDefine
	{
		/// <summary> 
		/// 索引
		/// </summary>
		public int Index = 0; 
		/// <summary> 
		/// 章节
		/// </summary>
		public int Chapter = 0; 
		/// <summary> 
		/// 关卡
		/// </summary>
		public int Stage = 0; 
		/// <summary> 
		/// 关卡通关奖励
		/// </summary>
		public List<RewardItem> Rewards = new List<RewardItem>(); 
		/// <summary> 
		/// 物品集合索引
		/// </summary>
		public List<RewardItem> ItemSetIndex = new List<RewardItem>(); 
		/// <summary> 
		/// 离线奖励时间(秒)
		/// </summary>
		public int OfflineTime = 0; 
	} 
	// Defined in table: CycleShop
	[System.Serializable]
	public partial class CycleShopDefine
	{
		/// <summary> 
		/// 货物ID
		/// </summary>
		public int ShopIndex = 0; 
		/// <summary> 
		/// 购买周期
		/// </summary>
		public CycleType Cycle = CycleType.Daily; 
		/// <summary> 
		/// 商品名称
		/// </summary>
		public string ProductName = ""; 
		/// <summary> 
		/// 购买形式
		/// </summary>
		public ShopType ShopType = ShopType.Free; 
		/// <summary> 
		/// 谷歌商店产品ID
		/// </summary>
		public string GoogleProductId = ""; 
		public ProductType ProductType = ProductType.None; 
		/// <summary> 
		/// 面值
		/// </summary>
		public float DollarPrice = 0f; 
		/// <summary> 
		/// 装备
		/// </summary>
		public List<RandomEquip> EquipPool = new List<RandomEquip>(); 
		/// <summary> 
		/// 物品集合索引
		/// </summary>
		public List<RewardItem> ItemSetIndex = new List<RewardItem>(); 
		/// <summary> 
		/// 商品
		/// </summary>
		public List<RewardItem> Goods = new List<RewardItem>(); 
	} 
	// Defined in table: Dialogue
	[System.Serializable]
	public partial class DialogueDefine
	{
		/// <summary> 
		/// 对话ID
		/// </summary>
		public int Index = 0; 
		/// <summary> 
		/// 战斗开始对白
		/// </summary>
		public LocalItem StartLocalSystem = new LocalItem(); 
		/// <summary> 
		/// 战斗结束对白
		/// </summary>
		public LocalItem EndLocalSystem = new LocalItem(); 
		/// <summary> 
		/// 获得终极技能对白
		/// </summary>
		public LocalItem FinalSkillLocalSystem = new LocalItem(); 
		/// <summary> 
		/// 玩家死亡
		/// </summary>
		public LocalItem PlayerDeadLocalSystem = new LocalItem(); 
		/// <summary> 
		/// 进入关卡
		/// </summary>
		public LocalItem EnterChapterLocalSystem = new LocalItem(); 
	} 
	// Defined in table: ElementalDamageFormula
	[System.Serializable]
	public partial class ElementalDamageFormulaDefine
	{
		/// <summary> 
		/// 元素伤害类型
		/// </summary>
		public ElementalType ElementalType = ElementalType.None; 
		/// <summary> 
		/// 持续伤害类型
		/// </summary>
		public BuffHurtType BuffHurtType = BuffHurtType.Burned; 
		/// <summary> 
		/// 额外伤害比率
		/// </summary>
		public float HurtRatio = 0f; 
	} 
	// Defined in table: Enemy
	[System.Serializable]
	public partial class EnemyDefine
	{
		/// <summary> 
		/// 敌人ID
		/// </summary>
		public int EnemyID = 0; 
		/// <summary> 
		/// 攻击类型
		/// </summary>
		public EnemyAttackType EnemyAttackType = EnemyAttackType.Melee; 
		/// <summary> 
		/// 血量
		/// </summary>
		public int HP = 0; 
		/// <summary> 
		/// 攻击力
		/// </summary>
		public int Attack = 0; 
		/// <summary> 
		/// 移动速度
		/// </summary>
		public float Speed = 0f; 
		/// <summary> 
		/// 攻击间隔（秒）
		/// </summary>
		public float AttackInterval = 0f; 
		/// <summary> 
		/// 攻击动作数量
		/// </summary>
		public int AttackAniCount = 0; 
		/// <summary> 
		/// 可翻转
		/// </summary>
		public bool IsFlip = false; 
		/// <summary> 
		/// 死亡类型
		/// </summary>
		public EnemyDeadType DeadType = EnemyDeadType.None; 
		/// <summary> 
		/// 死亡ID（死亡后续）
		/// </summary>
		public int DeadID = 0; 
		/// <summary> 
		/// Spine路径
		/// </summary>
		public string SpinePath = ""; 
		/// <summary> 
		/// 怪物额外预制体
		/// </summary>
		public string ExtraObject = ""; 
		/// <summary> 
		/// 怪物的阶段数量(0,1代表只有一个阶段)
		/// </summary>
		public int StageCount = 0; 
		/// <summary> 
		/// 是否与障碍物产生碰撞
		/// </summary>
		public bool CollideWithObstacle = false; 
		/// <summary> 
		/// 死亡后提供的ex能量
		/// </summary>
		public int ExSkillPower = 0; 
		/// <summary> 
		/// 砍死敌人获得的时间收益（分钟）
		/// </summary>
		public int Score = 0; 
	} 
	// Defined in table: EquipLocationLevel
	[System.Serializable]
	public partial class EquipLocationLevelDefine
	{
		/// <summary> 
		/// 装备位置
		/// </summary>
		public EquipLocation Location = EquipLocation.Weapon; 
		/// <summary> 
		/// 等级
		/// </summary>
		public int Level = 0; 
		/// <summary> 
		/// 升级物品消耗
		/// </summary>
		public List<RewardItem> LevelUpConsume = new List<RewardItem>(); 
		/// <summary> 
		/// 升级物品总消耗
		/// </summary>
		public List<RewardItem> TotalConsume = new List<RewardItem>(); 
	} 
	// Defined in table: EquipMaterialMap
	[System.Serializable]
	public partial class EquipMaterialMapDefine
	{
		/// <summary> 
		/// 装备品质
		/// </summary>
		public NewEquipQualityType Quality = NewEquipQualityType.Normal; 
		/// <summary> 
		/// 装备位置
		/// </summary>
		public EquipLocation Location = EquipLocation.Weapon; 
		public int ItemID = 0; 
	} 
	// Defined in table: EquipOptional
	[System.Serializable]
	public partial class EquipOptionalDefine
	{
		/// <summary> 
		/// 对应item表的装备自选宝箱id
		/// </summary>
		public int ItemId = 0; 
		/// <summary> 
		/// 装备品质
		/// </summary>
		public NewEquipQualityType EquipQuality = NewEquipQualityType.Normal; 
		/// <summary> 
		/// 可选装备池
		/// </summary>
		public int OptionalSet = 0; 
	} 
	// Defined in table: EquipQuality
	[System.Serializable]
	public partial class EquipQualityDefine
	{
		/// <summary> 
		/// 装备品质
		/// </summary>
		public NewEquipQualityType Quality = NewEquipQualityType.Normal; 
		/// <summary> 
		/// 合成相同装备需求
		/// </summary>
		public int SynthesisSameEquip = 0; 
		/// <summary> 
		/// 合成材料需求
		/// </summary>
		public int SynthesisMaterial = 0; 
		/// <summary> 
		/// 降级材料获得量
		/// </summary>
		public int DowngradeMaterial = 0; 
		/// <summary> 
		/// 基础属性加成倍率
		/// </summary>
		public float BaseAttributeRate = 0f; 
		/// <summary> 
		/// 装备等级上限
		/// </summary>
		public int MaxLevel = 0; 
		/// <summary> 
		/// 基础分解产物
		/// </summary>
		public List<RewardItem> DecompositionBaseItem = new List<RewardItem>(); 
		/// <summary> 
		/// 返还总消耗的数量比率
		/// </summary>
		public float TotalConsumReturnRatio = 0f; 
		/// <summary> 
		/// 品质图标1(方框)
		/// </summary>
		public AtlasStructure QualitySprite1 = new AtlasStructure(); 
		/// <summary> 
		/// 品质图标1(圆圈)
		/// </summary>
		public AtlasStructure QualitySprite2 = new AtlasStructure(); 
		/// <summary> 
		/// 品质图标2(圆圈)
		/// </summary>
		public AtlasStructure QualitySprite3 = new AtlasStructure(); 
		/// <summary> 
		/// 签到装备品质图标
		/// </summary>
		public AtlasStructure SignInEquip = new AtlasStructure(); 
		/// <summary> 
		/// 品质强度系数
		/// </summary>
		public float PowerRate = 0f; 
	} 
	// Defined in table: EquipQualityGrowInfo
	[System.Serializable]
	public partial class EquipQualityGrowInfoDefine
	{
		/// <summary> 
		/// 主属性
		/// </summary>
		public AttributeType BaseAttributeType = AttributeType.HP; 
		/// <summary> 
		/// 不同品质的每级增长
		/// </summary>
		public List<float> Grow = new List<float>(); 
	} 
	// Defined in table: EquipSet
	[System.Serializable]
	public partial class EquipSetDefine
	{
		/// <summary> 
		/// 集合ID
		/// </summary>
		public int SetID = 0; 
		/// <summary> 
		/// 装备ID
		/// </summary>
		public int EquipType = 0; 
	} 
	// Defined in table: EquipSetInfo
	[System.Serializable]
	public partial class EquipSetInfoDefine
	{
		/// <summary> 
		/// 集合ID
		/// </summary>
		public int SetID = 0; 
		/// <summary> 
		/// 对应item表的itemId
		/// </summary>
		public int ItemId = 0; 
	} 
	// Defined in table: EquipShop
	[System.Serializable]
	public partial class EquipShopDefine
	{
		/// <summary> 
		/// 装备商品ID
		/// </summary>
		public int Index = 0; 
		/// <summary> 
		/// 抽取次数
		/// </summary>
		public int DrawTimes = 0; 
		/// <summary> 
		/// 价格
		/// </summary>
		public RewardItem Price = new RewardItem(); 
		/// <summary> 
		/// 概率奖池
		/// </summary>
		public List<RandomEquip> Pool = new List<RandomEquip>(); 
		/// <summary> 
		/// 保底池ID
		/// </summary>
		public int FloorID = 0; 
	} 
	// Defined in table: EquipShopFloor
	[System.Serializable]
	public partial class EquipShopFloorDefine
	{
		/// <summary> 
		/// 保底ID
		/// </summary>
		public int FloorID = 0; 
		/// <summary> 
		/// 保底品质
		/// </summary>
		public NewEquipQualityType Floors = NewEquipQualityType.Normal; 
		/// <summary> 
		/// 保底数量
		/// </summary>
		public int FloorsNumber = 0; 
		/// <summary> 
		/// 保底装备池
		/// </summary>
		public int FloorsSet = 0; 
		/// <summary> 
		/// 大保底品质
		/// </summary>
		public NewEquipQualityType SecondFloors = NewEquipQualityType.Normal; 
		/// <summary> 
		/// 大保底套装
		/// </summary>
		public SpecialEquipSerialType SerialType = SpecialEquipSerialType.None; 
		/// <summary> 
		/// 大保底数量
		/// </summary>
		public int SecondFloorsNumber = 0; 
		/// <summary> 
		/// 大保底装备池
		/// </summary>
		public int SecondFloorsSet = 0; 
	} 
	// Defined in table: EquipType
	[System.Serializable]
	public partial class EquipTypeDefine
	{
		/// <summary> 
		/// 装备类别ID
		/// </summary>
		public int Type = 0; 
		/// <summary> 
		/// 名称
		/// </summary>
		public string Name = ""; 
		/// <summary> 
		/// 装备位置
		/// </summary>
		public EquipLocation Location = EquipLocation.Weapon; 
		/// <summary> 
		/// 基础属性类别
		/// </summary>
		public AttributeType BaseAttributeType = AttributeType.HP; 
		/// <summary> 
		/// 所属套装
		/// </summary>
		public SpecialEquipSerialType SerialType = SpecialEquipSerialType.None; 
		/// <summary> 
		/// 基础属性值(品质依次递增)
		/// </summary>
		public List<float> BaseAttributeValue = new List<float>(); 
		/// <summary> 
		/// 品质技能
		/// </summary>
		public List<int> QualitySkill = new List<int>(); 
		/// <summary> 
		/// 辅助属性类别
		/// </summary>
		public AttributeType AuxiliaryType = AttributeType.HP; 
		/// <summary> 
		/// 辅助属性值
		/// </summary>
		public float Auxiliary = 0f; 
		/// <summary> 
		/// 稀有属性类别
		/// </summary>
		public AttributeType RareType = AttributeType.HP; 
		/// <summary> 
		/// 稀有属性值
		/// </summary>
		public float Rare = 0f; 
		/// <summary> 
		/// 史诗属性类别
		/// </summary>
		public AttributeType EpicType = AttributeType.HP; 
		/// <summary> 
		/// 史诗属性值
		/// </summary>
		public float Epic = 0f; 
		/// <summary> 
		/// 传说属性类别
		/// </summary>
		public AttributeType LegendaryType = AttributeType.HP; 
		/// <summary> 
		/// 传说属性值
		/// </summary>
		public float Legendary = 0f; 
		/// <summary> 
		/// 神话属性类别
		/// </summary>
		public AttributeType MythicType = AttributeType.HP; 
		/// <summary> 
		/// 神话属性值
		/// </summary>
		public float Mythic = 0f; 
		/// <summary> 
		/// 展示文字
		/// </summary>
		public string TipsData = ""; 
		/// <summary> 
		/// 多语言定位（疑似没用）
		/// </summary>
		public LocalItem LocalTipsData = new LocalItem(); 
		/// <summary> 
		/// 说明文字
		/// </summary>
		public string TipsMsg = ""; 
		/// <summary> 
		/// 装备名字多语言定位
		/// </summary>
		public LocalItem LocalTipsMsg = new LocalItem(); 
		/// <summary> 
		/// 辅助属性类别说明文字
		/// </summary>
		public string AuxiliaryMsg = ""; 
		/// <summary> 
		/// 多语言定位
		/// </summary>
		public LocalItem LocalAuxiliaryMsg = new LocalItem(); 
	} 
	// Defined in table: General
	[System.Serializable]
	public partial class GeneralDefine
	{
		/// <summary> 
		/// 通用模式类型
		/// </summary>
		public GeneralType General_Type = GeneralType.BackGroundMove; 
		/// <summary> 
		/// 字符串0
		/// </summary>
		public string String_Arg0 = ""; 
		/// <summary> 
		/// 字符串1
		/// </summary>
		public string String_Arg1 = ""; 
		/// <summary> 
		/// 字符串2
		/// </summary>
		public string String_Arg2 = ""; 
		/// <summary> 
		/// 字符串3
		/// </summary>
		public string String_Arg3 = ""; 
		/// <summary> 
		/// 整形0
		/// </summary>
		public int Int_Arg0 = 0; 
		/// <summary> 
		/// 整型1
		/// </summary>
		public int Int_Arg1 = 0; 
		/// <summary> 
		/// 整型2
		/// </summary>
		public int Int_Arg2 = 0; 
		/// <summary> 
		/// 整型3
		/// </summary>
		public int Int_Arg3 = 0; 
		/// <summary> 
		/// 整型4
		/// </summary>
		public int Int_Arg4 = 0; 
		/// <summary> 
		/// 整型5
		/// </summary>
		public int Int_Arg5 = 0; 
		/// <summary> 
		/// 小数0
		/// </summary>
		public float Float_Arg0 = 0f; 
		/// <summary> 
		/// 小数0
		/// </summary>
		public float Float_Arg1 = 0f; 
		/// <summary> 
		/// 小数0
		/// </summary>
		public float Float_Arg2 = 0f; 
		/// <summary> 
		/// 小数范围0
		/// </summary>
		public RangeFloatValue RangeFloat_Arg0 = new RangeFloatValue(); 
		/// <summary> 
		/// 小数范围2
		/// </summary>
		public RangeFloatValue RangeFloat_Arg1 = new RangeFloatValue(); 
		/// <summary> 
		/// 整数范围0
		/// </summary>
		public RangeIntValue RangeInt_Arg0 = new RangeIntValue(); 
		/// <summary> 
		/// 整数范围1
		/// </summary>
		public RangeIntValue RangeInt_Arg1 = new RangeIntValue(); 
		/// <summary> 
		/// 整数范围2
		/// </summary>
		public RangeIntValue RangeInt_Arg2 = new RangeIntValue(); 
		/// <summary> 
		/// 整数范围3
		/// </summary>
		public RangeIntValue RangeInt_Arg3 = new RangeIntValue(); 
		/// <summary> 
		/// 整数范围4
		/// </summary>
		public RangeIntValue RangeInt_Arg4 = new RangeIntValue(); 
		/// <summary> 
		/// 奖励列表0
		/// </summary>
		public List<RewardItem> RewardList_Arg0 = new List<RewardItem>(); 
		/// <summary> 
		/// 奖励列表1
		/// </summary>
		public List<RewardItem> RewardList_Arg1 = new List<RewardItem>(); 
		/// <summary> 
		/// 奖励列表1
		/// </summary>
		public List<RewardItem> RewardList_Arg2 = new List<RewardItem>(); 
		/// <summary> 
		/// 图集图片0
		/// </summary>
		public AtlasStructure sprite_Arg0 = new AtlasStructure(); 
		/// <summary> 
		/// 图集图片1
		/// </summary>
		public AtlasStructure sprite_Arg1 = new AtlasStructure(); 
		/// <summary> 
		/// 图集图片2
		/// </summary>
		public AtlasStructure sprite_Arg2 = new AtlasStructure(); 
		/// <summary> 
		/// 浮点数列表0
		/// </summary>
		public List<float> FloatList_Arg0 = new List<float>(); 
		/// <summary> 
		/// 浮点数列表1
		/// </summary>
		public List<float> floatList_Arg1 = new List<float>(); 
		/// <summary> 
		/// 浮点数列表2
		/// </summary>
		public List<float> floatList_Arg2 = new List<float>(); 
		/// <summary> 
		/// 浮点数列表3
		/// </summary>
		public List<float> floatList_Arg3 = new List<float>(); 
		/// <summary> 
		/// 浮点数列表4
		/// </summary>
		public List<float> floatList_Arg4 = new List<float>(); 
		/// <summary> 
		/// 通用三维坐标
		/// </summary>
		public List<GlobalsVector3> myVectory3 = new List<GlobalsVector3>(); 
		/// <summary> 
		/// 整数列表
		/// </summary>
		public List<int> IntList_Arg0 = new List<int>(); 
		/// <summary> 
		/// 整数列表
		/// </summary>
		public List<int> IntList_Arg1 = new List<int>(); 
		public List<string> stringList_Arg0 = new List<string>(); 
	} 
	// Defined in table: HeroAwake
	[System.Serializable]
	public partial class HeroAwakeDefine
	{
		/// <summary> 
		/// 角色ID
		/// </summary>
		public int HeroID = 0; 
		/// <summary> 
		/// 觉醒星级
		/// </summary>
		public int AwakeLevel = 0; 
		/// <summary> 
		/// 等级要求
		/// </summary>
		public int RequireHeroLevel = 0; 
		/// <summary> 
		/// 可达最大等级
		/// </summary>
		public int MaxLevel = 0; 
		/// <summary> 
		/// 觉醒消耗
		/// </summary>
		public List<RewardItem> Consume = new List<RewardItem>(); 
		/// <summary> 
		/// 奥义ID
		/// </summary>
		public int FinalSkillID = 0; 
	} 
	// Defined in table: HeroCharacters
	[System.Serializable]
	public partial class HeroCharactersDefine
	{
		/// <summary> 
		/// 角色ID
		/// </summary>
		public int ID = 0; 
		/// <summary> 
		/// 品质
		/// </summary>
		public RoleQualityType QualityType = RoleQualityType.Normal; 
		/// <summary> 
		/// 名称
		/// </summary>
		public string Name = ""; 
		/// <summary> 
		/// 多语言定位
		/// </summary>
		public LocalItem LocalName = new LocalItem(); 
		/// <summary> 
		/// 角色描述多语言
		/// </summary>
		public LocalItem LocalDescription = new LocalItem(); 
		/// <summary> 
		/// 跳转提示内容
		/// </summary>
		public LocalItem LocalJumpTips = new LocalItem(); 
		/// <summary> 
		/// 排行榜顺序
		/// </summary>
		public int Order = 0; 
		/// <summary> 
		/// 碎片ID
		/// </summary>
		public int Shard = 0; 
		/// <summary> 
		/// 最大等级
		/// </summary>
		public int MaxLevel = 0; 
		/// <summary> 
		/// 商店购买ID
		/// </summary>
		public int ShopID = 0; 
		/// <summary> 
		/// 解锁角色消耗碎片
		/// </summary>
		public int UnlockConsumePuzzle = 0; 
		/// <summary> 
		/// 属性解锁等级
		/// </summary>
		public List<int> UnlockLvl = new List<int>(); 
		/// <summary> 
		/// 等级对应解锁属性
		/// </summary>
		public List<int> LvProperty = new List<int>(); 
		/// <summary> 
		/// 头像
		/// </summary>
		public AtlasStructure HeadImage = new AtlasStructure(); 
		/// <summary> 
		/// Spine路径
		/// </summary>
		public string SpinePath = ""; 
		/// <summary> 
		/// 菜单Spine路径
		/// </summary>
		public string MenuSpinePath = ""; 
		/// <summary> 
		/// 碎片
		/// </summary>
		public AtlasStructure PuzzleImage = new AtlasStructure(); 
		public string StartDrawAudio = ""; 
		/// <summary> 
		/// 超必杀释放时的大头动画
		/// </summary>
		public string SuperSkillSplash = ""; 
		/// <summary> 
		/// 超必杀释放时的大头动画的皮肤
		/// </summary>
		public string SuperSkillSplashSkin = ""; 
		/// <summary> 
		/// 排行榜背景图片
		/// </summary>
		public AtlasStructure RankingBg = new AtlasStructure(); 
		/// <summary> 
		/// 商店对应的背景图片
		/// </summary>
		public AtlasStructure ShopBg = new AtlasStructure(); 
		/// <summary> 
		/// 商店对应的背景图片
		/// </summary>
		public string ShopBgSprite = ""; 
	} 
	// Defined in table: HeroLevel
	[System.Serializable]
	public partial class HeroLevelDefine
	{
		/// <summary> 
		/// 角色ID
		/// </summary>
		public int ID = 0; 
		/// <summary> 
		/// 等级
		/// </summary>
		public int Level = 0; 
		/// <summary> 
		/// 最大血量
		/// </summary>
		public int Hp = 0; 
		/// <summary> 
		/// 最大精力
		/// </summary>
		public int Power = 0; 
		/// <summary> 
		/// 基础属性
		/// </summary>
		public float BaseProperty = 0f; 
		/// <summary> 
		/// 装备基础属性加成
		/// </summary>
		public float EquipmentMultiplier = 0f; 
		/// <summary> 
		/// 人物升级时回的血量
		/// </summary>
		public float HPRecoverPerLevelUp = 0f; 
		/// <summary> 
		/// 攻击力
		/// </summary>
		public int Atk = 0; 
		/// <summary> 
		/// 暴击率
		/// </summary>
		public float CritChance = 0f; 
		/// <summary> 
		/// 暴击伤害
		/// </summary>
		public float CritDamage = 0f; 
		/// <summary> 
		/// 闪避率
		/// </summary>
		public float Evasion = 0f; 
		/// <summary> 
		/// 移动速度(每个fixedUpdate移动的距离)
		/// </summary>
		public float MoveSpeed = 0f; 
		/// <summary> 
		/// 全伤害减免
		/// </summary>
		public float AllDamageReduction = 0f; 
		/// <summary> 
		/// 近战伤害减免
		/// </summary>
		public float ShortDamageReduction = 0f; 
		/// <summary> 
		/// 远程伤害减免
		/// </summary>
		public float LongDamageReduction = 0f; 
		/// <summary> 
		/// BOSS伤害减免
		/// </summary>
		public float BossDamageReduction = 0f; 
		/// <summary> 
		/// 近伤害加成
		/// </summary>
		public float ShortDamageBonus = 0f; 
		/// <summary> 
		/// 远程害加成
		/// </summary>
		public float LongDamageBonus = 0f; 
		/// <summary> 
		/// boss伤害加成
		/// </summary>
		public float BossDamageBonus = 0f; 
		/// <summary> 
		/// 全伤害加成
		/// </summary>
		public float AllDamageBonus = 0f; 
		/// <summary> 
		/// 血量恢复率
		/// </summary>
		public float RecoveryRatio = 0f; 
		/// <summary> 
		/// 能量消耗速度
		/// </summary>
		public float PowerCostPerDistance = 0f; 
		/// <summary> 
		/// 开始画线时能量的消耗量
		/// </summary>
		public float PowerCostWhenStart = 0f; 
		/// <summary> 
		/// 画线时每0.02秒消耗的能量
		/// </summary>
		public float PowerCostPerSecond = 0f; 
		/// <summary> 
		/// 能量恢复速度(每秒回复的百分比量)
		/// </summary>
		public float PowerRecoverSpeed = 0f; 
		/// <summary> 
		/// 一击必杀概率(对小怪)
		/// </summary>
		public float OneHitKill = 0f; 
		/// <summary> 
		/// 升级消耗
		/// </summary>
		public List<RewardItem> LevelUpConsume = new List<RewardItem>(); 
		/// <summary> 
		/// 大招所需能量
		/// </summary>
		public int ExSkillPowerNeed = 0; 
	} 
	// Defined in table: HeroLevelInStage
	[System.Serializable]
	public partial class HeroLevelInStageDefine
	{
		/// <summary> 
		/// 等级
		/// </summary>
		public int Level = 0; 
		/// <summary> 
		/// 升至本级所需经验
		/// </summary>
		public int ExpNeed = 0; 
	} 
	// Defined in table: HighGrowthFund
	[System.Serializable]
	public partial class HighGrowthFundDefine
	{
		/// <summary> 
		/// 索引
		/// </summary>
		public int ID = 0; 
		/// <summary> 
		/// 章节ID
		/// </summary>
		public int ChapterID = 0; 
		/// <summary> 
		/// 免费奖励
		/// </summary>
		public RewardItem FreeReward = new RewardItem(); 
		/// <summary> 
		/// 普通奖励
		/// </summary>
		public RewardItem NormalReward = new RewardItem(); 
		/// <summary> 
		/// 高级奖励
		/// </summary>
		public RewardItem HighReward = new RewardItem(); 
		/// <summary> 
		/// 多语言定位
		/// </summary>
		public LocalItem LocalSystem = new LocalItem(); 
	} 
	// Defined in table: Item
	[System.Serializable]
	public partial class ItemDefine
	{
		/// <summary> 
		/// 道具ID
		/// </summary>
		public int Id = 0; 
		/// <summary> 
		/// 名称
		/// </summary>
		public string Name = ""; 
		/// <summary> 
		/// 多语言定位
		/// </summary>
		public LocalItem LocalName = new LocalItem(); 
		/// <summary> 
		/// 描述
		/// </summary>
		public string Description = ""; 
		/// <summary> 
		/// 多语言定位
		/// </summary>
		public LocalItem LocalDescription = new LocalItem(); 
		/// <summary> 
		/// 道具类型
		/// </summary>
		public ItemType ItemTypeID = ItemType.Other; 
		/// <summary> 
		/// 图集名称
		/// </summary>
		public AtlasStructure icon = new AtlasStructure(); 
		/// <summary> 
		/// Loot图标
		/// </summary>
		public AtlasStructure lootIcon = new AtlasStructure(); 
		/// <summary> 
		/// 所属套装
		/// </summary>
		public SpecialEquipSerialType SerialType = SpecialEquipSerialType.None; 
		/// <summary> 
		/// 物品默认品质
		/// </summary>
		public NewEquipQualityType Quality = NewEquipQualityType.Normal; 
		public int MapID = 0; 
	} 
	// Defined in table: ItemSet
	[System.Serializable]
	public partial class ItemSetDefine
	{
		/// <summary> 
		/// 集合ID
		/// </summary>
		public int SetID = 0; 
		/// <summary> 
		/// 物品ID
		/// </summary>
		public int ItemID = 0; 
	} 
	// Defined in table: ItemSetInfo
	[System.Serializable]
	public partial class ItemSetInfoDefine
	{
		/// <summary> 
		/// 集合ID
		/// </summary>
		public int SetID = 0; 
		/// <summary> 
		/// 对应item表的itemId
		/// </summary>
		public int ItemId = 0; 
	} 
	// Defined in table: Localization
	[System.Serializable]
	public partial class LocalizationDefine
	{
		/// <summary> 
		/// 类型ID
		/// </summary>
		public FunctionType Module = FunctionType.ChapterInfo; 
		/// <summary> 
		/// 序号
		/// </summary>
		public int Order = 0; 
		/// <summary> 
		/// 中文
		/// </summary>
		public string Chinese = ""; 
		public List<KeyInt_ValueString> ChineseKeyValue = new List<KeyInt_ValueString>(); 
		public List<string> ChineseStrings = new List<string>(); 
		/// <summary> 
		/// 英文
		/// </summary>
		public string English = ""; 
		public List<KeyInt_ValueString> EnglishKeyValue = new List<KeyInt_ValueString>(); 
		public List<string> EnglishStrings = new List<string>(); 
		/// <summary> 
		/// 繁体中文
		/// </summary>
		public string ChineseTraditional = ""; 
		public List<KeyInt_ValueString> ChineseTraditionalKeyValue = new List<KeyInt_ValueString>(); 
		public List<string> ChineseTraditionalStrings = new List<string>(); 
	} 
	// Defined in table: LootOnlyInCombat
	[System.Serializable]
	public partial class LootOnlyInCombatDefine
	{
		/// <summary> 
		/// 道具ID
		/// </summary>
		public int Id = 0; 
		/// <summary> 
		/// 名称
		/// </summary>
		public string Name = ""; 
		/// <summary> 
		/// 预制体路径
		/// </summary>
		public string PrefabPath = ""; 
		/// <summary> 
		/// 存在持续时间
		/// </summary>
		public float ExistDuration = 0f; 
		public float FloatArg0 = 0f; 
		public float FloatArg1 = 0f; 
		/// <summary> 
		/// 增加的最大气槽量
		/// </summary>
		public int IntArg0 = 0; 
	} 
	// Defined in table: MapObject
	[System.Serializable]
	public partial class MapObjectDefine
	{
		/// <summary> 
		/// 障碍物ID
		/// </summary>
		public int ID = 0; 
		/// <summary> 
		/// 名称
		/// </summary>
		public string Name = ""; 
		/// <summary> 
		/// 是否无敌
		/// </summary>
		public bool Invincible = false; 
		/// <summary> 
		/// 生命值
		/// </summary>
		public int Health = 0; 
		/// <summary> 
		/// 预制体路径
		/// </summary>
		public string PrefabPath = ""; 
		/// <summary> 
		/// 攻击力
		/// </summary>
		public int Atk = 0; 
		public float FloatArg0 = 0f; 
		public float FloatArg1 = 0f; 
		public int IntArg0 = 0; 
	} 
	// Defined in table: MapRandomPool
	[System.Serializable]
	public partial class MapRandomPoolDefine
	{
		/// <summary> 
		/// ID
		/// </summary>
		public int index = 0; 
		/// <summary> 
		/// 地图数据路径
		/// </summary>
		public List<string> MapPaths = new List<string>(); 
	} 
	// Defined in table: MapTape
	[System.Serializable]
	public partial class MapTapeDefine
	{
		/// <summary> 
		/// 章节
		/// </summary>
		public int Chapter = 0; 
		/// <summary> 
		/// 关卡
		/// </summary>
		public int Stage = 0; 
		/// <summary> 
		/// 多语言定位
		/// </summary>
		public LocalItem LoacalName = new LocalItem(); 
		/// <summary> 
		/// 多语言定位2
		/// </summary>
		public LocalItem LoacalName2 = new LocalItem(); 
	} 
	// Defined in table: ModuleConfig
	[System.Serializable]
	public partial class ModuleConfigDefine
	{
		/// <summary> 
		/// 类型
		/// </summary>
		public UIModuleType ModuleType = UIModuleType.Challenge; 
		/// <summary> 
		/// 通关章节
		/// </summary>
		public int UnlockChapter = 0; 
		/// <summary> 
		/// 预设物路径
		/// </summary>
		public string prefabPath = ""; 
		/// <summary> 
		/// 标题路径
		/// </summary>
		public string TitlePath = ""; 
	} 
	// Defined in table: NormalGrowthFund
	[System.Serializable]
	public partial class NormalGrowthFundDefine
	{
		/// <summary> 
		/// 索引
		/// </summary>
		public int ID = 0; 
		/// <summary> 
		/// 章节ID
		/// </summary>
		public int ChapterID = 0; 
		/// <summary> 
		/// 免费奖励
		/// </summary>
		public RewardItem FreeReward = new RewardItem(); 
		/// <summary> 
		/// 普通奖励
		/// </summary>
		public RewardItem NormalReward = new RewardItem(); 
		/// <summary> 
		/// 高级奖励
		/// </summary>
		public RewardItem HighReward = new RewardItem(); 
		/// <summary> 
		/// 多语言定位
		/// </summary>
		public LocalItem LocalSystem = new LocalItem(); 
	} 
	// Defined in table: NPC
	[System.Serializable]
	public partial class SkillInSale
	{
		public int skill = 0; // 技能
		public int price = 0; // 价格
	} 
	// Defined in table: NPC
	[System.Serializable]
	public partial class NPCDefine
	{
		/// <summary> 
		/// NPC类型
		/// </summary>
		public NPCType ID = NPCType.Godness; 
		/// <summary> 
		/// 名字
		/// </summary>
		public string Name = ""; 
		/// <summary> 
		/// 可以刷到的技能列表
		/// </summary>
		public List<int> SkillsID = new List<int>(); 
		/// <summary> 
		/// 售卖的技能
		/// </summary>
		public List<SkillInSale> SkillsInSale = new List<SkillInSale>(); 
		/// <summary> 
		/// 显示在UI上的spine路径
		/// </summary>
		public string SpinePath = ""; 
		/// <summary> 
		/// 预制体路径
		/// </summary>
		public string PrefabPath = ""; 
		/// <summary> 
		/// 图集名称
		/// </summary>
		public AtlasStructure icon = new AtlasStructure(); 
		/// <summary> 
		/// FloatArg0
		/// </summary>
		public float FloatArg0 = 0f; 
	} 
	// Defined in table: Offline
	[System.Serializable]
	public partial class OfflineDefine
	{
		/// <summary> 
		/// 章节
		/// </summary>
		public int Chapter = 0; 
		/// <summary> 
		/// 基础奖励
		/// </summary>
		public List<RewardItem> BaseRewards = new List<RewardItem>(); 
		/// <summary> 
		/// 基础奖励结算周期(秒)
		/// </summary>
		public int BaseCycle = 0; 
		/// <summary> 
		/// 最大结算周期
		/// </summary>
		public int MaxBaseCycle = 0; 
		/// <summary> 
		/// 道具结算周期(秒)
		/// </summary>
		public int Cycle = 0; 
		/// <summary> 
		/// 最大结算周期
		/// </summary>
		public int MaxCycle = 0; 
		/// <summary> 
		/// 能量石
		/// </summary>
		public List<RandomItem> RandomItems = new List<RandomItem>(); 
		/// <summary> 
		/// 物品集合索引
		/// </summary>
		public List<RandomItemSet> ItemSetIndex = new List<RandomItemSet>(); 
		/// <summary> 
		/// 装备集合索引
		/// </summary>
		public List<RandomEquip> EquipSetIndex = new List<RandomEquip>(); 
	} 
	// Defined in table: PassReward
	[System.Serializable]
	public partial class PassRewardDefine
	{
		/// <summary> 
		/// 活动周期
		/// </summary>
		public int Cycle = 0; 
		/// <summary> 
		/// 通行证类别
		/// </summary>
		public PassType PassType = PassType.Free; 
		/// <summary> 
		/// 等级
		/// </summary>
		public int Level = 0; 
		/// <summary> 
		/// 经验需求
		/// </summary>
		public int ExpRequire = 0; 
		/// <summary> 
		/// 物品
		/// </summary>
		public List<RewardItem> Reward = new List<RewardItem>(); 
		/// <summary> 
		/// 物品集合
		/// </summary>
		public List<RewardItem> ItemSetIndex = new List<RewardItem>(); 
		/// <summary> 
		/// 装备池
		/// </summary>
		public List<RandomEquip> EquipPool = new List<RandomEquip>(); 
		/// <summary> 
		/// 金币秒数
		/// </summary>
		public int CoinSeconds = 0; 
		/// <summary> 
		/// 体力
		/// </summary>
		public int Strength = 0; 
		/// <summary> 
		/// 通行证名称
		/// </summary>
		public LocalItem SeasonName = new LocalItem(); 
	} 
	// Defined in table: PiggyBank
	[System.Serializable]
	public partial class PiggyBankDefine
	{
		/// <summary> 
		/// 轮数id
		/// </summary>
		public int Cycle = 0; 
		/// <summary> 
		/// 需要通关关卡数
		/// </summary>
		public int Require = 0; 
		/// <summary> 
		/// 商店ID
		/// </summary>
		public int ShopID = 0; 
		/// <summary> 
		/// 名称
		/// </summary>
		public string Name = ""; 
		/// <summary> 
		/// 初始钻石数
		/// </summary>
		public int InitDiamond = 0; 
		/// <summary> 
		/// 积满钻石数
		/// </summary>
		public int FullDiamond = 0; 
		/// <summary> 
		/// 超值度
		/// </summary>
		public float Ratio = 0f; 
	} 
	// Defined in table: Rank
	[System.Serializable]
	public partial class RankDefine
	{
		/// <summary> 
		/// 奖励ID
		/// </summary>
		public int RankRewardID = 0; 
		/// <summary> 
		/// 排名类型
		/// </summary>
		public RankType RankType = RankType.RoleDonkey; 
		/// <summary> 
		/// 章节进度: 章节*1000 + 关卡
		/// </summary>
		public float RankValue = 0f; 
		/// <summary> 
		/// 奖励界面展示信息
		/// </summary>
		public string Msg = ""; 
		public List<RewardItem> SelfRewards = new List<RewardItem>(); 
		public List<RewardItem> Rewards = new List<RewardItem>(); 
	} 
	// Defined in table: RedDot
	[System.Serializable]
	public partial class RedDotDefine
	{
		/// <summary> 
		/// 功能ID
		/// </summary>
		public int moduleID = 0; 
		/// <summary> 
		/// 功能类型
		/// </summary>
		public ModuleType moduleType = ModuleType.SignIn; 
		/// <summary> 
		/// 路径
		/// </summary>
		public string path = ""; 
	} 
	// Defined in table: RetailSkills
	[System.Serializable]
	public partial class RetailSkillsDefine
	{
		/// <summary> 
		/// 技能ID
		/// </summary>
		public int SkillID = 0; 
		/// <summary> 
		/// 技能价格
		/// </summary>
		public List<RewardItem> SkillPrice = new List<RewardItem>(); 
		/// <summary> 
		/// 技能名称
		/// </summary>
		public string SkillName = ""; 
		/// <summary> 
		/// 技能描述
		/// </summary>
		public string SkillDes = ""; 
	} 
	// Defined in table: SevenDayEventExpBar
	[System.Serializable]
	public partial class SevenDayEventExpBarDefine
	{
		/// <summary> 
		/// id
		/// </summary>
		public int Id = 0; 
		/// <summary> 
		/// 获得该奖励需要的经验
		/// </summary>
		public int ENeed = 0; 
		/// <summary> 
		/// 奖品
		/// </summary>
		public List<RewardItem> RewardItems = new List<RewardItem>(); 
		/// <summary> 
		/// 装备
		/// </summary>
		public List<EquipReward> Equips = new List<EquipReward>(); 
	} 
	// Defined in table: SevenDayEventTask
	[System.Serializable]
	public partial class SevenDayEventTaskDefine
	{
		/// <summary> 
		/// id
		/// </summary>
		public int Id = 0; 
		/// <summary> 
		/// 所属天
		/// </summary>
		public int Day = 0; 
		/// <summary> 
		/// 完成该任务获得的经验
		/// </summary>
		public int ENeed = 0; 
		/// <summary> 
		/// 奖品
		/// </summary>
		public List<RewardItem> RewardItems = new List<RewardItem>(); 
		public SevenDayTaskType TaskType = SevenDayTaskType.Login; 
		public int Require = 0; 
		public int RequireEx = 0; 
		public NewEquipQualityType EquipQuality = NewEquipQualityType.Normal; 
		/// <summary> 
		/// 描述
		/// </summary>
		public string Description = ""; 
		/// <summary> 
		/// 多语言定位
		/// </summary>
		public LocalItem LocalDescription = new LocalItem(); 
		/// <summary> 
		/// 目标UI
		/// </summary>
		public string TargetUI = ""; 
	} 
	// Defined in table: SevenDaySignIn
	[System.Serializable]
	public partial class SevenDaySignInDefine
	{
		/// <summary> 
		/// 第几天
		/// </summary>
		public uint Day = 0; 
		/// <summary> 
		/// 奖励列表
		/// </summary>
		public List<RewardItem> RewardList = new List<RewardItem>(); 
		/// <summary> 
		/// 武器奖励
		/// </summary>
		public EquipReward Equip = new EquipReward(); 
		/// <summary> 
		/// 体力奖励
		/// </summary>
		public int Strength = 0; 
		/// <summary> 
		/// 物品集合索引
		/// </summary>
		public List<RewardItem> ItemSetIndex = new List<RewardItem>(); 
	} 
	// Defined in table: Shop
	[System.Serializable]
	public partial class ShopDefine
	{
		/// <summary> 
		/// 货物ID
		/// </summary>
		public int ShopIndex = 0; 
		/// <summary> 
		/// 对应Store表的ID
		/// </summary>
		public int StoreID = 0; 
		/// <summary> 
		/// 商品名称
		/// </summary>
		public string ProductName = ""; 
		public ShopItemType ItemType = ShopItemType.EquipBox; 
		/// <summary> 
		/// 购买形式
		/// </summary>
		public ShopType ShopType = ShopType.Free; 
		/// <summary> 
		/// 谷歌商店产品ID
		/// </summary>
		public string GoogleProductId = ""; 
		/// <summary> 
		/// 苹果商店产品ID
		/// </summary>
		public string AppleProductId = ""; 
		public ProductType ProductType = ProductType.None; 
		/// <summary> 
		/// 面值
		/// </summary>
		public float DollarPrice = 0f; 
		/// <summary> 
		/// 价格
		/// </summary>
		public RewardItem Price = new RewardItem(); 
		/// <summary> 
		/// 离线收益时间（秒）
		/// </summary>
		public int OfflineSeconds = 0; 
		/// <summary> 
		/// 冷却时间（秒）
		/// </summary>
		public int CoolDown = 0; 
		/// <summary> 
		/// 每日次数
		/// </summary>
		public int DailyTimes = 0; 
		/// <summary> 
		/// 商品
		/// </summary>
		public List<RewardItem> Goods = new List<RewardItem>(); 
		/// <summary> 
		/// 装备
		/// </summary>
		public List<EquipReward> Equips = new List<EquipReward>(); 
		/// <summary> 
		/// 物品集合索引
		/// </summary>
		public List<RewardItem> ItemSetIndex = new List<RewardItem>(); 
		/// <summary> 
		/// 装备商店索引
		/// </summary>
		public int EquipIndex = 0; 
		/// <summary> 
		/// 订阅内容索引
		/// </summary>
		public int SubIndex = 0; 
		/// <summary> 
		/// 订阅有效时长(天)
		/// </summary>
		public int SubDays = 0; 
		public int FondLevel = 0; 
		public int FondType = 0; 
	} 
	// Defined in table: SignInConfig
	[System.Serializable]
	public partial class SignInConfigDefine
	{
		/// <summary> 
		/// 第几天
		/// </summary>
		public uint Day = 0; 
		/// <summary> 
		/// 奖励列表
		/// </summary>
		public List<RewardItem> RewardList = new List<RewardItem>(); 
		/// <summary> 
		/// 武器奖励
		/// </summary>
		public EquipReward Equip = new EquipReward(); 
		/// <summary> 
		/// 描述
		/// </summary>
		public string desc = ""; 
		/// <summary> 
		/// 多语言定位
		/// </summary>
		public LocalItem LocalDesc = new LocalItem(); 
		/// <summary> 
		/// 对应的道具表ID(用来取icon)
		/// </summary>
		public int itemID = 0; 
		/// <summary> 
		/// 道具名称
		/// </summary>
		public string name = ""; 
		/// <summary> 
		/// 多语言定位
		/// </summary>
		public LocalItem LocalName = new LocalItem(); 
	} 
	// Defined in table: Skill
	[System.Serializable]
	public partial class SkillDefine
	{
		/// <summary> 
		/// 技能ID
		/// </summary>
		public int SkillID = 0; 
		/// <summary> 
		/// 技能名称
		/// </summary>
		public string SkillName = ""; 
		/// <summary> 
		/// 技能相应等级
		/// </summary>
		public int Level = 0; 
		/// <summary> 
		/// 重置等级ID
		/// </summary>
		public int ResetID = 0; 
		/// <summary> 
		/// 下一级ID
		/// </summary>
		public int NextLvlID = 0; 
		/// <summary> 
		/// 当前级数升级消耗
		/// </summary>
		public List<RewardItem> LevelUPConsume = new List<RewardItem>(); 
		/// <summary> 
		/// 多语言定位
		/// </summary>
		public LocalItem LocalSkillName = new LocalItem(); 
		/// <summary> 
		/// 技能描述
		/// </summary>
		public string SkillDes = ""; 
		/// <summary> 
		/// 多语言定位
		/// </summary>
		public LocalItem LocalSkillDes = new LocalItem(); 
		/// <summary> 
		/// 技能类型
		/// </summary>
		public SkillType SkillType = SkillType.Skill; 
		/// <summary> 
		/// 技能系列
		/// </summary>
		public SkillSeries DefaultSkillSeries = SkillSeries.None; 
		/// <summary> 
		/// 技能品阶
		/// </summary>
		public SkillGrade SkillGrade = SkillGrade.None; 
		/// <summary> 
		/// 可否升级
		/// </summary>
		public bool UpdateAvailable = false; 
		/// <summary> 
		/// 是否全角色
		/// </summary>
		public bool ForAllRoles = false; 
		/// <summary> 
		/// 可否叠加
		/// </summary>
		public bool StackAvailable = false; 
		/// <summary> 
		/// 特效优先
		/// </summary>
		public int FxFirst = 0; 
		/// <summary> 
		/// 关联技能
		/// </summary>
		public int LinkedSkill = 0; 
		/// <summary> 
		/// 影响效果
		/// </summary>
		public List<ImpactType> ImpactType = new List<ImpactType>(); 
		/// <summary> 
		/// 加值或者比率
		/// </summary>
		public List<AddAttributeType> AddAttributeType = new List<AddAttributeType>(); 
		/// <summary> 
		/// 目标Tag
		/// </summary>
		public List<string> AttackTargetTags = new List<string>(); 
		/// <summary> 
		/// 攻击方式
		/// </summary>
		public SkillAttackType SkillAttackType = SkillAttackType.None; 
		/// <summary> 
		/// 选中计算方式
		/// </summary>
		public SkillSelectorType SelectorType = SkillSelectorType.None; 
		/// <summary> 
		/// 选中条件
		/// </summary>
		public SelectorCondition SelectorCondition = SelectorCondition.Alive; 
		/// <summary> 
		/// 技能特效时长
		/// </summary>
		public float SkillEffectTime = 0f; 
		/// <summary> 
		/// 触发类型
		/// </summary>
		public SkillTriggerType TriggerType = SkillTriggerType.OnceRemove; 
		/// <summary> 
		/// 需要记录技能状态
		/// </summary>
		public bool NeedRecord = false; 
		/// <summary> 
		/// 玩家技能特效预制体
		/// </summary>
		public string ProjectilePrefab = ""; 
		/// <summary> 
		/// 打击特效预制体
		/// </summary>
		public string HitFxPrefab = ""; 
		/// <summary> 
		/// 技能动效图标路径
		/// </summary>
		public string iconAnimationPrefab = ""; 
		/// <summary> 
		/// 技能静态图标路径
		/// </summary>
		public AtlasStructure iconSpritePrefab = new AtlasStructure(); 
		/// <summary> 
		/// 属性图片预制体
		/// </summary>
		public string AttrIconPrefab = ""; 
		/// <summary> 
		/// 属性图片
		/// </summary>
		public AtlasStructure AttrIcon = new AtlasStructure(); 
		/// <summary> 
		/// 光线预制体
		/// </summary>
		public string SkyRay = ""; 
	} 
	// Defined in table: SkillLevel
	[System.Serializable]
	public partial class SkillLevelDefine
	{
		/// <summary> 
		/// 技能ID
		/// </summary>
		public int SkillID = 0; 
		/// <summary> 
		/// 等级
		/// </summary>
		public int Level = 0; 
		/// <summary> 
		/// 基础属性数值
		/// </summary>
		public List<float> EffectValue = new List<float>(); 
		/// <summary> 
		/// 对Boss属性数值
		/// </summary>
		public List<float> BossEffectValue = new List<float>(); 
		/// <summary> 
		/// 触发器ID
		/// </summary>
		public SkillTriggerEvent TriggerID = SkillTriggerEvent.None; 
		/// <summary> 
		/// 整型参数0
		/// </summary>
		public int IntArg0 = 0; 
		/// <summary> 
		/// 整型参数1
		/// </summary>
		public int IntArg1 = 0; 
		/// <summary> 
		/// 浮点数参数0
		/// </summary>
		public float FloatArg0 = 0f; 
		/// <summary> 
		/// 浮点数参数1
		/// </summary>
		public float FloatArg1 = 0f; 
		/// <summary> 
		/// 持续时间
		/// </summary>
		public float DurationTime = 0f; 
		/// <summary> 
		/// 伤害间隔
		/// </summary>
		public float AttackInterval = 0f; 
		/// <summary> 
		/// 攻击距离
		/// </summary>
		public float AttackDistance = 0f; 
		/// <summary> 
		/// 技能覆盖角度
		/// </summary>
		public int AttackAngle = 0; 
		/// <summary> 
		/// 元素伤害类型
		/// </summary>
		public ElementalType ElementalType = ElementalType.None; 
	} 
	// Defined in table: SkillSeriesInChapter
	[System.Serializable]
	public partial class SkillSeriesInChapterDefine
	{
		/// <summary> 
		/// 章节
		/// </summary>
		public int Chapter = 0; 
		/// <summary> 
		/// 必定出现的技能
		/// </summary>
		public List<SkillSeries> CertainSeries = new List<SkillSeries>(); 
		/// <summary> 
		/// 可能出现的技能
		/// </summary>
		public List<SkillSeries> PossibleSeries = new List<SkillSeries>(); 
		/// <summary> 
		/// 总共会出现的技能个数
		/// </summary>
		public int TotalCount = 0; 
		/// <summary> 
		/// 解锁本章节解锁的技能系列
		/// </summary>
		public List<SkillSeries> UnlockSeries = new List<SkillSeries>(); 
	} 
	// Defined in table: SkillSeriesInfo
	[System.Serializable]
	public partial class SkillSeriesInfoDefine
	{
		/// <summary> 
		/// 技能系列
		/// </summary>
		public SkillSeries SkillSeries = SkillSeries.None; 
		/// <summary> 
		/// 罗马数字图标
		/// </summary>
		public AtlasStructure Icon = new AtlasStructure(); 
	} 
	// Defined in table: SpecialChallenge
	[System.Serializable]
	public partial class SpecialChallengeDefine
	{
		/// <summary> 
		/// 需要通关的章节
		/// </summary>
		public int ChapterRequire = 0; 
		/// <summary> 
		/// 难度
		/// </summary>
		public int Difficulty = 0; 
		/// <summary> 
		/// 通关奖励
		/// </summary>
		public List<RewardItem> Rewards = new List<RewardItem>(); 
		/// <summary> 
		/// 挑战章节
		/// </summary>
		public int ChallengeStage = 0; 
	} 
	// Defined in table: SpecialChapterInfo
	[System.Serializable]
	public partial class SpecialChapterInfoDefine
	{
		/// <summary> 
		/// 章节名称
		/// </summary>
		public SpecialChapterType ChapterName = SpecialChapterType.Gold; 
		/// <summary> 
		/// 解锁条件(通关第几章节解锁)
		/// </summary>
		public int UnlockRequirement = 0; 
		/// <summary> 
		/// 体力消耗
		/// </summary>
		public int EnergyCost = 0; 
		/// <summary> 
		/// 每日进入次数
		/// </summary>
		public int DailyLimit = 0; 
		/// <summary> 
		/// 普通月卡增加的天数
		/// </summary>
		public int NormalMonthCardAdd = 0; 
		/// <summary> 
		/// 高级月卡增加的天数
		/// </summary>
		public int HighMonthCardAdd = 0; 
		/// <summary> 
		/// 离线收益上线(秒)
		/// </summary>
		public int RewardLimit = 0; 
		/// <summary> 
		/// 该章节玩家可升到的最高等级
		/// </summary>
		public int HeroMaxLevel = 0; 
		/// <summary> 
		/// 章节描述
		/// </summary>
		public string ChapterDescription = ""; 
		/// <summary> 
		/// 是否开放
		/// </summary>
		public int Open = 0; 
	} 
	// Defined in table: SpecialEquip
	[System.Serializable]
	public partial class SpecialEquipDefine
	{
		/// <summary> 
		/// 套装
		/// </summary>
		public SpecialEquipSerialType SerialType = SpecialEquipSerialType.None; 
		/// <summary> 
		/// 包括的装备们
		/// </summary>
		public List<int> Equips = new List<int>(); 
		/// <summary> 
		/// 商店展示用的Spine
		/// </summary>
		public string ShopSpine = ""; 
		/// <summary> 
		/// 多语言定位
		/// </summary>
		public LocalItem LocalName = new LocalItem(); 
	} 
	// Defined in table: SpineChangeSkin
	[System.Serializable]
	public partial class SpineChangeSkinDefine
	{
		/// <summary> 
		/// 武器ID
		/// </summary>
		public int ID = 0; 
		/// <summary> 
		/// 图片路径
		/// </summary>
		public string Path = ""; 
	} 
	// Defined in table: StageChapterChallengeInfo
	[System.Serializable]
	public partial class StageChapterChallengeInfoDefine
	{
		/// <summary> 
		/// 章节
		/// </summary>
		public int Chapter = 0; 
		/// <summary> 
		/// 关卡
		/// </summary>
		public int Stage = 0; 
		/// <summary> 
		/// 关卡进度
		/// </summary>
		public int Progress = 0; 
		/// <summary> 
		/// 关卡能提供的经验值
		/// </summary>
		public int StageExp = 0; 
		/// <summary> 
		/// 关卡能提供的金钱
		/// </summary>
		public int StageMoney = 0; 
		/// <summary> 
		/// 地图数据路径
		/// </summary>
		public List<string> MapPath = new List<string>(); 
		/// <summary> 
		/// 敌人信息
		/// </summary>
		public List<EnemyInfo> EnemyList = new List<EnemyInfo>(); 
		/// <summary> 
		/// NPC信息
		/// </summary>
		public List<NPCInfo> NPCList = new List<NPCInfo>(); 
		/// <summary> 
		/// 轮盘出现的奖励列表
		/// </summary>
		public List<RewardItem> TurnTable = new List<RewardItem>(); 
		/// <summary> 
		/// 掉落奖励列表
		/// </summary>
		public List<RangeItem> DropRewards = new List<RangeItem>(); 
		/// <summary> 
		/// 额外掉落(通过小节后飞到玩家身上,不计入后台的)
		/// </summary>
		public List<RangeItem> ExtraDropLoots = new List<RangeItem>(); 
		public List<RandomEquip> DropEquips = new List<RandomEquip>(); 
		/// <summary> 
		/// 怪物掉落的战利品(拾取后立即生效,不计入后台)
		/// </summary>
		public List<LootInfo> DropLoots = new List<LootInfo>(); 
		/// <summary> 
		/// 攻击系数
		/// </summary>
		public float AttackCoefficient = 0f; 
		/// <summary> 
		/// 血量系数
		/// </summary>
		public float HPCoefficient = 0f; 
		/// <summary> 
		/// 地图底图
		/// </summary>
		public string MapBottomSprite = ""; 
		/// <summary> 
		/// 地图底图2
		/// </summary>
		public string MapBottomSprite2 = ""; 
		/// <summary> 
		/// 地图额外预制体
		/// </summary>
		public List<string> ExtraObjects = new List<string>(); 
		/// <summary> 
		/// 价格系数
		/// </summary>
		public float PriceCoefficient = 0f; 
		/// <summary> 
		/// 赌徒最大生命值增加
		/// </summary>
		public List<float> GamblerMaxHpAdd = new List<float>(); 
		/// <summary> 
		/// 赌徒最大生命值减少
		/// </summary>
		public List<float> GamblerMaxHpMinus = new List<float>(); 
		/// <summary> 
		/// 技能商人售卖价格
		/// </summary>
		public int TraderPrice = 0; 
	} 
	// Defined in table: StageDiamondInfo
	[System.Serializable]
	public partial class StageDiamondInfoDefine
	{
		/// <summary> 
		/// 章节
		/// </summary>
		public int Chapter = 0; 
		/// <summary> 
		/// 关卡
		/// </summary>
		public int Stage = 0; 
		/// <summary> 
		/// 关卡能提供的经验值
		/// </summary>
		public int StageExp = 0; 
		/// <summary> 
		/// 地图数据路径
		/// </summary>
		public List<string> MapPath = new List<string>(); 
		/// <summary> 
		/// 敌人信息
		/// </summary>
		public List<EnemyInfo> EnemyList = new List<EnemyInfo>(); 
		/// <summary> 
		/// 可选择的技能
		/// </summary>
		public List<int> Skills = new List<int>(); 
		/// <summary> 
		/// 掉落奖励列表
		/// </summary>
		public List<RewardItem> DropRewards = new List<RewardItem>(); 
		/// <summary> 
		/// 怪物掉落的战利品(拾取后立即生效,不计入后台)
		/// </summary>
		public List<LootInfo> DropLoots = new List<LootInfo>(); 
		/// <summary> 
		/// 攻击系数
		/// </summary>
		public float AttackCoefficient = 0f; 
		/// <summary> 
		/// 血量系数
		/// </summary>
		public float HPCoefficient = 0f; 
		/// <summary> 
		/// 地图底图
		/// </summary>
		public string MapBottomSprite = ""; 
		/// <summary> 
		/// 地图底图2
		/// </summary>
		public string MapBottomSprite2 = ""; 
		/// <summary> 
		/// 地图额外预制体
		/// </summary>
		public List<string> ExtraObjects = new List<string>(); 
	} 
	// Defined in table: StageGold2Info
	[System.Serializable]
	public partial class GoldEnemyInfo
	{
		/// <summary> 
		/// 最小数量
		/// </summary>
		public int min = 0; 
		/// <summary> 
		/// 最大数量
		/// </summary>
		public int max = 0; 
		/// <summary> 
		/// 敌人的id
		/// </summary>
		public int id = 0; 
		/// <summary> 
		/// 出现的次数
		/// </summary>
		public int apTimes = 0; 
	} 
	// Defined in table: StageGold2Info
	[System.Serializable]
	public partial class StageGold2InfoDefine
	{
		/// <summary> 
		/// 章节
		/// </summary>
		public int Chapter = 0; 
		/// <summary> 
		/// 关卡
		/// </summary>
		public int Stage = 0; 
		/// <summary> 
		/// 关卡能提供的经验值
		/// </summary>
		public int StageExp = 0; 
		/// <summary> 
		/// 地图数据路径
		/// </summary>
		public List<string> MapPath = new List<string>(); 
		/// <summary> 
		/// 敌人信息
		/// </summary>
		public List<EnemyInfo> EnemyList = new List<EnemyInfo>(); 
		/// <summary> 
		/// 可选择的技能
		/// </summary>
		public List<int> Skills = new List<int>(); 
		/// <summary> 
		/// 掉落奖励列表
		/// </summary>
		public List<RewardItem> DropRewards = new List<RewardItem>(); 
		/// <summary> 
		/// 怪物掉落的战利品(拾取后立即生效,不计入后台)
		/// </summary>
		public List<LootInfo> DropLoots = new List<LootInfo>(); 
		/// <summary> 
		/// 攻击系数
		/// </summary>
		public float AttackCoefficient = 0f; 
		/// <summary> 
		/// 血量系数
		/// </summary>
		public float HPCoefficient = 0f; 
		/// <summary> 
		/// 地图底图
		/// </summary>
		public string MapBottomSprite = ""; 
		/// <summary> 
		/// 地图底图2
		/// </summary>
		public string MapBottomSprite2 = ""; 
		/// <summary> 
		/// 地图额外预制体
		/// </summary>
		public List<string> ExtraObjects = new List<string>(); 
		/// <summary> 
		/// 关卡限时
		/// </summary>
		public float LimitTime = 0f; 
		/// <summary> 
		/// 敌人随机池子
		/// </summary>
		public List<GoldEnemyInfo> EnemyRange = new List<GoldEnemyInfo>(); 
	} 
	// Defined in table: StageGoldInfo
	[System.Serializable]
	public partial class StageGoldInfoDefine
	{
		/// <summary> 
		/// 章节
		/// </summary>
		public int Chapter = 0; 
		/// <summary> 
		/// 关卡
		/// </summary>
		public int Stage = 0; 
		/// <summary> 
		/// 关卡能提供的经验值
		/// </summary>
		public int StageExp = 0; 
		/// <summary> 
		/// 地图数据路径
		/// </summary>
		public List<string> MapPath = new List<string>(); 
		/// <summary> 
		/// 敌人信息
		/// </summary>
		public List<EnemyInfo> EnemyList = new List<EnemyInfo>(); 
		/// <summary> 
		/// 可选择的技能
		/// </summary>
		public List<int> Skills = new List<int>(); 
		/// <summary> 
		/// 掉落奖励列表
		/// </summary>
		public List<RewardItem> DropRewards = new List<RewardItem>(); 
		/// <summary> 
		/// 怪物掉落的战利品(拾取后立即生效,不计入后台)
		/// </summary>
		public List<LootInfo> DropLoots = new List<LootInfo>(); 
		/// <summary> 
		/// 攻击系数
		/// </summary>
		public float AttackCoefficient = 0f; 
		/// <summary> 
		/// 血量系数
		/// </summary>
		public float HPCoefficient = 0f; 
		/// <summary> 
		/// 地图底图
		/// </summary>
		public string MapBottomSprite = ""; 
		/// <summary> 
		/// 地图底图2
		/// </summary>
		public string MapBottomSprite2 = ""; 
		/// <summary> 
		/// 地图额外预制体
		/// </summary>
		public List<string> ExtraObjects = new List<string>(); 
	} 
	// Defined in table: StageHeroPartInfo
	[System.Serializable]
	public partial class HeroPartDropInfo
	{
		public RoleQualityType Quality = RoleQualityType.Normal; 
		public int Count = 0; 
	} 
	// Defined in table: StageHeroPartInfo
	[System.Serializable]
	public partial class StageHeroPartInfoDefine
	{
		/// <summary> 
		/// 难度
		/// </summary>
		public int Difficulty = 0; 
		/// <summary> 
		/// 关卡
		/// </summary>
		public int Stage = 0; 
		/// <summary> 
		/// 关卡能提供的经验值
		/// </summary>
		public int StageExp = 0; 
		/// <summary> 
		/// 地图数据路径
		/// </summary>
		public List<string> MapPath = new List<string>(); 
		/// <summary> 
		/// 敌人信息
		/// </summary>
		public List<EnemyInfo> EnemyList = new List<EnemyInfo>(); 
		/// <summary> 
		/// 可选择的技能
		/// </summary>
		public List<int> Skills = new List<int>(); 
		/// <summary> 
		/// 掉落碎片数量
		/// </summary>
		public List<HeroPartDropInfo> DropRewardsCount = new List<HeroPartDropInfo>(); 
		/// <summary> 
		/// 怪物掉落的战利品(拾取后立即生效,不计入后台)
		/// </summary>
		public List<LootInfo> DropLoots = new List<LootInfo>(); 
		/// <summary> 
		/// 攻击系数
		/// </summary>
		public float AttackCoefficient = 0f; 
		/// <summary> 
		/// 血量系数
		/// </summary>
		public float HPCoefficient = 0f; 
		/// <summary> 
		/// 地图底图
		/// </summary>
		public string MapBottomSprite = ""; 
		/// <summary> 
		/// 地图底图2
		/// </summary>
		public string MapBottomSprite2 = ""; 
		/// <summary> 
		/// 地图额外预制体
		/// </summary>
		public List<string> ExtraObjects = new List<string>(); 
	} 
	// Defined in table: StageInfo
	[System.Serializable]
	public partial class Vec2
	{
		public int X = 0; 
		public int Y = 0; 
	} 
	// Defined in table: StageInfo
	[System.Serializable]
	public partial class StageInfoDefine
	{
		/// <summary> 
		/// 章节
		/// </summary>
		public int Chapter = 0; 
		/// <summary> 
		/// 关卡
		/// </summary>
		public int Stage = 0; 
		/// <summary> 
		/// 地图大小
		/// </summary>
		public Vec2 MapSize = new Vec2(); 
		/// <summary> 
		/// 玩家初始位置
		/// </summary>
		public Vec2 InitPos = new Vec2(); 
		/// <summary> 
		/// 关卡进度
		/// </summary>
		public float Progress = 0f; 
		/// <summary> 
		/// 关卡能提供的经验值
		/// </summary>
		public int StageExp = 0; 
		/// <summary> 
		/// 关卡能提供的金钱
		/// </summary>
		public int StageMoney = 0; 
		/// <summary> 
		/// 地图数据路径
		/// </summary>
		public List<string> MapPath = new List<string>(); 
		/// <summary> 
		/// 随机地图的分组ID
		/// </summary>
		public int RandomMapsGroup = 0; 
		/// <summary> 
		/// 敌人信息
		/// </summary>
		public List<EnemyInfo> EnemyList = new List<EnemyInfo>(); 
		/// <summary> 
		/// Boss演出
		/// </summary>
		public BossShowType BossShow = BossShowType.None; 
		/// <summary> 
		/// 对话ID
		/// </summary>
		public int Dialogue = 0; 
		/// <summary> 
		/// NPC信息
		/// </summary>
		public List<NPCInfo> NPCList = new List<NPCInfo>(); 
		/// <summary> 
		/// 轮盘出现的奖励列表
		/// </summary>
		public List<RewardItem> TurnTable = new List<RewardItem>(); 
		/// <summary> 
		/// 掉落奖励列表
		/// </summary>
		public List<RangeItem> DropRewards = new List<RangeItem>(); 
		/// <summary> 
		/// 物品集合索引
		/// </summary>
		public List<RewardItem> ItemSetIndex = new List<RewardItem>(); 
		/// <summary> 
		/// 额外掉落(通过小节后飞到玩家身上,不计入后台的)
		/// </summary>
		public List<RangeItem> ExtraDropLoots = new List<RangeItem>(); 
		public List<RandomEquip> DropEquips = new List<RandomEquip>(); 
		/// <summary> 
		/// 怪物掉落的战利品(拾取后立即生效,不计入后台)
		/// </summary>
		public List<LootInfo> DropLoots = new List<LootInfo>(); 
		/// <summary> 
		/// 攻击系数
		/// </summary>
		public float AttackCoefficient = 0f; 
		/// <summary> 
		/// 血量系数
		/// </summary>
		public float HPCoefficient = 0f; 
		/// <summary> 
		/// 子弹速度系数
		/// </summary>
		public float BulletSpeedCoefficient = 0f; 
		/// <summary> 
		/// 地图底图
		/// </summary>
		public string MapBottomSprite = ""; 
		/// <summary> 
		/// 地图底图2
		/// </summary>
		public string MapBottomSprite2 = ""; 
		/// <summary> 
		/// 地图额外预制体
		/// </summary>
		public List<string> ExtraObjects = new List<string>(); 
		/// <summary> 
		/// 价格系数
		/// </summary>
		public float PriceCoefficient = 0f; 
		/// <summary> 
		/// 赌徒最大生命值增加
		/// </summary>
		public List<float> GamblerMaxHpAdd = new List<float>(); 
		/// <summary> 
		/// 赌徒最大生命值减少
		/// </summary>
		public List<float> GamblerMaxHpMinus = new List<float>(); 
		/// <summary> 
		/// 技能商人售卖价格
		/// </summary>
		public int TraderPrice = 0; 
		/// <summary> 
		/// Boss出场动画spine
		/// </summary>
		public int BossSplash = 0; 
		/// <summary> 
		/// 精力槽恢复速度额外增加量
		/// </summary>
		public float PowerRecoverSpeed_Adder = 0f; 
	} 
	// Defined in table: StageRandomPool
	[System.Serializable]
	public partial class StageRandomPoolDefine
	{
		/// <summary> 
		/// 章节
		/// </summary>
		public int Chapter = 0; 
		/// <summary> 
		/// 关卡
		/// </summary>
		public int Stage = 0; 
		/// <summary> 
		/// 关卡能提供的经验值
		/// </summary>
		public int StageExp = 0; 
		/// <summary> 
		/// 地图数据路径
		/// </summary>
		public List<string> MapPath = new List<string>(); 
		/// <summary> 
		/// 敌人信息
		/// </summary>
		public List<EnemyInfo> EnemyList = new List<EnemyInfo>(); 
		/// <summary> 
		/// NPC信息
		/// </summary>
		public List<NPCInfo> NPCList = new List<NPCInfo>(); 
		/// <summary> 
		/// 轮盘出现的奖励列表
		/// </summary>
		public List<RewardItem> TurnTable = new List<RewardItem>(); 
		/// <summary> 
		/// 掉落奖励列表
		/// </summary>
		public List<RangeItem> DropRewards = new List<RangeItem>(); 
		/// <summary> 
		/// 额外掉落(通过小节后飞到玩家身上,不计入后台的)
		/// </summary>
		public List<RangeItem> ExtraDropLoots = new List<RangeItem>(); 
		/// <summary> 
		/// 怪物掉落的战利品(拾取后立即生效,不计入后台)
		/// </summary>
		public List<LootInfo> DropLoots = new List<LootInfo>(); 
		/// <summary> 
		/// 攻击系数
		/// </summary>
		public float AttackCoefficient = 0f; 
		/// <summary> 
		/// 血量系数
		/// </summary>
		public float HPCoefficient = 0f; 
		/// <summary> 
		/// 攻击系数(x玩家血量)
		/// </summary>
		public float AtkRatioBaseOnPlayerHP = 0f; 
		/// <summary> 
		/// 血量系数(x玩家攻击力)
		/// </summary>
		public float HPRatioBaseOnPlayerAtk = 0f; 
		/// <summary> 
		/// 地图底图
		/// </summary>
		public string MapBottomSprite = ""; 
		/// <summary> 
		/// 地图底图2
		/// </summary>
		public string MapBottomSprite2 = ""; 
		/// <summary> 
		/// 地图额外预制体
		/// </summary>
		public List<string> ExtraObjects = new List<string>(); 
		/// <summary> 
		/// 价格系数
		/// </summary>
		public float PriceCoefficient = 0f; 
		/// <summary> 
		/// 赌徒最大生命值增加
		/// </summary>
		public List<float> GamblerMaxHpAdd = new List<float>(); 
		/// <summary> 
		/// 赌徒最大生命值减少
		/// </summary>
		public List<float> GamblerMaxHpMinus = new List<float>(); 
		/// <summary> 
		/// 技能商人售卖价格
		/// </summary>
		public int TraderPrice = 0; 
	} 
	// Defined in table: SubscriptionShop
	[System.Serializable]
	public partial class SubscriptionShopDefine
	{
		/// <summary> 
		/// 订阅商品ID
		/// </summary>
		public int Index = 0; 
		/// <summary> 
		/// 购买当日奖励
		/// </summary>
		public List<RewardItem> BuyRewards = new List<RewardItem>(); 
		/// <summary> 
		/// 周期奖励
		/// </summary>
		public List<RewardItem> CycleRewards = new List<RewardItem>(); 
		/// <summary> 
		/// 巡逻金币收益增加比例
		/// </summary>
		public float OfflineRewardsAdd = 0f; 
		/// <summary> 
		/// 快速巡逻次数增加
		/// </summary>
		public int OfflineTimesAdd = 0; 
		/// <summary> 
		/// 体力上限增加
		/// </summary>
		public int MaxStrengthAdd = 0; 
		/// <summary> 
		/// 跳过广告
		/// </summary>
		public bool SkipAd = false; 
	} 
	// Defined in table: SummonedInStage
	[System.Serializable]
	public partial class SummonedInStageDefine
	{
		/// <summary> 
		/// 召唤物ID
		/// </summary>
		public int ID = 0; 
		/// <summary> 
		/// 名称
		/// </summary>
		public string Name = ""; 
		/// <summary> 
		/// 是否无敌
		/// </summary>
		public bool Invincible = false; 
		/// <summary> 
		/// 生命值
		/// </summary>
		public int Health = 0; 
		/// <summary> 
		/// 预制体路径
		/// </summary>
		public string PrefabPath = ""; 
		/// <summary> 
		/// 攻击力百分比
		/// </summary>
		public float Atk = 0f; 
		/// <summary> 
		/// 攻击范围(半径)
		/// </summary>
		public float AtkRange = 0f; 
		/// <summary> 
		/// 攻击间隔
		/// </summary>
		public float AtkInterval = 0f; 
		/// <summary> 
		/// 移动速度
		/// </summary>
		public float MoveSpeed = 0f; 
	} 
	// Defined in table: Talent
	[System.Serializable]
	public partial class TalentDefine
	{
		/// <summary> 
		/// 天赋ID
		/// </summary>
		public int TalentID = 0; 
		/// <summary> 
		/// 金币消耗
		/// </summary>
		public int Cost = 0; 
		/// <summary> 
		/// 解锁章节
		/// </summary>
		public int ChapterRequire = 0; 
		/// <summary> 
		/// 对应技能ID
		/// </summary>
		public int SkillID = 0; 
	} 
	// Defined in table: TalentEvolution
	[System.Serializable]
	public partial class TalentEvolutionDefine
	{
		/// <summary> 
		/// 进化ID
		/// </summary>
		public int EvolutionID = 0; 
		/// <summary> 
		/// 升级消耗
		/// </summary>
		public List<RewardItem> Cost = new List<RewardItem>(); 
		/// <summary> 
		/// 进化属性
		/// </summary>
		public EvolutionType Evolution = EvolutionType.Skill; 
		/// <summary> 
		/// 解锁章节
		/// </summary>
		public int ChapterRequire = 0; 
		/// <summary> 
		/// 对应技能ID
		/// </summary>
		public int SkillID = 0; 
	} 
	// Defined in table: TaskConfig
	[System.Serializable]
	public partial class TaskConfigDefine
	{
		/// <summary> 
		/// 第几天
		/// </summary>
		public int Day = 0; 
		/// <summary> 
		/// 任务ID
		/// </summary>
		public int Task = 0; 
		/// <summary> 
		/// 任务模式类型
		/// </summary>
		public DailyTaskType TaskType = DailyTaskType.Login; 
		/// <summary> 
		/// 完成次数
		/// </summary>
		public int CompleteNumber = 0; 
		/// <summary> 
		/// 活跃度
		/// </summary>
		public int Activity = 0; 
		/// <summary> 
		/// 任务描述
		/// </summary>
		public string desc = ""; 
		/// <summary> 
		/// 多语言定位
		/// </summary>
		public LocalItem LocalSystem = new LocalItem(); 
	} 
	// Defined in table: TaskRewards
	[System.Serializable]
	public partial class TaskRewardsDefine
	{
		/// <summary> 
		/// 第几天
		/// </summary>
		public int Day = 0; 
		/// <summary> 
		/// 活跃度
		/// </summary>
		public int Activity = 0; 
		/// <summary> 
		/// 奖励列表
		/// </summary>
		public List<RewardItem> Rewards = new List<RewardItem>(); 
		/// <summary> 
		/// 物品集合索引
		/// </summary>
		public List<RewardItem> ItemSetIndex = new List<RewardItem>(); 
		/// <summary> 
		/// 离线奖励时间(秒)
		/// </summary>
		public int OfflineTime = 0; 
	} 
	// Defined in table: Thief
	[System.Serializable]
	public partial class ThiefDefine
	{
		/// <summary> 
		/// 章节ID
		/// </summary>
		public int ChapterID = 0; 
		/// <summary> 
		/// 每次攻击掉落金币
		/// </summary>
		public int Coin = 0; 
	} 
	// Defined in table: UIBeginnerGuide
	[System.Serializable]
	public partial class UIBeginnerGuideDefine
	{
		/// <summary> 
		/// ID
		/// </summary>
		public int ID = 0; 
		/// <summary> 
		/// 多语言定位
		/// </summary>
		public LocalItem Tip = new LocalItem(); 
		/// <summary> 
		/// 提示语离中心的视口坐标(归一量)
		/// </summary>
		public GlobalsVector3 WordPosition = new GlobalsVector3(); 
		/// <summary> 
		/// 该引导关闭时需要接下一个
		/// </summary>
		public bool NeedNext = false; 
		/// <summary> 
		/// 引导编组
		/// </summary>
		public int GuideGroup = 0; 
		/// <summary> 
		/// 引导类型
		/// </summary>
		public int GuideType = 0; 
		/// <summary> 
		/// 是否是强引导
		/// </summary>
		public bool Force = false; 
		/// <summary> 
		/// 是否运行button的点击事件
		/// </summary>
		public bool InvokeButton = false; 
		/// <summary> 
		/// 目标transform
		/// </summary>
		public string TargetTransform = ""; 
		/// <summary> 
		/// 离目标的偏移量
		/// </summary>
		public GlobalsVector3 TargetOffset = new GlobalsVector3(); 
		/// <summary> 
		/// 目标坐标
		/// </summary>
		public GlobalsVector3 TargetPosition = new GlobalsVector3(); 
		/// <summary> 
		/// 监听UI打开的事件
		/// </summary>
		public string UIOpenEvent = ""; 
		/// <summary> 
		/// 监听UI关闭的事件
		/// </summary>
		public string UICloseEvent = ""; 
		/// <summary> 
		/// 延迟多少帧打开该引导
		/// </summary>
		public int DelayShowTime = 0; 
		/// <summary> 
		/// 进入该引导时要打开的UI
		/// </summary>
		public string UIToOpen = ""; 
	} 
	// Defined in table: UIStoreData
	[System.Serializable]
	public partial class UIStoreDataDefine
	{
		/// <summary> 
		/// 商店ID
		/// </summary>
		public int Index = 0; 
		/// <summary> 
		/// 子商店名称
		/// </summary>
		public string SubStoreName = ""; 
		/// <summary> 
		/// 预制体路径
		/// </summary>
		public string SubStorePrefabPath = ""; 
		/// <summary> 
		/// 多语言定位
		/// </summary>
		public LocalItem LocalItemDes = new LocalItem(); 
		/// <summary> 
		/// 是否开放
		/// </summary>
		public bool IsOn = false; 
		/// <summary> 
		/// 从上往下的顺序
		/// </summary>
		public int Order = 0; 
	} 
	// Defined in table: UIStoreGoodsData
	[System.Serializable]
	public partial class UIStoreGoodsDataDefine
	{
		/// <summary> 
		/// ID
		/// </summary>
		public int ID = 0; 
		/// <summary> 
		/// 对应的商品ID
		/// </summary>
		public List<int> GoodsID = new List<int>(); 
		/// <summary> 
		/// 冷却时间是否针对的是广告不同商品间跳转的冷却时间
		/// </summary>
		public bool CoolDownBetweenAd = false; 
		/// <summary> 
		/// 所属子商店名称
		/// </summary>
		public string SubStore = ""; 
		/// <summary> 
		/// 货物名称
		/// </summary>
		public string GoodsName = ""; 
		/// <summary> 
		/// 货物描述
		/// </summary>
		public string GoodsDes = ""; 
		/// <summary> 
		/// 多语言定位
		/// </summary>
		public LocalItem LocalGoodsName = new LocalItem(); 
		/// <summary> 
		/// 多语言定位
		/// </summary>
		public LocalItem LocalGoodsDes = new LocalItem(); 
		/// <summary> 
		/// 背景图
		/// </summary>
		public AtlasStructure BGAtlas = new AtlasStructure(); 
		/// <summary> 
		/// 背景图(sprite形式)
		/// </summary>
		public string BGSprite = ""; 
		/// <summary> 
		/// 使用的预制体
		/// </summary>
		public string PrefabPath = ""; 
		/// <summary> 
		/// 货物图标
		/// </summary>
		public AtlasStructure GoodsAtlas = new AtlasStructure(); 
		/// <summary> 
		/// 用到的Spine
		/// </summary>
		public string Spine = ""; 
		/// <summary> 
		/// 需要通关的章节
		/// </summary>
		public int RequireChapter = 0; 
	} 
	// Defined in table: UISupplyStoreAccumulative
	[System.Serializable]
	public partial class UISupplyStoreAccumulativeDefine
	{
		/// <summary> 
		/// ID
		/// </summary>
		public int ID = 0; 
		/// <summary> 
		/// 对应的商品ID
		/// </summary>
		public List<RewardItem> Rewards = new List<RewardItem>(); 
		/// <summary> 
		/// 领取该奖励需要的购买次数
		/// </summary>
		public int NeedBuyTimes = 0; 
	} 
	// Defined in table: UISupplyStoreData
	[System.Serializable]
	public partial class UISupplyStoreDataDefine
	{
		/// <summary> 
		/// 子商店名称
		/// </summary>
		public string SubStoreName = ""; 
		/// <summary> 
		/// 多语言定位
		/// </summary>
		public LocalItem LocalItemDes = new LocalItem(); 
	} 
	// Defined in table: UISupplyStoreGoodsData
	[System.Serializable]
	public partial class UISupplyStoreGoodsDataDefine
	{
		/// <summary> 
		/// ID
		/// </summary>
		public int ID = 0; 
		/// <summary> 
		/// 对应的商品ID
		/// </summary>
		public List<int> GoodsID = new List<int>(); 
		/// <summary> 
		/// 物资商店名称
		/// </summary>
		public string StoreName = ""; 
		/// <summary> 
		/// 货物价格
		/// </summary>
		public int GoodsPrice = 0; 
		/// <summary> 
		/// 打折
		/// </summary>
		public string Discount = ""; 
		/// <summary> 
		/// 背景图
		/// </summary>
		public AtlasStructure BGAtlas = new AtlasStructure(); 
		/// <summary> 
		/// 背景图(sprite形式)
		/// </summary>
		public string BGSprite = ""; 
	} 
	// Defined in table: UIUnlockTip
	[System.Serializable]
	public partial class UIUnlockTipDefine
	{
		/// <summary> 
		/// ID
		/// </summary>
		public int ID = 0; 
		/// <summary> 
		/// 多语言定位
		/// </summary>
		public LocalItem LocalTip = new LocalItem(); 
		/// <summary> 
		/// tip图集
		/// </summary>
		public AtlasStructure AtlasPicture = new AtlasStructure(); 
		/// <summary> 
		/// 引导类型
		/// </summary>
		public int GuideType = 0; 
		/// <summary> 
		/// 目标transform
		/// </summary>
		public string TargetTransform = ""; 
		/// <summary> 
		/// 离目标的偏移量
		/// </summary>
		public GlobalsVector3 TargetOffset = new GlobalsVector3(); 
	} 
	// Defined in table: WeeklyTaskConfig
	[System.Serializable]
	public partial class WeeklyTaskConfigDefine
	{
		/// <summary> 
		/// 任务ID
		/// </summary>
		public int Task = 0; 
		/// <summary> 
		/// 任务模式类型
		/// </summary>
		public WeeklyTaskType TaskType = WeeklyTaskType.EquipFusion; 
		/// <summary> 
		/// 完成次数
		/// </summary>
		public int CompleteNumber = 0; 
		/// <summary> 
		/// 活跃度
		/// </summary>
		public int Activity = 0; 
		/// <summary> 
		/// 图片
		/// </summary>
		public AtlasStructure icon = new AtlasStructure(); 
		/// <summary> 
		/// 任务描述
		/// </summary>
		public string desc = ""; 
		/// <summary> 
		/// 多语言定位
		/// </summary>
		public LocalItem LocalSystem = new LocalItem(); 
	} 
	// Defined in table: WeeklyTaskRewards
	[System.Serializable]
	public partial class WeeklyTaskRewardsDefine
	{
		/// <summary> 
		/// 活跃度
		/// </summary>
		public int Activity = 0; 
		/// <summary> 
		/// 奖励列表
		/// </summary>
		public List<RewardItem> Rewards = new List<RewardItem>(); 
		/// <summary> 
		/// 物品集合索引
		/// </summary>
		public List<RewardItem> ItemSetIndex = new List<RewardItem>(); 
		/// <summary> 
		/// 离线奖励时间(秒)
		/// </summary>
		public int OfflineTime = 0; 
	} 
}
